import { Component, ContentChild, EventEmitter, forwardRef, Input, Output } from '@angular/core';
import { Raycaster, Vector4 } from 'three';
import { RAYCASTER, RaycasterService } from './events/raycaster.service';
import { ThCamera } from './generated/ThCamera';
import { ThObject3D } from './generated/ThObject3D';
import { ThScene } from './generated/ThScene';
import * as i0 from "@angular/core";
import * as i1 from "./ThEngine.service";
import * as i2 from "./events/raycaster.service";
// eslint-disable-next-line @angular-eslint/component-class-suffix
export class ThView {
    constructor(engServ, raycaster) {
        this.engServ = engServ;
        this.raycaster = raycaster;
        // -----------------------------------------------------------------------------------------------
        // eslint-disable-next-line @angular-eslint/no-output-on-prefix
        this.onRender = new EventEmitter();
    }
    set contentScene(scene) {
        if (scene) {
            this.scene = scene;
        }
    }
    set effectComposer(effectComposer) {
        this._effectComposer = effectComposer;
        this.configureEffectComposerRenderTarget();
    }
    get effectComposer() {
        return this._effectComposer;
    }
    set camera(camera) {
        this._camera = camera;
        this.initRaycaster();
    }
    get camera() {
        return this._camera;
    }
    set contentCamera(camera) {
        if (camera) {
            this.camera = camera;
        }
    }
    set viewPort(viewPort) {
        this._viewPort = viewPort;
        this.configureEffectComposerRenderTarget();
    }
    get viewPort() {
        return this._viewPort;
    }
    ngOnInit() {
        this.initRaycaster();
    }
    initRaycaster() {
        if (this.camera && this.engServ.canvas) {
            this.raycaster.init(this.camera, this.engServ.canvas);
        }
    }
    add(scene) {
        // nothing to do here
    }
    remove(scene) {
        // norhing to do
    }
    configureEffectComposerRenderTarget() {
        if (!this.viewPort || !this.effectComposer) {
            return;
        }
        else {
            let width;
            let height;
            if (this.viewPort instanceof Vector4) {
                width = this.viewPort.z;
                height = this.viewPort?.width;
            }
            else {
                width = this.viewPort.width;
                height = this.viewPort.height;
            }
            //TODO: check if pixel ration ha
            this.effectComposer.setSize(width, height);
        }
    }
}
ThView.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThView, deps: [{ token: i1.ThEngineService }, { token: i2.RaycasterService }], target: i0.ɵɵFactoryTarget.Component });
ThView.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.1", type: ThView, selector: "th-view", inputs: { scene: "scene", effectComposer: "effectComposer", camera: "camera", shadow: "shadow", viewPort: "viewPort", scissor: "scissor", scissorTest: "scissorTest", clearColor: "clearColor", clearAlpha: "clearAlpha" }, outputs: { onRender: "onRender" }, providers: [
        { provide: ThObject3D, useExisting: forwardRef(() => ThView) },
        { provide: RAYCASTER, useValue: new Raycaster() },
        RaycasterService
    ], queries: [{ propertyName: "contentScene", first: true, predicate: ThScene, descendants: true }, { propertyName: "contentCamera", first: true, predicate: ThCamera, descendants: true }], ngImport: i0, template: '<ng-content/>', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThView, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-view',
                    template: '<ng-content/>',
                    providers: [
                        { provide: ThObject3D, useExisting: forwardRef(() => ThView) },
                        { provide: RAYCASTER, useValue: new Raycaster() },
                        RaycasterService
                    ]
                }]
        }], ctorParameters: function () { return [{ type: i1.ThEngineService }, { type: i2.RaycasterService }]; }, propDecorators: { scene: [{
                type: Input
            }], contentScene: [{
                type: ContentChild,
                args: [ThScene]
            }], effectComposer: [{
                type: Input
            }], camera: [{
                type: Input
            }], contentCamera: [{
                type: ContentChild,
                args: [ThCamera]
            }], shadow: [{
                type: Input
            }], viewPort: [{
                type: Input
            }], scissor: [{
                type: Input
            }], scissorTest: [{
                type: Input
            }], clearColor: [{
                type: Input
            }], clearAlpha: [{
                type: Input
            }], onRender: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,