import { ChangeDetectionStrategy, Component, ContentChildren, forwardRef, Inject, Input, isDevMode, ViewChild } from '@angular/core';
import { Raycaster } from 'three';
import { RAYCASTER, RaycasterService } from './events/raycaster.service';
import { ThObject3D } from './generated/ThObject3D';
import { ThAnimationLoopService } from './renderer/th-animation-loop.service';
import { ThEngineService } from './ThEngine.service';
import { ThView } from './ThView';
import * as i0 from "@angular/core";
import * as i1 from "./ThEngine.service";
import * as i2 from "./renderer/th-animation-loop.service";
import * as i3 from "@angular/common";
import * as i4 from "./events/raycaster.service";
// eslint-disable-next-line @angular-eslint/component-class-suffix
export class ThCanvas extends ThView {
    get obj() {
        return this;
    }
    set views(viewList) {
        viewList.forEach((v) => this.engServ.addView(v));
    }
    set rendererCanvas(canvas) {
        if (!canvas) {
            return;
        }
        this._rendererCanvas = canvas;
        canvas.nativeElement.id += this.nid;
    }
    get rendererCanvas() {
        return this._rendererCanvas;
    }
    constructor(engServ, animationLoop, raycaster) {
        super(engServ, raycaster);
        this.engServ = engServ;
        this.animationLoop = animationLoop;
        this.raycaster = raycaster;
        this.isDevMode = isDevMode;
        this.nid = ThCanvas.instanceCnt++;
        /**
         * if true does not use the ThCanvas as view
         * this is esepcially usefull if you have multiple views
         * and want to iterate over all of them with *ngFor
         * use statically (before ngOnInit is triggered)
         */
        this.disableDefaultView = false;
    }
    ngAfterContentChecked() {
        this.animationLoop.requestAnimationFrame();
    }
    ngAfterViewInit() {
        this.animationLoop.requestAnimationFrame();
    }
    ngOnInit() {
        this.applyRendererParameters();
        super.ngOnInit();
        if (!this.disableDefaultView) {
            this.engServ.addView(this);
        }
    }
    applyRendererParameters() {
        if (!this.rendererCanvas) {
            throw new Error('Missing Canvas');
        }
        this.engServ.setRenderer({ ...this.rendererParameters, domElement: this.rendererCanvas.nativeElement });
    }
}
ThCanvas.instanceCnt = 0;
ThCanvas.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThCanvas, deps: [{ token: i1.ThEngineService }, { token: i2.ThAnimationLoopService }, { token: forwardRef(() => RaycasterService) }], target: i0.ɵɵFactoryTarget.Component });
ThCanvas.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.1", type: ThCanvas, selector: "th-canvas", inputs: { rendererParameters: "rendererParameters", disableDefaultView: "disableDefaultView" }, providers: [
        { provide: ThObject3D, useExisting: forwardRef(() => ThCanvas) },
        ThEngineService,
        ThAnimationLoopService,
        { provide: RAYCASTER, useValue: new Raycaster() },
        forwardRef(() => RaycasterService),
        { provide: ThView, useExisting: forwardRef(() => ThCanvas) }
    ], queries: [{ propertyName: "views", predicate: ThView }], viewQueries: [{ propertyName: "rendererCanvas", first: true, predicate: ["rendererCanvas"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: '<canvas #rendererCanvas id="rendererCanvas"><ng-content *ngIf="isDevMode()" ></ng-content></canvas>', isInline: true, styles: [":host{display:flex;flex:auto;line-height:0;height:100%}canvas{flex:auto;outline:none;width:100%;height:100%}\n"], dependencies: [{ kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThCanvas, decorators: [{
            type: Component,
            args: [{ selector: 'th-canvas', template: '<canvas #rendererCanvas id="rendererCanvas"><ng-content *ngIf="isDevMode()" ></ng-content></canvas>', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        { provide: ThObject3D, useExisting: forwardRef(() => ThCanvas) },
                        ThEngineService,
                        ThAnimationLoopService,
                        { provide: RAYCASTER, useValue: new Raycaster() },
                        forwardRef(() => RaycasterService),
                        { provide: ThView, useExisting: forwardRef(() => ThCanvas) }
                    ], styles: [":host{display:flex;flex:auto;line-height:0;height:100%}canvas{flex:auto;outline:none;width:100%;height:100%}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.ThEngineService }, { type: i2.ThAnimationLoopService }, { type: i4.RaycasterService, decorators: [{
                    type: Inject,
                    args: [forwardRef(() => RaycasterService)]
                }] }]; }, propDecorators: { rendererParameters: [{
                type: Input
            }], disableDefaultView: [{
                type: Input
            }], views: [{
                type: ContentChildren,
                args: [ThView]
            }], rendererCanvas: [{
                type: ViewChild,
                args: ['rendererCanvas', { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,