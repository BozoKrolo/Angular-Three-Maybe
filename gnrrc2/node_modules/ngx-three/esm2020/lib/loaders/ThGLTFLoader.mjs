import { Directive, Host, Injectable, Pipe } from '@angular/core';
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';
import { ThAsyncLoaderBaseDirective, ThAsyncLoaderBasePipe, ThAsyncLoaderService } from './ThAsyncLoaderBase';
import * as i0 from "@angular/core";
import * as i1 from "./compressed-texture/ThDRACOLoader";
import * as i2 from "../generated/ThObject3D";
export class GLTFLoaderService extends ThAsyncLoaderService {
    constructor(dracoLoaderService) {
        super();
        this.dracoLoaderService = dracoLoaderService;
        this.clazz = GLTFLoader;
    }
    createLoaderInstance() {
        const loader = super.createLoaderInstance();
        loader.setDRACOLoader(this.dracoLoaderService.createLoaderInstance());
        return loader;
    }
}
GLTFLoaderService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: GLTFLoaderService, deps: [{ token: i1.DRACOLoaderService }], target: i0.ɵɵFactoryTarget.Injectable });
GLTFLoaderService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: GLTFLoaderService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: GLTFLoaderService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.DRACOLoaderService }]; } });
export class ThGLTFLoaderPipe extends ThAsyncLoaderBasePipe {
    constructor(service) {
        super();
        this.service = service;
    }
}
ThGLTFLoaderPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThGLTFLoaderPipe, deps: [{ token: GLTFLoaderService }], target: i0.ɵɵFactoryTarget.Pipe });
ThGLTFLoaderPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.1.1", ngImport: i0, type: ThGLTFLoaderPipe, name: "loadGLTF" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThGLTFLoaderPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'loadGLTF',
                    pure: true
                }]
        }], ctorParameters: function () { return [{ type: GLTFLoaderService }]; } });
export class ThGLTFLoaderDirective extends ThAsyncLoaderBaseDirective {
    constructor(host, zone, service) {
        super(host, zone);
        this.host = host;
        this.zone = zone;
        this.service = service;
    }
    getRefFromResponse(response) {
        return response.scene;
    }
}
ThGLTFLoaderDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThGLTFLoaderDirective, deps: [{ token: i2.ThObject3D, host: true }, { token: i0.NgZone }, { token: GLTFLoaderService }], target: i0.ɵɵFactoryTarget.Directive });
ThGLTFLoaderDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.1.1", type: ThGLTFLoaderDirective, selector: "[loadGLTF]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThGLTFLoaderDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[loadGLTF]'
                }]
        }], ctorParameters: function () { return [{ type: i2.ThObject3D, decorators: [{
                    type: Host
                }] }, { type: i0.NgZone }, { type: GLTFLoaderService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGhHTFRGTG9hZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXRocmVlL3NyYy9saWIvbG9hZGVycy9UaEdMVEZMb2FkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFVLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDekYsT0FBTyxFQUFRLFVBQVUsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBR3pFLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxxQkFBcUIsRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDOzs7O0FBSzlHLE1BQU0sT0FBTyxpQkFBa0IsU0FBUSxvQkFBZ0M7SUFHckUsWUFBc0Isa0JBQXNDO1FBQzFELEtBQUssRUFBRSxDQUFDO1FBRFksdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtRQUZyRCxVQUFLLEdBQUcsVUFBVSxDQUFDO0lBSTFCLENBQUM7SUFFTSxvQkFBb0I7UUFDekIsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLG9CQUFvQixFQUFFLENBQUM7UUFDNUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxDQUFDO1FBQ3RFLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7OzhHQVhVLGlCQUFpQjtrSEFBakIsaUJBQWlCLGNBRmhCLE1BQU07MkZBRVAsaUJBQWlCO2tCQUg3QixVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7QUFtQkQsTUFBTSxPQUFPLGdCQUFpQixTQUFRLHFCQUFpQztJQUNyRSxZQUFzQixPQUEwQjtRQUM5QyxLQUFLLEVBQUUsQ0FBQztRQURZLFlBQU8sR0FBUCxPQUFPLENBQW1CO0lBRWhELENBQUM7OzZHQUhVLGdCQUFnQjsyR0FBaEIsZ0JBQWdCOzJGQUFoQixnQkFBZ0I7a0JBSjVCLElBQUk7bUJBQUM7b0JBQ0osSUFBSSxFQUFFLFVBQVU7b0JBQ2hCLElBQUksRUFBRSxJQUFJO2lCQUNYOztBQVVELE1BQU0sT0FBTyxxQkFBc0IsU0FBUSwwQkFBc0M7SUFDL0UsWUFBOEIsSUFBZ0IsRUFBWSxJQUFZLEVBQVksT0FBMEI7UUFDMUcsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQURVLFNBQUksR0FBSixJQUFJLENBQVk7UUFBWSxTQUFJLEdBQUosSUFBSSxDQUFRO1FBQVksWUFBTyxHQUFQLE9BQU8sQ0FBbUI7SUFFNUcsQ0FBQztJQUVTLGtCQUFrQixDQUFDLFFBQWM7UUFDekMsT0FBTyxRQUFRLENBQUMsS0FBSyxDQUFDO0lBQ3hCLENBQUM7O2tIQVBVLHFCQUFxQjtzR0FBckIscUJBQXFCOzJGQUFyQixxQkFBcUI7a0JBSGpDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLFlBQVk7aUJBQ3ZCOzswQkFFYyxJQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBIb3N0LCBJbmplY3RhYmxlLCBOZ1pvbmUsIFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEdMVEYsIEdMVEZMb2FkZXIgfSBmcm9tICd0aHJlZS9leGFtcGxlcy9qc20vbG9hZGVycy9HTFRGTG9hZGVyJztcbmltcG9ydCB7IFRoT2JqZWN0M0QgfSBmcm9tICcuLi9nZW5lcmF0ZWQvVGhPYmplY3QzRCc7XG5pbXBvcnQgeyBEUkFDT0xvYWRlclNlcnZpY2UgfSBmcm9tICcuL2NvbXByZXNzZWQtdGV4dHVyZS9UaERSQUNPTG9hZGVyJztcbmltcG9ydCB7IFRoQXN5bmNMb2FkZXJCYXNlRGlyZWN0aXZlLCBUaEFzeW5jTG9hZGVyQmFzZVBpcGUsIFRoQXN5bmNMb2FkZXJTZXJ2aWNlIH0gZnJvbSAnLi9UaEFzeW5jTG9hZGVyQmFzZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIEdMVEZMb2FkZXJTZXJ2aWNlIGV4dGVuZHMgVGhBc3luY0xvYWRlclNlcnZpY2U8R0xURkxvYWRlcj4ge1xuICBwdWJsaWMgY2xhenogPSBHTFRGTG9hZGVyO1xuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBkcmFjb0xvYWRlclNlcnZpY2U6IERSQUNPTG9hZGVyU2VydmljZSkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBwdWJsaWMgY3JlYXRlTG9hZGVySW5zdGFuY2UoKTogR0xURkxvYWRlciB7XG4gICAgY29uc3QgbG9hZGVyID0gc3VwZXIuY3JlYXRlTG9hZGVySW5zdGFuY2UoKTtcbiAgICBsb2FkZXIuc2V0RFJBQ09Mb2FkZXIodGhpcy5kcmFjb0xvYWRlclNlcnZpY2UuY3JlYXRlTG9hZGVySW5zdGFuY2UoKSk7XG4gICAgcmV0dXJuIGxvYWRlcjtcbiAgfVxufVxuXG5AUGlwZSh7XG4gIG5hbWU6ICdsb2FkR0xURicsXG4gIHB1cmU6IHRydWVcbn0pXG5leHBvcnQgY2xhc3MgVGhHTFRGTG9hZGVyUGlwZSBleHRlbmRzIFRoQXN5bmNMb2FkZXJCYXNlUGlwZTxHTFRGTG9hZGVyPiBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgc2VydmljZTogR0xURkxvYWRlclNlcnZpY2UpIHtcbiAgICBzdXBlcigpO1xuICB9XG59XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tsb2FkR0xURl0nXG59KVxuZXhwb3J0IGNsYXNzIFRoR0xURkxvYWRlckRpcmVjdGl2ZSBleHRlbmRzIFRoQXN5bmNMb2FkZXJCYXNlRGlyZWN0aXZlPEdMVEZMb2FkZXI+IHtcbiAgY29uc3RydWN0b3IoQEhvc3QoKSBwcm90ZWN0ZWQgaG9zdDogVGhPYmplY3QzRCwgcHJvdGVjdGVkIHpvbmU6IE5nWm9uZSwgcHJvdGVjdGVkIHNlcnZpY2U6IEdMVEZMb2FkZXJTZXJ2aWNlKSB7XG4gICAgc3VwZXIoaG9zdCwgem9uZSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0UmVmRnJvbVJlc3BvbnNlKHJlc3BvbnNlOiBHTFRGKSB7XG4gICAgcmV0dXJuIHJlc3BvbnNlLnNjZW5lO1xuICB9XG59XG4iXX0=