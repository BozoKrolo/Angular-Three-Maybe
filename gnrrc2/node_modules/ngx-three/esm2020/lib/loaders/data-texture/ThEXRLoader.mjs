import { Directive, Host, Injectable, Pipe } from '@angular/core';
import { EXRLoader } from 'three/examples/jsm/loaders/EXRLoader';
import { ThCallbackLoaderBaseDirective, ThCallbackLoaderBasePipe, ThCallbackLoaderService } from '../ThCallbackLoaderBase';
import * as i0 from "@angular/core";
import * as i1 from "../../generated/ThDataTexture";
export class EXRLoaderService extends ThCallbackLoaderService {
    constructor() {
        super(...arguments);
        this.clazz = EXRLoader;
    }
}
EXRLoaderService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: EXRLoaderService, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
EXRLoaderService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: EXRLoaderService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: EXRLoaderService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });
export class ThEXRLoaderPipe extends ThCallbackLoaderBasePipe {
    constructor(service) {
        super();
        this.service = service;
    }
}
ThEXRLoaderPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThEXRLoaderPipe, deps: [{ token: EXRLoaderService }], target: i0.ɵɵFactoryTarget.Pipe });
ThEXRLoaderPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.1.1", ngImport: i0, type: ThEXRLoaderPipe, name: "loadEXRTexture" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThEXRLoaderPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'loadEXRTexture',
                    pure: true
                }]
        }], ctorParameters: function () { return [{ type: EXRLoaderService }]; } });
export class ThEXRLoaderDirective extends ThCallbackLoaderBaseDirective {
    constructor(host, zone, service) {
        super(host, zone);
        this.host = host;
        this.zone = zone;
        this.service = service;
    }
}
ThEXRLoaderDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThEXRLoaderDirective, deps: [{ token: i1.ThDataTexture, host: true }, { token: i0.NgZone }, { token: EXRLoaderService }], target: i0.ɵɵFactoryTarget.Directive });
ThEXRLoaderDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.1.1", type: ThEXRLoaderDirective, selector: "[loadEXRTexture]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThEXRLoaderDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[loadEXRTexture]'
                }]
        }], ctorParameters: function () { return [{ type: i1.ThDataTexture, decorators: [{
                    type: Host
                }] }, { type: i0.NgZone }, { type: EXRLoaderService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGhFWFJMb2FkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtdGhyZWUvc3JjL2xpYi9sb2FkZXJzL2RhdGEtdGV4dHVyZS9UaEVYUkxvYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQVUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUN6RixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFFakUsT0FBTyxFQUNMLDZCQUE2QixFQUM3Qix3QkFBd0IsRUFDeEIsdUJBQXVCLEVBQ3hCLE1BQU0seUJBQXlCLENBQUM7OztBQUtqQyxNQUFNLE9BQU8sZ0JBQWlCLFNBQVEsdUJBQWtDO0lBSHhFOztRQUlTLFVBQUssR0FBRyxTQUFTLENBQUM7S0FDMUI7OzZHQUZZLGdCQUFnQjtpSEFBaEIsZ0JBQWdCLGNBRmYsTUFBTTsyRkFFUCxnQkFBZ0I7a0JBSDVCLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COztBQVNELE1BQU0sT0FBTyxlQUFnQixTQUFRLHdCQUFtQztJQUN0RSxZQUFzQixPQUF5QjtRQUM3QyxLQUFLLEVBQUUsQ0FBQztRQURZLFlBQU8sR0FBUCxPQUFPLENBQWtCO0lBRS9DLENBQUM7OzRHQUhVLGVBQWU7MEdBQWYsZUFBZTsyRkFBZixlQUFlO2tCQUozQixJQUFJO21CQUFDO29CQUNKLElBQUksRUFBRSxnQkFBZ0I7b0JBQ3RCLElBQUksRUFBRSxJQUFJO2lCQUNYOztBQVVELE1BQU0sT0FBTyxvQkFBcUIsU0FBUSw2QkFBd0M7SUFDaEYsWUFBOEIsSUFBbUIsRUFBWSxJQUFZLEVBQVksT0FBeUI7UUFDNUcsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQURVLFNBQUksR0FBSixJQUFJLENBQWU7UUFBWSxTQUFJLEdBQUosSUFBSSxDQUFRO1FBQVksWUFBTyxHQUFQLE9BQU8sQ0FBa0I7SUFFOUcsQ0FBQzs7aUhBSFUsb0JBQW9CO3FHQUFwQixvQkFBb0I7MkZBQXBCLG9CQUFvQjtrQkFIaEMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsa0JBQWtCO2lCQUM3Qjs7MEJBRWMsSUFBSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSG9zdCwgSW5qZWN0YWJsZSwgTmdab25lLCBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBFWFJMb2FkZXIgfSBmcm9tICd0aHJlZS9leGFtcGxlcy9qc20vbG9hZGVycy9FWFJMb2FkZXInO1xuaW1wb3J0IHsgVGhEYXRhVGV4dHVyZSB9IGZyb20gJy4uLy4uL2dlbmVyYXRlZC9UaERhdGFUZXh0dXJlJztcbmltcG9ydCB7XG4gIFRoQ2FsbGJhY2tMb2FkZXJCYXNlRGlyZWN0aXZlLFxuICBUaENhbGxiYWNrTG9hZGVyQmFzZVBpcGUsXG4gIFRoQ2FsbGJhY2tMb2FkZXJTZXJ2aWNlXG59IGZyb20gJy4uL1RoQ2FsbGJhY2tMb2FkZXJCYXNlJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgRVhSTG9hZGVyU2VydmljZSBleHRlbmRzIFRoQ2FsbGJhY2tMb2FkZXJTZXJ2aWNlPEVYUkxvYWRlcj4ge1xuICBwdWJsaWMgY2xhenogPSBFWFJMb2FkZXI7XG59XG5cbkBQaXBlKHtcbiAgbmFtZTogJ2xvYWRFWFJUZXh0dXJlJyxcbiAgcHVyZTogdHJ1ZVxufSlcbmV4cG9ydCBjbGFzcyBUaEVYUkxvYWRlclBpcGUgZXh0ZW5kcyBUaENhbGxiYWNrTG9hZGVyQmFzZVBpcGU8RVhSTG9hZGVyPiBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgc2VydmljZTogRVhSTG9hZGVyU2VydmljZSkge1xuICAgIHN1cGVyKCk7XG4gIH1cbn1cblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2xvYWRFWFJUZXh0dXJlXSdcbn0pXG5leHBvcnQgY2xhc3MgVGhFWFJMb2FkZXJEaXJlY3RpdmUgZXh0ZW5kcyBUaENhbGxiYWNrTG9hZGVyQmFzZURpcmVjdGl2ZTxFWFJMb2FkZXI+IHtcbiAgY29uc3RydWN0b3IoQEhvc3QoKSBwcm90ZWN0ZWQgaG9zdDogVGhEYXRhVGV4dHVyZSwgcHJvdGVjdGVkIHpvbmU6IE5nWm9uZSwgcHJvdGVjdGVkIHNlcnZpY2U6IEVYUkxvYWRlclNlcnZpY2UpIHtcbiAgICBzdXBlcihob3N0LCB6b25lKTtcbiAgfVxufVxuIl19