import { Directive, Host, Injectable, Pipe } from '@angular/core';
import { PVRLoader } from 'three/examples/jsm/loaders/PVRLoader';
import { ThCallbackLoaderService, ThCallbackLoaderBaseDirective, ThCallbackLoaderBasePipe } from '../ThCallbackLoaderBase';
import * as i0 from "@angular/core";
import * as i1 from "../../generated/ThCompressedTexture";
export class PVRLoaderService extends ThCallbackLoaderService {
    constructor() {
        super(...arguments);
        this.clazz = PVRLoader;
    }
}
PVRLoaderService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: PVRLoaderService, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
PVRLoaderService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: PVRLoaderService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: PVRLoaderService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });
export class ThPVRLoaderPipe extends ThCallbackLoaderBasePipe {
    constructor(service) {
        super();
        this.service = service;
    }
}
ThPVRLoaderPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThPVRLoaderPipe, deps: [{ token: PVRLoaderService }], target: i0.ɵɵFactoryTarget.Pipe });
ThPVRLoaderPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.1.1", ngImport: i0, type: ThPVRLoaderPipe, name: "loadPVRTexture" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThPVRLoaderPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'loadPVRTexture',
                    pure: true
                }]
        }], ctorParameters: function () { return [{ type: PVRLoaderService }]; } });
export class ThPVRLoaderDirective extends ThCallbackLoaderBaseDirective {
    constructor(host, zone, service) {
        super(host, zone);
        this.host = host;
        this.zone = zone;
        this.service = service;
    }
}
ThPVRLoaderDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThPVRLoaderDirective, deps: [{ token: i1.ThCompressedTexture, host: true }, { token: i0.NgZone }, { token: PVRLoaderService }], target: i0.ɵɵFactoryTarget.Directive });
ThPVRLoaderDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.1.1", type: ThPVRLoaderDirective, selector: "[loadPVRTexture]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThPVRLoaderDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[loadPVRTexture]'
                }]
        }], ctorParameters: function () { return [{ type: i1.ThCompressedTexture, decorators: [{
                    type: Host
                }] }, { type: i0.NgZone }, { type: PVRLoaderService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGhQVlJMb2FkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtdGhyZWUvc3JjL2xpYi9sb2FkZXJzL2NvbXByZXNzZWQtdGV4dHVyZS9UaFBWUkxvYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQVUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUN6RixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFHakUsT0FBTyxFQUNMLHVCQUF1QixFQUN2Qiw2QkFBNkIsRUFDN0Isd0JBQXdCLEVBQ3pCLE1BQU0seUJBQXlCLENBQUM7OztBQUtqQyxNQUFNLE9BQU8sZ0JBQWlCLFNBQVEsdUJBQWtDO0lBSHhFOztRQUlTLFVBQUssR0FBRyxTQUFTLENBQUM7S0FDMUI7OzZHQUZZLGdCQUFnQjtpSEFBaEIsZ0JBQWdCLGNBRmYsTUFBTTsyRkFFUCxnQkFBZ0I7a0JBSDVCLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COztBQVNELE1BQU0sT0FBTyxlQUFnQixTQUFRLHdCQUFtQztJQUN0RSxZQUFzQixPQUF5QjtRQUM3QyxLQUFLLEVBQUUsQ0FBQztRQURZLFlBQU8sR0FBUCxPQUFPLENBQWtCO0lBRS9DLENBQUM7OzRHQUhVLGVBQWU7MEdBQWYsZUFBZTsyRkFBZixlQUFlO2tCQUozQixJQUFJO21CQUFDO29CQUNKLElBQUksRUFBRSxnQkFBZ0I7b0JBQ3RCLElBQUksRUFBRSxJQUFJO2lCQUNYOztBQVVELE1BQU0sT0FBTyxvQkFBcUIsU0FBUSw2QkFBd0M7SUFDaEYsWUFDb0IsSUFBeUIsRUFDakMsSUFBWSxFQUNaLE9BQXlCO1FBRW5DLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFKQSxTQUFJLEdBQUosSUFBSSxDQUFxQjtRQUNqQyxTQUFJLEdBQUosSUFBSSxDQUFRO1FBQ1osWUFBTyxHQUFQLE9BQU8sQ0FBa0I7SUFHckMsQ0FBQzs7aUhBUFUsb0JBQW9CO3FHQUFwQixvQkFBb0I7MkZBQXBCLG9CQUFvQjtrQkFIaEMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsa0JBQWtCO2lCQUM3Qjs7MEJBR0ksSUFBSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSG9zdCwgSW5qZWN0YWJsZSwgTmdab25lLCBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQVlJMb2FkZXIgfSBmcm9tICd0aHJlZS9leGFtcGxlcy9qc20vbG9hZGVycy9QVlJMb2FkZXInO1xuaW1wb3J0IHsgVGhDb21wcmVzc2VkVGV4dHVyZSB9IGZyb20gJy4uLy4uL2dlbmVyYXRlZC9UaENvbXByZXNzZWRUZXh0dXJlJztcbmltcG9ydCB7IFRoVGV4dHVyZSB9IGZyb20gJy4uLy4uL2dlbmVyYXRlZC9UaFRleHR1cmUnO1xuaW1wb3J0IHtcbiAgVGhDYWxsYmFja0xvYWRlclNlcnZpY2UsXG4gIFRoQ2FsbGJhY2tMb2FkZXJCYXNlRGlyZWN0aXZlLFxuICBUaENhbGxiYWNrTG9hZGVyQmFzZVBpcGVcbn0gZnJvbSAnLi4vVGhDYWxsYmFja0xvYWRlckJhc2UnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBQVlJMb2FkZXJTZXJ2aWNlIGV4dGVuZHMgVGhDYWxsYmFja0xvYWRlclNlcnZpY2U8UFZSTG9hZGVyPiB7XG4gIHB1YmxpYyBjbGF6eiA9IFBWUkxvYWRlcjtcbn1cblxuQFBpcGUoe1xuICBuYW1lOiAnbG9hZFBWUlRleHR1cmUnLFxuICBwdXJlOiB0cnVlXG59KVxuZXhwb3J0IGNsYXNzIFRoUFZSTG9hZGVyUGlwZSBleHRlbmRzIFRoQ2FsbGJhY2tMb2FkZXJCYXNlUGlwZTxQVlJMb2FkZXI+IGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBzZXJ2aWNlOiBQVlJMb2FkZXJTZXJ2aWNlKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxufVxuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbG9hZFBWUlRleHR1cmVdJ1xufSlcbmV4cG9ydCBjbGFzcyBUaFBWUkxvYWRlckRpcmVjdGl2ZSBleHRlbmRzIFRoQ2FsbGJhY2tMb2FkZXJCYXNlRGlyZWN0aXZlPFBWUkxvYWRlcj4ge1xuICBjb25zdHJ1Y3RvcihcbiAgICBASG9zdCgpIHByb3RlY3RlZCBob3N0OiBUaENvbXByZXNzZWRUZXh0dXJlLFxuICAgIHByb3RlY3RlZCB6b25lOiBOZ1pvbmUsXG4gICAgcHJvdGVjdGVkIHNlcnZpY2U6IFBWUkxvYWRlclNlcnZpY2VcbiAgKSB7XG4gICAgc3VwZXIoaG9zdCwgem9uZSk7XG4gIH1cbn1cbiJdfQ==