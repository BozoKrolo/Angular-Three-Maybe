import { Directive, Host, Injectable, Pipe } from '@angular/core';
import { KTX2Loader } from 'three/examples/jsm/loaders/KTX2Loader';
import { ThCallbackLoaderService, ThCallbackLoaderBaseDirective, ThCallbackLoaderBasePipe } from '../ThCallbackLoaderBase';
import * as i0 from "@angular/core";
import * as i1 from "../../generated/ThTexture";
export class KTX2LoaderService extends ThCallbackLoaderService {
    constructor() {
        super(...arguments);
        this.clazz = KTX2Loader;
        this.transcoderPath = '';
    }
    setDecoderPath(path) {
        this.transcoderPath = path;
    }
    createLoaderInstance() {
        const loader = super.createLoaderInstance();
        loader.setTranscoderPath(this.transcoderPath);
        return loader;
    }
}
KTX2LoaderService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: KTX2LoaderService, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
KTX2LoaderService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: KTX2LoaderService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: KTX2LoaderService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });
export class ThKTX2LoaderPipe extends ThCallbackLoaderBasePipe {
    constructor(service) {
        super();
        this.service = service;
    }
}
ThKTX2LoaderPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThKTX2LoaderPipe, deps: [{ token: KTX2LoaderService }], target: i0.ɵɵFactoryTarget.Pipe });
ThKTX2LoaderPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.1.1", ngImport: i0, type: ThKTX2LoaderPipe, name: "loadKTX2Texture" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThKTX2LoaderPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'loadKTX2Texture',
                    pure: true
                }]
        }], ctorParameters: function () { return [{ type: KTX2LoaderService }]; } });
export class ThKTX2LoaderDirective extends ThCallbackLoaderBaseDirective {
    constructor(host, zone, service) {
        super(host, zone);
        this.host = host;
        this.zone = zone;
        this.service = service;
    }
}
ThKTX2LoaderDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThKTX2LoaderDirective, deps: [{ token: i1.ThTexture, host: true }, { token: i0.NgZone }, { token: KTX2LoaderService }], target: i0.ɵɵFactoryTarget.Directive });
ThKTX2LoaderDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.1.1", type: ThKTX2LoaderDirective, selector: "[loadKTX2Texture]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThKTX2LoaderDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[loadKTX2Texture]'
                }]
        }], ctorParameters: function () { return [{ type: i1.ThTexture, decorators: [{
                    type: Host
                }] }, { type: i0.NgZone }, { type: KTX2LoaderService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGhLVFgyTG9hZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXRocmVlL3NyYy9saWIvbG9hZGVycy9jb21wcmVzc2VkLXRleHR1cmUvVGhLVFgyTG9hZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBVSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQ3pGLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUVuRSxPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLDZCQUE2QixFQUM3Qix3QkFBd0IsRUFDekIsTUFBTSx5QkFBeUIsQ0FBQzs7O0FBS2pDLE1BQU0sT0FBTyxpQkFBa0IsU0FBUSx1QkFBbUM7SUFIMUU7O1FBSWtCLFVBQUssR0FBRyxVQUFVLENBQUM7UUFFekIsbUJBQWMsR0FBRyxFQUFFLENBQUM7S0FXL0I7SUFUUSxjQUFjLENBQUMsSUFBWTtRQUNoQyxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztJQUM3QixDQUFDO0lBRU0sb0JBQW9CO1FBQ3pCLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO1FBQzVDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDOUMsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQzs7OEdBYlUsaUJBQWlCO2tIQUFqQixpQkFBaUIsY0FGaEIsTUFBTTsyRkFFUCxpQkFBaUI7a0JBSDdCLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COztBQXFCRCxNQUFNLE9BQU8sZ0JBQWlCLFNBQVEsd0JBQW9DO0lBQ3hFLFlBQXNCLE9BQTBCO1FBQzlDLEtBQUssRUFBRSxDQUFDO1FBRFksWUFBTyxHQUFQLE9BQU8sQ0FBbUI7SUFFaEQsQ0FBQzs7NkdBSFUsZ0JBQWdCOzJHQUFoQixnQkFBZ0I7MkZBQWhCLGdCQUFnQjtrQkFKNUIsSUFBSTttQkFBQztvQkFDSixJQUFJLEVBQUUsaUJBQWlCO29CQUN2QixJQUFJLEVBQUUsSUFBSTtpQkFDWDs7QUFVRCxNQUFNLE9BQU8scUJBQXNCLFNBQVEsNkJBQXlDO0lBQ2xGLFlBQThCLElBQWUsRUFBWSxJQUFZLEVBQVksT0FBMEI7UUFDekcsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQURVLFNBQUksR0FBSixJQUFJLENBQVc7UUFBWSxTQUFJLEdBQUosSUFBSSxDQUFRO1FBQVksWUFBTyxHQUFQLE9BQU8sQ0FBbUI7SUFFM0csQ0FBQzs7a0hBSFUscUJBQXFCO3NHQUFyQixxQkFBcUI7MkZBQXJCLHFCQUFxQjtrQkFIakMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsbUJBQW1CO2lCQUM5Qjs7MEJBRWMsSUFBSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSG9zdCwgSW5qZWN0YWJsZSwgTmdab25lLCBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBLVFgyTG9hZGVyIH0gZnJvbSAndGhyZWUvZXhhbXBsZXMvanNtL2xvYWRlcnMvS1RYMkxvYWRlcic7XG5pbXBvcnQgeyBUaFRleHR1cmUgfSBmcm9tICcuLi8uLi9nZW5lcmF0ZWQvVGhUZXh0dXJlJztcbmltcG9ydCB7XG4gIFRoQ2FsbGJhY2tMb2FkZXJTZXJ2aWNlLFxuICBUaENhbGxiYWNrTG9hZGVyQmFzZURpcmVjdGl2ZSxcbiAgVGhDYWxsYmFja0xvYWRlckJhc2VQaXBlXG59IGZyb20gJy4uL1RoQ2FsbGJhY2tMb2FkZXJCYXNlJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgS1RYMkxvYWRlclNlcnZpY2UgZXh0ZW5kcyBUaENhbGxiYWNrTG9hZGVyU2VydmljZTxLVFgyTG9hZGVyPiB7XG4gIHB1YmxpYyByZWFkb25seSBjbGF6eiA9IEtUWDJMb2FkZXI7XG5cbiAgcHJvdGVjdGVkIHRyYW5zY29kZXJQYXRoID0gJyc7XG5cbiAgcHVibGljIHNldERlY29kZXJQYXRoKHBhdGg6IHN0cmluZykge1xuICAgIHRoaXMudHJhbnNjb2RlclBhdGggPSBwYXRoO1xuICB9XG5cbiAgcHVibGljIGNyZWF0ZUxvYWRlckluc3RhbmNlKCk6IEtUWDJMb2FkZXIge1xuICAgIGNvbnN0IGxvYWRlciA9IHN1cGVyLmNyZWF0ZUxvYWRlckluc3RhbmNlKCk7XG4gICAgbG9hZGVyLnNldFRyYW5zY29kZXJQYXRoKHRoaXMudHJhbnNjb2RlclBhdGgpO1xuICAgIHJldHVybiBsb2FkZXI7XG4gIH1cbn1cblxuQFBpcGUoe1xuICBuYW1lOiAnbG9hZEtUWDJUZXh0dXJlJyxcbiAgcHVyZTogdHJ1ZVxufSlcbmV4cG9ydCBjbGFzcyBUaEtUWDJMb2FkZXJQaXBlIGV4dGVuZHMgVGhDYWxsYmFja0xvYWRlckJhc2VQaXBlPEtUWDJMb2FkZXI+IGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBzZXJ2aWNlOiBLVFgyTG9hZGVyU2VydmljZSkge1xuICAgIHN1cGVyKCk7XG4gIH1cbn1cblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2xvYWRLVFgyVGV4dHVyZV0nXG59KVxuZXhwb3J0IGNsYXNzIFRoS1RYMkxvYWRlckRpcmVjdGl2ZSBleHRlbmRzIFRoQ2FsbGJhY2tMb2FkZXJCYXNlRGlyZWN0aXZlPEtUWDJMb2FkZXI+IHtcbiAgY29uc3RydWN0b3IoQEhvc3QoKSBwcm90ZWN0ZWQgaG9zdDogVGhUZXh0dXJlLCBwcm90ZWN0ZWQgem9uZTogTmdab25lLCBwcm90ZWN0ZWQgc2VydmljZTogS1RYMkxvYWRlclNlcnZpY2UpIHtcbiAgICBzdXBlcihob3N0LCB6b25lKTtcbiAgfVxufVxuIl19