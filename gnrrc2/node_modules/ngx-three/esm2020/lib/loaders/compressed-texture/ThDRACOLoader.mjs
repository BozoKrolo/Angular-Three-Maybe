import { Injectable } from '@angular/core';
import { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader';
import { ThCallbackLoaderService } from '../ThCallbackLoaderBase';
import * as i0 from "@angular/core";
export class DRACOLoaderService extends ThCallbackLoaderService {
    constructor() {
        super(...arguments);
        this.clazz = DRACOLoader;
        this.decoderPath = '';
        this.reuseInstance = true;
    }
    setDecoderPath(path) {
        this.decoderPath = path;
    }
    setDecoderConfig(config) {
        this.decoderConfig = config;
    }
    setWorkerLimit(limit) {
        this.workerLimit = limit;
    }
    setReuseInstance(reuse) {
        this.reuseInstance = reuse;
    }
    createLoaderInstance() {
        if (this.reuseInstance && this.instance) {
            return this.instance;
        }
        const loader = super.createLoaderInstance();
        loader.setDecoderPath(this.decoderPath);
        if (this.decoderConfig) {
            loader.setDecoderConfig(this.decoderConfig);
        }
        if (this.workerLimit) {
            loader.setWorkerLimit(this.workerLimit);
        }
        if (this.reuseInstance) {
            this.instance = loader;
        }
        return loader;
    }
}
DRACOLoaderService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: DRACOLoaderService, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
DRACOLoaderService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: DRACOLoaderService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: DRACOLoaderService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGhEUkFDT0xvYWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC10aHJlZS9zcmMvbGliL2xvYWRlcnMvY29tcHJlc3NlZC10ZXh0dXJlL1RoRFJBQ09Mb2FkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDckUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0seUJBQXlCLENBQUM7O0FBU2xFLE1BQU0sT0FBTyxrQkFBbUIsU0FBUSx1QkFBb0M7SUFINUU7O1FBSWtCLFVBQUssR0FBRyxXQUFXLENBQUM7UUFDMUIsZ0JBQVcsR0FBRyxFQUFFLENBQUM7UUFHakIsa0JBQWEsR0FBRyxJQUFJLENBQUM7S0EwQ2hDO0lBdENRLGNBQWMsQ0FBQyxJQUFZO1FBQ2hDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO0lBQzFCLENBQUM7SUFFTSxnQkFBZ0IsQ0FBQyxNQUEwQjtRQUNoRCxJQUFJLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBQztJQUM5QixDQUFDO0lBRU0sY0FBYyxDQUFDLEtBQWE7UUFDakMsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7SUFDM0IsQ0FBQztJQUVNLGdCQUFnQixDQUFDLEtBQWM7UUFDcEMsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUM7SUFDN0IsQ0FBQztJQUVNLG9CQUFvQjtRQUN6QixJQUFJLElBQUksQ0FBQyxhQUFhLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUN2QyxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7U0FDdEI7UUFFRCxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztRQUM1QyxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUV4QyxJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDdEIsTUFBTSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUM3QztRQUVELElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNwQixNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUN6QztRQUVELElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUN0QixJQUFJLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQztTQUN4QjtRQUVELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7OytHQTlDVSxrQkFBa0I7bUhBQWxCLGtCQUFrQixjQUZqQixNQUFNOzJGQUVQLGtCQUFrQjtrQkFIOUIsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEUkFDT0xvYWRlciB9IGZyb20gJ3RocmVlL2V4YW1wbGVzL2pzbS9sb2FkZXJzL0RSQUNPTG9hZGVyJztcbmltcG9ydCB7IFRoQ2FsbGJhY2tMb2FkZXJTZXJ2aWNlIH0gZnJvbSAnLi4vVGhDYWxsYmFja0xvYWRlckJhc2UnO1xuXG5leHBvcnQgaW50ZXJmYWNlIERSQUNPRGVjb2RlckNvbmZpZyB7XG4gIHR5cGU6ICdqcycgfCAnd2FzbSc7XG59XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIERSQUNPTG9hZGVyU2VydmljZSBleHRlbmRzIFRoQ2FsbGJhY2tMb2FkZXJTZXJ2aWNlPERSQUNPTG9hZGVyPiB7XG4gIHB1YmxpYyByZWFkb25seSBjbGF6eiA9IERSQUNPTG9hZGVyO1xuICBwcm90ZWN0ZWQgZGVjb2RlclBhdGggPSAnJztcbiAgcHJvdGVjdGVkIGRlY29kZXJDb25maWc/OiBEUkFDT0RlY29kZXJDb25maWc7XG4gIHByb3RlY3RlZCB3b3JrZXJMaW1pdD86IG51bWJlcjtcbiAgcHJvdGVjdGVkIHJldXNlSW5zdGFuY2UgPSB0cnVlO1xuXG4gIHByb3RlY3RlZCBpbnN0YW5jZT86IERSQUNPTG9hZGVyO1xuXG4gIHB1YmxpYyBzZXREZWNvZGVyUGF0aChwYXRoOiBzdHJpbmcpIHtcbiAgICB0aGlzLmRlY29kZXJQYXRoID0gcGF0aDtcbiAgfVxuXG4gIHB1YmxpYyBzZXREZWNvZGVyQ29uZmlnKGNvbmZpZzogRFJBQ09EZWNvZGVyQ29uZmlnKSB7XG4gICAgdGhpcy5kZWNvZGVyQ29uZmlnID0gY29uZmlnO1xuICB9XG5cbiAgcHVibGljIHNldFdvcmtlckxpbWl0KGxpbWl0OiBudW1iZXIpIHtcbiAgICB0aGlzLndvcmtlckxpbWl0ID0gbGltaXQ7XG4gIH1cblxuICBwdWJsaWMgc2V0UmV1c2VJbnN0YW5jZShyZXVzZTogYm9vbGVhbikge1xuICAgIHRoaXMucmV1c2VJbnN0YW5jZSA9IHJldXNlO1xuICB9XG5cbiAgcHVibGljIGNyZWF0ZUxvYWRlckluc3RhbmNlKCk6IERSQUNPTG9hZGVyIHtcbiAgICBpZiAodGhpcy5yZXVzZUluc3RhbmNlICYmIHRoaXMuaW5zdGFuY2UpIHtcbiAgICAgIHJldHVybiB0aGlzLmluc3RhbmNlO1xuICAgIH1cblxuICAgIGNvbnN0IGxvYWRlciA9IHN1cGVyLmNyZWF0ZUxvYWRlckluc3RhbmNlKCk7XG4gICAgbG9hZGVyLnNldERlY29kZXJQYXRoKHRoaXMuZGVjb2RlclBhdGgpO1xuXG4gICAgaWYgKHRoaXMuZGVjb2RlckNvbmZpZykge1xuICAgICAgbG9hZGVyLnNldERlY29kZXJDb25maWcodGhpcy5kZWNvZGVyQ29uZmlnKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy53b3JrZXJMaW1pdCkge1xuICAgICAgbG9hZGVyLnNldFdvcmtlckxpbWl0KHRoaXMud29ya2VyTGltaXQpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnJldXNlSW5zdGFuY2UpIHtcbiAgICAgIHRoaXMuaW5zdGFuY2UgPSBsb2FkZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxvYWRlcjtcbiAgfVxufVxuIl19