import { Directive, EventEmitter, Host, inject, Injectable, Input, Output } from '@angular/core';
import { ThAnimationLoopService } from '../renderer/th-animation-loop.service';
import { isObserved } from '../util';
import { createLazyObject3DProxy } from './LazyObject3dProxy';
import { ThLoader } from './ThLoaderBase';
import * as i0 from "@angular/core";
export class ThAsyncLoaderService extends ThLoader {
    load(...args) {
        const loader = this.createLoaderInstance();
        return loader.loadAsync(...args);
    }
}
ThAsyncLoaderService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThAsyncLoaderService, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
ThAsyncLoaderService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThAsyncLoaderService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThAsyncLoaderService, decorators: [{
            type: Injectable
        }] });
export class ThAsyncLoaderBasePipe {
    constructor() {
        this.animationLoop = inject(ThAnimationLoopService);
    }
    transform(...args) {
        return this.service.load(...args).then((response) => {
            this.animationLoop.requestAnimationFrame();
            return response;
        });
    }
}
export class ThAsyncLoaderBaseDirective {
    set url(url) {
        this._url = url;
        this.load();
    }
    get url() {
        return this._url;
    }
    get onLoaded() {
        if (!this.onLoaded$) {
            this.onLoaded$ = new EventEmitter();
        }
        return this.onLoaded$;
    }
    get onProgress() {
        if (!this.onProgress$) {
            this.onProgress$ = new EventEmitter();
        }
        return this.onProgress$;
    }
    constructor(host, zone) {
        this.host = host;
        this.zone = zone;
        this.initialized = false;
        this.animationLoop = inject(ThAnimationLoopService);
        this.proxy = createLazyObject3DProxy();
        host.objRef = this.proxy;
    }
    ngOnInit() {
        this.initialized = true;
        this.load();
        // this.zone.runOutsideAngular(() => );
    }
    async load() {
        if (!this.initialized) {
            return;
        }
        if (this._url === undefined) {
            throw new Error('missing url');
        }
        if (!this.proxy) {
            return;
        }
        const url = this._url;
        const onProgress = isObserved(this.onProgress$)
            ? (progress) => {
                this.zone.run(() => {
                    this.onProgress$?.next(progress);
                });
            }
            : undefined;
        const result = await this.zone.runOutsideAngular(() => this.service.load(url, onProgress));
        this.animationLoop.requestAnimationFrame();
        this.proxy.objRef = this.getRefFromResponse(result);
        // add the new object to the parent and
        // emit a loaded event directly on the three.js object and on objRef$
        this.host.objRef = this.proxy;
        if (this.onLoaded$ && result !== undefined) {
            this.zone.run(() => this.onLoaded$?.next(result));
        }
    }
}
ThAsyncLoaderBaseDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThAsyncLoaderBaseDirective, deps: "invalid", target: i0.ɵɵFactoryTarget.Directive });
ThAsyncLoaderBaseDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.1.1", type: ThAsyncLoaderBaseDirective, inputs: { url: "url" }, outputs: { onLoaded: "onLoaded", onProgress: "onProgress" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThAsyncLoaderBaseDirective, decorators: [{
            type: Directive,
            args: [{}]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Host
                }] }, { type: i0.NgZone }]; }, propDecorators: { url: [{
                type: Input
            }], onLoaded: [{
                type: Output
            }], onProgress: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,