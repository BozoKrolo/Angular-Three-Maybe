import { Directive, EventEmitter, Host, Input, Output } from '@angular/core';
import { isObserved } from '../util';
import { ThLoader } from './ThLoaderBase';
import * as i0 from "@angular/core";
export class ThCallbackLoaderService extends ThLoader {
    load(...args) {
        const loader = this.createLoaderInstance();
        return loader.load(...args);
    }
}
export class ThCallbackLoaderBasePipe {
    transform(...args) {
        return this.service.load(...args);
    }
}
export class ThCallbackLoaderBaseDirective {
    set url(url) {
        this._url = url;
        this.load();
    }
    get url() {
        return this._url;
    }
    get onLoaded() {
        if (!this.onLoaded$) {
            this.onLoaded$ = new EventEmitter();
        }
        return this.onLoaded$;
    }
    get onProgress() {
        if (!this.onProgress$) {
            this.onProgress$ = new EventEmitter();
        }
        return this.onProgress$;
    }
    constructor(host, zone) {
        this.host = host;
        this.zone = zone;
        this.initialized = false;
    }
    ngOnInit() {
        this.initialized = true;
        this.load();
        // this.zone.runOutsideAngular(() => );
    }
    async load() {
        if (!this.initialized) {
            return;
        }
        if (this._url === undefined) {
            throw new Error('missing url');
        }
        const url = this._url;
        const onProgress = isObserved(this.onProgress$)
            ? (progress) => {
                this.onProgress$?.next(progress);
            }
            : undefined;
        const onLoad = isObserved(this.onLoaded$)
            ? (...args) => {
                this.onLoaded$?.next(args[0]);
            }
            : undefined;
        this.host.objRef = this.zone.runOutsideAngular(() => this.service.load(url, onProgress, onLoad));
    }
}
ThCallbackLoaderBaseDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThCallbackLoaderBaseDirective, deps: "invalid", target: i0.ɵɵFactoryTarget.Directive });
ThCallbackLoaderBaseDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.1.1", type: ThCallbackLoaderBaseDirective, inputs: { url: "url" }, outputs: { onLoaded: "onLoaded", onProgress: "onProgress" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThCallbackLoaderBaseDirective, decorators: [{
            type: Directive,
            args: [{}]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Host
                }] }, { type: i0.NgZone }]; }, propDecorators: { url: [{
                type: Input
            }], onLoaded: [{
                type: Output
            }], onProgress: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGhDYWxsYmFja0xvYWRlckJhc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtdGhyZWUvc3JjL2xpYi9sb2FkZXJzL1RoQ2FsbGJhY2tMb2FkZXJCYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQWtCLE1BQU0sRUFBdUIsTUFBTSxlQUFlLENBQUM7QUFFbEgsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNyQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0FBVzFDLE1BQU0sT0FBZ0IsdUJBQWtELFNBQVEsUUFBVztJQUNsRixJQUFJLENBQUMsR0FBRyxJQUEyQjtRQUN4QyxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztRQUMzQyxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBSSxJQUEyQyxDQUFDLENBQUM7SUFDdEUsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFnQix3QkFBd0I7SUFHckMsU0FBUyxDQUFDLEdBQUcsSUFBMkI7UUFDN0MsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQ3BDLENBQUM7Q0FDRjtBQUdELE1BQU0sT0FBZ0IsNkJBQTZCO0lBU2pELElBQ0ksR0FBRyxDQUFDLEdBQXlDO1FBQy9DLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO1FBQ2hCLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFFRCxJQUFJLEdBQUc7UUFDTCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDbkIsQ0FBQztJQUVELElBQWMsUUFBUTtRQUNwQixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNuQixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7U0FDckM7UUFDRCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDeEIsQ0FBQztJQUVELElBQWMsVUFBVTtRQUN0QixJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNyQixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7U0FDdkM7UUFDRCxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDMUIsQ0FBQztJQUVELFlBQThCLElBQXFCLEVBQVksSUFBWTtRQUE3QyxTQUFJLEdBQUosSUFBSSxDQUFpQjtRQUFZLFNBQUksR0FBSixJQUFJLENBQVE7UUE5Qm5FLGdCQUFXLEdBQUcsS0FBSyxDQUFDO0lBOEJrRCxDQUFDO0lBRS9FLFFBQVE7UUFDTixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztRQUN4QixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDWix1Q0FBdUM7SUFDekMsQ0FBQztJQUVTLEtBQUssQ0FBQyxJQUFJO1FBQ2xCLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3JCLE9BQU87U0FDUjtRQUVELElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxTQUFTLEVBQUU7WUFDM0IsTUFBTSxJQUFJLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUNoQztRQUVELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFFdEIsTUFBTSxVQUFVLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7WUFDN0MsQ0FBQyxDQUFDLENBQUMsUUFBb0MsRUFBRSxFQUFFO2dCQUN2QyxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNuQyxDQUFDO1lBQ0gsQ0FBQyxDQUFDLFNBQVMsQ0FBQztRQUVkLE1BQU0sTUFBTSxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQ3ZDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBUyxFQUFFLEVBQUU7Z0JBQ2YsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDaEMsQ0FBQztZQUNILENBQUMsQ0FBQyxTQUFTLENBQUM7UUFFZCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxDQUNqRCxJQUFJLENBQUMsT0FBbUQsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLFVBQVUsRUFBRSxNQUFNLENBQUMsQ0FDeEYsQ0FBQztJQUNKLENBQUM7OzBIQW5FbUIsNkJBQTZCOzhHQUE3Qiw2QkFBNkI7MkZBQTdCLDZCQUE2QjtrQkFEbEQsU0FBUzttQkFBQyxFQUFFOzswQkFrQ0UsSUFBSTtpRUF2QmIsR0FBRztzQkFETixLQUFLO2dCQVVRLFFBQVE7c0JBQXJCLE1BQU07Z0JBT08sVUFBVTtzQkFBdkIsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRXZlbnRFbWl0dGVyLCBIb3N0LCBJbnB1dCwgTmdab25lLCBPbkluaXQsIE91dHB1dCwgUGlwZVRyYW5zZm9ybSwgVHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTG9hZGVyIH0gZnJvbSAndGhyZWUnO1xuaW1wb3J0IHsgaXNPYnNlcnZlZCB9IGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IHsgVGhMb2FkZXIgfSBmcm9tICcuL1RoTG9hZGVyQmFzZSc7XG5cbmludGVyZmFjZSBDYWxsQmFja0xvYWRlciBleHRlbmRzIExvYWRlciB7XG4gIGxvYWQoXG4gICAgdXJsOiBzdHJpbmcgfCBzdHJpbmdbXSxcbiAgICBvbkxvYWQ/OiAoLi4uYXJnczogYW55KSA9PiB2b2lkLFxuICAgIG9uUHJvZ3Jlc3M/OiAoZXZlbnQ6IFByb2dyZXNzRXZlbnQpID0+IHZvaWQsXG4gICAgb25FcnJvcj86IChldmVudDogRXJyb3JFdmVudCkgPT4gdm9pZFxuICApOiBhbnk7XG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBUaENhbGxiYWNrTG9hZGVyU2VydmljZTxUIGV4dGVuZHMgQ2FsbEJhY2tMb2FkZXI+IGV4dGVuZHMgVGhMb2FkZXI8VD4ge1xuICBwdWJsaWMgbG9hZCguLi5hcmdzOiBQYXJhbWV0ZXJzPFRbJ2xvYWQnXT4pOiBSZXR1cm5UeXBlPFRbJ2xvYWQnXT4ge1xuICAgIGNvbnN0IGxvYWRlciA9IHRoaXMuY3JlYXRlTG9hZGVySW5zdGFuY2UoKTtcbiAgICByZXR1cm4gbG9hZGVyLmxvYWQoLi4uKGFyZ3MgYXMgUGFyYW1ldGVyczxDYWxsQmFja0xvYWRlclsnbG9hZCddPikpO1xuICB9XG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBUaENhbGxiYWNrTG9hZGVyQmFzZVBpcGU8VCBleHRlbmRzIENhbGxCYWNrTG9hZGVyPiBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICBwcm90ZWN0ZWQgYWJzdHJhY3Qgc2VydmljZTogVGhDYWxsYmFja0xvYWRlclNlcnZpY2U8VD47XG5cbiAgcHVibGljIHRyYW5zZm9ybSguLi5hcmdzOiBQYXJhbWV0ZXJzPFRbJ2xvYWQnXT4pIHtcbiAgICByZXR1cm4gdGhpcy5zZXJ2aWNlLmxvYWQoLi4uYXJncyk7XG4gIH1cbn1cblxuQERpcmVjdGl2ZSh7fSlcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBUaENhbGxiYWNrTG9hZGVyQmFzZURpcmVjdGl2ZTxUIGV4dGVuZHMgQ2FsbEJhY2tMb2FkZXI+IGltcGxlbWVudHMgT25Jbml0IHtcbiAgcHJvdGVjdGVkIGFic3RyYWN0IHNlcnZpY2U6IFRoQ2FsbGJhY2tMb2FkZXJTZXJ2aWNlPFQ+O1xuXG4gIHByaXZhdGUgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgcHJpdmF0ZSBfdXJsPzogUGFyYW1ldGVyczxUWydsb2FkJ10+WzBdO1xuXG4gIHByb3RlY3RlZCBvbkxvYWRlZCQ/OiBFdmVudEVtaXR0ZXI8UmV0dXJuVHlwZTxUWydsb2FkJ10+PjtcbiAgcHJvdGVjdGVkIG9uUHJvZ3Jlc3MkPzogRXZlbnRFbWl0dGVyPFByb2dyZXNzRXZlbnQ+O1xuXG4gIEBJbnB1dCgpXG4gIHNldCB1cmwodXJsOiBQYXJhbWV0ZXJzPFRbJ2xvYWQnXT5bMF0gfCB1bmRlZmluZWQpIHtcbiAgICB0aGlzLl91cmwgPSB1cmw7XG4gICAgdGhpcy5sb2FkKCk7XG4gIH1cblxuICBnZXQgdXJsKCkge1xuICAgIHJldHVybiB0aGlzLl91cmw7XG4gIH1cblxuICBAT3V0cHV0KCkgZ2V0IG9uTG9hZGVkKCkge1xuICAgIGlmICghdGhpcy5vbkxvYWRlZCQpIHtcbiAgICAgIHRoaXMub25Mb2FkZWQkID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5vbkxvYWRlZCQ7XG4gIH1cblxuICBAT3V0cHV0KCkgZ2V0IG9uUHJvZ3Jlc3MoKSB7XG4gICAgaWYgKCF0aGlzLm9uUHJvZ3Jlc3MkKSB7XG4gICAgICB0aGlzLm9uUHJvZ3Jlc3MkID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5vblByb2dyZXNzJDtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKEBIb3N0KCkgcHJvdGVjdGVkIGhvc3Q6IHsgb2JqUmVmOiBhbnkgfSwgcHJvdGVjdGVkIHpvbmU6IE5nWm9uZSkge31cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICB0aGlzLmxvYWQoKTtcbiAgICAvLyB0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4gKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBhc3luYyBsb2FkKCkge1xuICAgIGlmICghdGhpcy5pbml0aWFsaXplZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl91cmwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdtaXNzaW5nIHVybCcpO1xuICAgIH1cblxuICAgIGNvbnN0IHVybCA9IHRoaXMuX3VybDtcblxuICAgIGNvbnN0IG9uUHJvZ3Jlc3MgPSBpc09ic2VydmVkKHRoaXMub25Qcm9ncmVzcyQpXG4gICAgICA/IChwcm9ncmVzczogUHJvZ3Jlc3NFdmVudDxFdmVudFRhcmdldD4pID0+IHtcbiAgICAgICAgICB0aGlzLm9uUHJvZ3Jlc3MkPy5uZXh0KHByb2dyZXNzKTtcbiAgICAgICAgfVxuICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICBjb25zdCBvbkxvYWQgPSBpc09ic2VydmVkKHRoaXMub25Mb2FkZWQkKVxuICAgICAgPyAoLi4uYXJnczogYW55KSA9PiB7XG4gICAgICAgICAgdGhpcy5vbkxvYWRlZCQ/Lm5leHQoYXJnc1swXSk7XG4gICAgICAgIH1cbiAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgdGhpcy5ob3N0Lm9ialJlZiA9IHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PlxuICAgICAgKHRoaXMuc2VydmljZSBhcyBUaENhbGxiYWNrTG9hZGVyU2VydmljZTxDYWxsQmFja0xvYWRlcj4pLmxvYWQodXJsLCBvblByb2dyZXNzLCBvbkxvYWQpXG4gICAgKTtcbiAgfVxufVxuIl19