import { Directive, Host, Injectable, Pipe } from '@angular/core';
import { PLYLoader } from 'three/examples/jsm/loaders/PLYLoader';
import { ThAsyncLoaderBaseDirective, ThAsyncLoaderBasePipe, ThAsyncLoaderService } from './ThAsyncLoaderBase';
import { isObserved } from '../util';
import * as i0 from "@angular/core";
import * as i1 from "../generated";
export class PLYLoaderService extends ThAsyncLoaderService {
    constructor() {
        super(...arguments);
        this.clazz = PLYLoader;
    }
}
PLYLoaderService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: PLYLoaderService, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
PLYLoaderService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: PLYLoaderService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: PLYLoaderService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });
export class ThPLYLoaderPipe extends ThAsyncLoaderBasePipe {
    constructor(service) {
        super();
        this.service = service;
    }
}
ThPLYLoaderPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThPLYLoaderPipe, deps: [{ token: PLYLoaderService }], target: i0.ɵɵFactoryTarget.Pipe });
ThPLYLoaderPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.1.1", ngImport: i0, type: ThPLYLoaderPipe, name: "loadPLY" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThPLYLoaderPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'loadPLY',
                    pure: true
                }]
        }], ctorParameters: function () { return [{ type: PLYLoaderService }]; } });
export class ThPLYLoaderDirective extends ThAsyncLoaderBaseDirective {
    constructor(host, zone, service) {
        super(host, zone);
        this.host = host;
        this.zone = zone;
        this.service = service;
    }
    getRefFromResponse(response) {
        response.computeVertexNormals();
        return response;
    }
    async load() {
        if (!this.initialized) {
            return;
        }
        if (this._url === undefined) {
            throw new Error('missing url');
        }
        const url = this._url;
        const onProgress = isObserved(this.onProgress$)
            ? (progress) => {
                this.onProgress$?.next(progress);
            }
            : undefined;
        const result = await this.zone.runOutsideAngular(() => this.service.load(url, onProgress));
        // add the new object to the parent and
        // emit a loaded event directly on the three.js object and on objRef$
        this.host.objRef = this.getRefFromResponse(result);
        if (this.onLoaded$ && result !== undefined) {
            this.onLoaded$?.next(result);
        }
    }
}
ThPLYLoaderDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThPLYLoaderDirective, deps: [{ token: i1.ThBufferGeometry, host: true }, { token: i0.NgZone }, { token: PLYLoaderService }], target: i0.ɵɵFactoryTarget.Directive });
ThPLYLoaderDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.1.1", type: ThPLYLoaderDirective, selector: "[loadPLY]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThPLYLoaderDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[loadPLY]'
                }]
        }], ctorParameters: function () { return [{ type: i1.ThBufferGeometry, decorators: [{
                    type: Host
                }] }, { type: i0.NgZone }, { type: PLYLoaderService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGhQTFlMb2FkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtdGhyZWUvc3JjL2xpYi9sb2FkZXJzL1RoUExZTG9hZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBVSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBR3pGLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUNqRSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUscUJBQXFCLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUc5RyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sU0FBUyxDQUFDOzs7QUFLckMsTUFBTSxPQUFPLGdCQUFpQixTQUFRLG9CQUErQjtJQUhyRTs7UUFJUyxVQUFLLEdBQUcsU0FBUyxDQUFDO0tBQzFCOzs2R0FGWSxnQkFBZ0I7aUhBQWhCLGdCQUFnQixjQUZmLE1BQU07MkZBRVAsZ0JBQWdCO2tCQUg1QixVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7QUFTRCxNQUFNLE9BQU8sZUFBZ0IsU0FBUSxxQkFBZ0M7SUFDbkUsWUFBc0IsT0FBeUI7UUFDN0MsS0FBSyxFQUFFLENBQUM7UUFEWSxZQUFPLEdBQVAsT0FBTyxDQUFrQjtJQUUvQyxDQUFDOzs0R0FIVSxlQUFlOzBHQUFmLGVBQWU7MkZBQWYsZUFBZTtrQkFKM0IsSUFBSTttQkFBQztvQkFDSixJQUFJLEVBQUUsU0FBUztvQkFDZixJQUFJLEVBQUUsSUFBSTtpQkFDWDs7QUFVRCxNQUFNLE9BQU8sb0JBQXFCLFNBQVEsMEJBQXFDO0lBQzdFLFlBQThCLElBQXNCLEVBQVksSUFBWSxFQUFZLE9BQXlCO1FBQy9HLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFEVSxTQUFJLEdBQUosSUFBSSxDQUFrQjtRQUFZLFNBQUksR0FBSixJQUFJLENBQVE7UUFBWSxZQUFPLEdBQVAsT0FBTyxDQUFrQjtJQUVqSCxDQUFDO0lBRVMsa0JBQWtCLENBQUMsUUFBd0I7UUFDbkQsUUFBUSxDQUFDLG9CQUFvQixFQUFFLENBQUM7UUFDaEMsT0FBTyxRQUFRLENBQUM7SUFDbEIsQ0FBQztJQUVTLEtBQUssQ0FBQyxJQUFJO1FBQ2xCLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3JCLE9BQU87U0FDUjtRQUVELElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxTQUFTLEVBQUU7WUFDM0IsTUFBTSxJQUFJLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUNoQztRQUVELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFFdEIsTUFBTSxVQUFVLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7WUFDN0MsQ0FBQyxDQUFDLENBQUMsUUFBb0MsRUFBRSxFQUFFO2dCQUN2QyxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNuQyxDQUFDO1lBQ0gsQ0FBQyxDQUFDLFNBQVMsQ0FBQztRQUVkLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUUzRix1Q0FBdUM7UUFDdkMscUVBQXFFO1FBQ3JFLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVuRCxJQUFJLElBQUksQ0FBQyxTQUFTLElBQUksTUFBTSxLQUFLLFNBQVMsRUFBRTtZQUMxQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUM5QjtJQUNILENBQUM7O2lIQXBDVSxvQkFBb0I7cUdBQXBCLG9CQUFvQjsyRkFBcEIsb0JBQW9CO2tCQUhoQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxXQUFXO2lCQUN0Qjs7MEJBRWMsSUFBSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSG9zdCwgSW5qZWN0YWJsZSwgTmdab25lLCBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFRoT2JqZWN0M0QgfSBmcm9tICcuLi9nZW5lcmF0ZWQvVGhPYmplY3QzRCc7XG5pbXBvcnQgeyBQTFlMb2FkZXIgfSBmcm9tICd0aHJlZS9leGFtcGxlcy9qc20vbG9hZGVycy9QTFlMb2FkZXInO1xuaW1wb3J0IHsgVGhBc3luY0xvYWRlckJhc2VEaXJlY3RpdmUsIFRoQXN5bmNMb2FkZXJCYXNlUGlwZSwgVGhBc3luY0xvYWRlclNlcnZpY2UgfSBmcm9tICcuL1RoQXN5bmNMb2FkZXJCYXNlJztcbmltcG9ydCB7IEJ1ZmZlckdlb21ldHJ5IH0gZnJvbSAndGhyZWUnO1xuaW1wb3J0IHsgVGhCdWZmZXJHZW9tZXRyeSB9IGZyb20gJy4uL2dlbmVyYXRlZCc7XG5pbXBvcnQgeyBpc09ic2VydmVkIH0gZnJvbSAnLi4vdXRpbCc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFBMWUxvYWRlclNlcnZpY2UgZXh0ZW5kcyBUaEFzeW5jTG9hZGVyU2VydmljZTxQTFlMb2FkZXI+IHtcbiAgcHVibGljIGNsYXp6ID0gUExZTG9hZGVyO1xufVxuXG5AUGlwZSh7XG4gIG5hbWU6ICdsb2FkUExZJyxcbiAgcHVyZTogdHJ1ZVxufSlcbmV4cG9ydCBjbGFzcyBUaFBMWUxvYWRlclBpcGUgZXh0ZW5kcyBUaEFzeW5jTG9hZGVyQmFzZVBpcGU8UExZTG9hZGVyPiBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgc2VydmljZTogUExZTG9hZGVyU2VydmljZSkge1xuICAgIHN1cGVyKCk7XG4gIH1cbn1cblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2xvYWRQTFldJ1xufSlcbmV4cG9ydCBjbGFzcyBUaFBMWUxvYWRlckRpcmVjdGl2ZSBleHRlbmRzIFRoQXN5bmNMb2FkZXJCYXNlRGlyZWN0aXZlPFBMWUxvYWRlcj4ge1xuICBjb25zdHJ1Y3RvcihASG9zdCgpIHByb3RlY3RlZCBob3N0OiBUaEJ1ZmZlckdlb21ldHJ5LCBwcm90ZWN0ZWQgem9uZTogTmdab25lLCBwcm90ZWN0ZWQgc2VydmljZTogUExZTG9hZGVyU2VydmljZSkge1xuICAgIHN1cGVyKGhvc3QsIHpvbmUpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGdldFJlZkZyb21SZXNwb25zZShyZXNwb25zZTogQnVmZmVyR2VvbWV0cnkpIHtcbiAgICByZXNwb25zZS5jb21wdXRlVmVydGV4Tm9ybWFscygpO1xuICAgIHJldHVybiByZXNwb25zZTtcbiAgfVxuXG4gIHByb3RlY3RlZCBhc3luYyBsb2FkKCkge1xuICAgIGlmICghdGhpcy5pbml0aWFsaXplZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl91cmwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdtaXNzaW5nIHVybCcpO1xuICAgIH1cblxuICAgIGNvbnN0IHVybCA9IHRoaXMuX3VybDtcblxuICAgIGNvbnN0IG9uUHJvZ3Jlc3MgPSBpc09ic2VydmVkKHRoaXMub25Qcm9ncmVzcyQpXG4gICAgICA/IChwcm9ncmVzczogUHJvZ3Jlc3NFdmVudDxFdmVudFRhcmdldD4pID0+IHtcbiAgICAgICAgICB0aGlzLm9uUHJvZ3Jlc3MkPy5uZXh0KHByb2dyZXNzKTtcbiAgICAgICAgfVxuICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4gdGhpcy5zZXJ2aWNlLmxvYWQodXJsLCBvblByb2dyZXNzKSk7XG5cbiAgICAvLyBhZGQgdGhlIG5ldyBvYmplY3QgdG8gdGhlIHBhcmVudCBhbmRcbiAgICAvLyBlbWl0IGEgbG9hZGVkIGV2ZW50IGRpcmVjdGx5IG9uIHRoZSB0aHJlZS5qcyBvYmplY3QgYW5kIG9uIG9ialJlZiRcbiAgICB0aGlzLmhvc3Qub2JqUmVmID0gdGhpcy5nZXRSZWZGcm9tUmVzcG9uc2UocmVzdWx0KTtcblxuICAgIGlmICh0aGlzLm9uTG9hZGVkJCAmJiByZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5vbkxvYWRlZCQ/Lm5leHQocmVzdWx0KTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==