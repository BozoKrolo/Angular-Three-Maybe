/**
 * The following code is ported from pmndrs/drei and adapted to work with Angular and ngx-three
 * Many thanks to pmndrs/drei at its contributors!
 */
import { ChangeDetectionStrategy, Component, EventEmitter, inject, Input, Output, SkipSelf, ViewChild } from '@angular/core';
import { OrthographicCamera, PerspectiveCamera, Vector3 } from 'three';
import { RAYCASTER } from '../../events/raycaster.service';
import { ThGroup } from '../../generated';
import * as i0 from "@angular/core";
import * as i1 from "../../ThView";
import * as i2 from "../../ThCanvas";
import * as i3 from "../../generated";
import * as i4 from "@angular/common";
import * as i5 from "../../renderer/th-render.directive";
const v1 = new Vector3();
const v2 = new Vector3();
const v3 = new Vector3();
function defaultCalculatePosition(el, camera, size) {
    const objectPos = v1.setFromMatrixPosition(el.matrixWorld);
    objectPos.project(camera);
    const widthHalf = size.width / 2;
    const heightHalf = size.height / 2;
    return [objectPos.x * widthHalf + widthHalf, -(objectPos.y * heightHalf) + heightHalf];
}
function isObjectBehindCamera(el, camera) {
    const objectPos = v1.setFromMatrixPosition(el.matrixWorld);
    const cameraPos = v2.setFromMatrixPosition(camera.matrixWorld);
    const deltaCamObj = objectPos.sub(cameraPos);
    const camDir = camera.getWorldDirection(v3);
    return deltaCamObj.angleTo(camDir) > Math.PI / 2;
}
function isObjectVisible(el, camera, raycaster, occlude) {
    const elPos = v1.setFromMatrixPosition(el.matrixWorld);
    const screenPos = elPos.clone();
    screenPos.project(camera);
    raycaster.setFromCamera(screenPos, camera);
    const intersects = raycaster.intersectObjects(occlude, true);
    if (intersects.length) {
        const intersectionDistance = intersects[0].distance;
        const pointDistance = elPos.distanceTo(raycaster.ray.origin);
        return pointDistance < intersectionDistance;
    }
    return true;
}
function objectScale(el, camera) {
    if (camera instanceof OrthographicCamera) {
        return camera.zoom;
    }
    else if (camera instanceof PerspectiveCamera) {
        const objectPos = v1.setFromMatrixPosition(el.matrixWorld);
        const cameraPos = v2.setFromMatrixPosition(camera.matrixWorld);
        const vFOV = (camera.fov * Math.PI) / 180;
        const dist = objectPos.distanceTo(cameraPos);
        const scaleFOV = 2 * Math.tan(vFOV / 2) * dist;
        return 1 / scaleFOV;
    }
    else {
        return 1;
    }
}
function objectZIndex(el, camera, zIndexRange) {
    if (camera instanceof PerspectiveCamera || camera instanceof OrthographicCamera) {
        const objectPos = v1.setFromMatrixPosition(el.matrixWorld);
        const cameraPos = v2.setFromMatrixPosition(camera.matrixWorld);
        const dist = objectPos.distanceTo(cameraPos);
        const A = (zIndexRange[1] - zIndexRange[0]) / (camera.far - camera.near);
        const B = zIndexRange[1] - A * camera.far;
        return Math.round(A * dist + B);
    }
    return undefined;
}
const epsilon = (value) => (Math.abs(value) < 1e-10 ? 0 : value);
function getCSSMatrix(matrix, multipliers, prepend = '') {
    let matrix3d = 'matrix3d(';
    for (let i = 0; i !== 16; i++) {
        matrix3d += epsilon(multipliers[i] * matrix.elements[i]) + (i !== 15 ? ',' : ')');
    }
    return prepend + matrix3d;
}
const getCameraCSSMatrix = ((multipliers) => (matrix) => getCSSMatrix(matrix, multipliers))([1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1]);
const getObjectCSSMatrix = ((scaleMultipliers) => (matrix, factor) => getCSSMatrix(matrix, scaleMultipliers(factor), 'translate(-50%,-50%)'))((f) => [1 / f, 1 / f, 1 / f, 1, -1 / f, -1 / f, -1 / f, -1, 1 / f, 1 / f, 1 / f, 1, 1, 1, 1, 1]);
/**
 * A port of the pmndrs/drei Html component
 *
 * Add Html content to any three.js object3d node
 */
export class HtmlComponent extends ThGroup {
    constructor(view, canvas, parent) {
        super(parent);
        this.view = view;
        this.canvas = canvas;
        this.prepend = false; // Project content behind the canvas (default: false)
        this.center = false; // Adds a -50%/-50% css transform (default: false) [ignored in transform mode]
        this.fullscreen = false; // Aligns to the upper-left corner, fills the screen (default:false) [ignored in transform mode]
        this.eps = 0.001;
        this.sprite = false; // Renders as sprite, but only in transform mode (default=false)
        this.transform = false; // If true, applies matrix3d transformations (default=false)
        this.zIndexRange = [16777271, 0]; // Z-order range (default=[16777271, 0])
        this.onOcclude = new EventEmitter();
        /**
         * Override default positioning function. [ignored in transform mode]
         */
        this.calculatePosition = defaultCalculatePosition;
        this.as = 'div'; // Wrapping element (default: 'div')
        this.pointerEvents = 'auto';
        this.transformInnerStyles = this.computeInnerStyles();
        this.styles = null;
        this.oldZoom = 0;
        this.oldPosition = [0, 0];
        this.notOccluded = true;
        this.raycaster = inject(RAYCASTER);
    }
    ngOnInit() {
        super.ngOnInit();
        this.styles = this.computeStyles();
    }
    ngAfterViewInit() {
        this.el = document.createElement(this.as);
        this.frameSubscription = this.view.onRender.subscribe(() => this.onFrame());
        if (this.transformOuterRef) {
            this.el.appendChild(this.transformOuterRef.nativeElement);
        }
        if (this.el && !this.target) {
            this.appendElement(this.el);
        }
    }
    onResize() {
        this.styles = this.computeStyles();
    }
    ngOnChanges(changes) {
        super.ngOnChanges(changes);
        /*
        if(this.el) {
          if(changes.portal || changes.transform) {
            this.appendElement(this.el);
          }
    
          if(changes.wrapperClass) {
            this.el.className = changes.wrapperClass.currentValue ?? '';
          }
    
          if(changes.pointerEvents) {
            this.transformInnerStyles = this.computeInnerStyles();
          }
        }
        */
    }
    appendElement(el) {
        if (!this.el || !this.objRef || !this.canvas.rendererCanvas || !this.view.camera) {
            return;
        }
        this.target = this.portal ?? this.canvas.rendererCanvas?.nativeElement.parentElement;
        this.view.scene?.objRef?.updateMatrixWorld();
        if (this.transform) {
            el.style.cssText = 'position:absolute;top:0;left:0;pointer-events:none;overflow:hidden;';
        }
        else {
            const vec = this.calculatePosition(this.objRef, this.view.camera.objRef, this.getSize());
            el.style.cssText = `position:absolute;top:0;left:0;transform:translate3d(${vec[0]}px,${vec[1]}px,0);transform-origin:0 0;`;
        }
        if (this.target) {
            if (this.prepend) {
                this.target.prepend(el);
            }
            else {
                this.target.appendChild(el);
            }
        }
    }
    onFrame() {
        const camera = this.view.camera?.objRef;
        const scene = this.view.scene?.objRef;
        const group = this._objRef;
        const size = this.getSize();
        if (!camera || !group || !scene || !this.el) {
            return;
        }
        camera.updateMatrixWorld();
        group.updateWorldMatrix(true, false);
        const vec = this.transform ? this.oldPosition : this.calculatePosition(group, camera, size);
        if (this.transform ||
            Math.abs(this.oldZoom - camera.zoom) > this.eps ||
            Math.abs(this.oldPosition[0] - vec[0]) > this.eps ||
            Math.abs(this.oldPosition[1] - vec[1]) > this.eps) {
            const isBehindCamera = isObjectBehindCamera(group, camera);
            let raytraceTarget = false;
            if (typeof this.occlude === 'boolean') {
                if (this.occlude === true) {
                    raytraceTarget = [scene];
                }
            }
            else if (Array.isArray(this.occlude)) {
                raytraceTarget = this.occlude.map((item) => item.objRef ?? item);
            }
            const previouslyVisible = this.notOccluded;
            if (raytraceTarget) {
                this.notOccluded = !isBehindCamera && isObjectVisible(group, camera, this.raycaster, raytraceTarget);
            }
            else {
                this.notOccluded = !isBehindCamera;
            }
            if (previouslyVisible !== this.notOccluded) {
                if (this.onOcclude.length > 0) {
                    this.onOcclude.next(!this.notOccluded);
                }
                else {
                    this.el.style.display = this.notOccluded ? 'block' : 'none';
                }
            }
            this.el.style.zIndex = `${objectZIndex(group, camera, this.zIndexRange)}`;
            if (this.transform) {
                const [widthHalf, heightHalf] = [size.width / 2, size.height / 2];
                const fov = camera.projectionMatrix.elements[5] * heightHalf;
                const { isOrthographicCamera, top, left, bottom, right } = camera;
                const cameraMatrix = getCameraCSSMatrix(camera.matrixWorldInverse);
                const cameraTransform = isOrthographicCamera
                    ? `scale(${fov})translate(${epsilon(-(right + left) / 2)}px,${epsilon((top + bottom) / 2)}px)`
                    : `translateZ(${fov}px)`;
                let matrix = group.matrixWorld;
                if (this.sprite) {
                    matrix = camera.matrixWorldInverse.clone().transpose().copyPosition(matrix).scale(group.scale);
                    matrix.elements[3] = matrix.elements[7] = matrix.elements[11] = 0;
                    matrix.elements[15] = 1;
                }
                this.el.style.width = size.width + 'px';
                this.el.style.height = size.height + 'px';
                this.el.style.perspective = isOrthographicCamera ? '' : `${fov}px`;
                if (this.transformOuterRef && this.transformInnerRef) {
                    // eslint-disable-next-line max-len
                    this.transformOuterRef.nativeElement.style.transform = `${cameraTransform}${cameraMatrix}translate(${widthHalf}px,${heightHalf}px)`;
                    this.transformInnerRef.nativeElement.style.transform = getObjectCSSMatrix(matrix, 1 / ((this.distanceFactor || 10) / 400));
                }
            }
            else {
                const scale = this.distanceFactor === undefined ? 1 : objectScale(group, camera) * this.distanceFactor;
                this.el.style.transform = `translate3d(${vec[0]}px,${vec[1]}px,0) scale(${scale})`;
            }
            this.oldPosition = vec;
            this.oldZoom = camera.zoom;
        }
    }
    ngOnDestroy() {
        this.el?.remove();
        this.frameSubscription?.unsubscribe();
    }
    computeStyles() {
        const size = this.getSize();
        if (this.transform) {
            return {
                position: 'absolute',
                top: 0,
                left: 0,
                width: size.width + 'px',
                height: size.height + 'px',
                transformStyle: 'preserve-3d',
                pointerEvents: 'none'
            };
        }
        else {
            return {
                position: 'absolute',
                transform: this.center ? 'translate3d(-50%,-50%,0)' : 'none',
                ...(this.fullscreen && {
                    top: -size.height / 2 + 'px',
                    left: -size.width / 2 + 'px',
                    width: size.width + 'px',
                    height: size.height + 'px'
                }),
                ...this.style
            };
        }
    }
    computeInnerStyles() {
        return { position: 'absolute', pointerEvents: this.pointerEvents };
    }
    getSize() {
        return (this.view.viewPort ?? this.canvas.rendererCanvas?.nativeElement.getBoundingClientRect() ?? { width: 0, height: 0 });
    }
}
HtmlComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: HtmlComponent, deps: [{ token: i1.ThView }, { token: i2.ThCanvas }, { token: i3.ThObject3D, skipSelf: true }], target: i0.ɵɵFactoryTarget.Component });
HtmlComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.1", type: HtmlComponent, selector: "th-html", inputs: { prepend: "prepend", center: "center", fullscreen: "fullscreen", portal: "portal", distanceFactor: "distanceFactor", sprite: "sprite", transform: "transform", zIndexRange: "zIndexRange", style: "style", className: "className", occlude: "occlude", calculatePosition: "calculatePosition", as: "as", wrapperClass: "wrapperClass", pointerEvents: "pointerEvents" }, outputs: { onOcclude: "onOcclude" }, viewQueries: [{ propertyName: "transformOuterRef", first: true, predicate: ["outerRef"], descendants: true }, { propertyName: "transformInnerRef", first: true, predicate: ["innerRef"], descendants: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: "<div [ngStyle]=\"styles\" #outerRef *ngIf=\"transform;  else noTransform\" (onResize)=\"onResize()\">\n    <div #innerRef [ngStyle]=\"transformInnerStyles\" >\n        <div [style]=\"style\" [className]=\"className\">\n            <ng-container *ngTemplateOutlet=\"tempOutlet\" ></ng-container>\n        </div>\n    </div>\n</div>\n<ng-template #noTransform>\n    <div [ngStyle]=\"styles\" [className]=\"className\" #outerRef>\n        <ng-container *ngTemplateOutlet=\"tempOutlet\" ></ng-container>\n    </div>\n</ng-template>\n\n<ng-template #tempOutlet>\n    <ng-content></ng-content>\n</ng-template>\n", dependencies: [{ kind: "directive", type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i4.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "directive", type: i5.ThRenderDirective, selector: "[beforeRender], [onResize], [renderOnDemand]", inputs: ["renderOnDemand"], outputs: ["beforeRender", "onResize"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: HtmlComponent, decorators: [{
            type: Component,
            args: [{ selector: 'th-html', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div [ngStyle]=\"styles\" #outerRef *ngIf=\"transform;  else noTransform\" (onResize)=\"onResize()\">\n    <div #innerRef [ngStyle]=\"transformInnerStyles\" >\n        <div [style]=\"style\" [className]=\"className\">\n            <ng-container *ngTemplateOutlet=\"tempOutlet\" ></ng-container>\n        </div>\n    </div>\n</div>\n<ng-template #noTransform>\n    <div [ngStyle]=\"styles\" [className]=\"className\" #outerRef>\n        <ng-container *ngTemplateOutlet=\"tempOutlet\" ></ng-container>\n    </div>\n</ng-template>\n\n<ng-template #tempOutlet>\n    <ng-content></ng-content>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: i1.ThView }, { type: i2.ThCanvas }, { type: i3.ThObject3D, decorators: [{
                    type: SkipSelf
                }] }]; }, propDecorators: { prepend: [{
                type: Input
            }], center: [{
                type: Input
            }], fullscreen: [{
                type: Input
            }], portal: [{
                type: Input
            }], distanceFactor: [{
                type: Input
            }], sprite: [{
                type: Input
            }], transform: [{
                type: Input
            }], zIndexRange: [{
                type: Input
            }], style: [{
                type: Input
            }], className: [{
                type: Input
            }], occlude: [{
                type: Input
            }], onOcclude: [{
                type: Output
            }], calculatePosition: [{
                type: Input
            }], as: [{
                type: Input
            }], wrapperClass: [{
                type: Input
            }], pointerEvents: [{
                type: Input
            }], transformOuterRef: [{
                type: ViewChild,
                args: ['outerRef']
            }], transformInnerRef: [{
                type: ViewChild,
                args: ['innerRef']
            }] } });
//# sourceMappingURL=data:application/json;base64,