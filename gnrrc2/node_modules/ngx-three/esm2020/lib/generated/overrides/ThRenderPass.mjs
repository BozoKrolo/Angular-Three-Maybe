/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, forwardRef } from '@angular/core';
import { ThPassBase } from '../../ThPassBase';
import { ThRenderPassGen } from '../ThRenderPassGen';
import * as i0 from "@angular/core";
import * as i1 from "./ThEffectComposer";
import * as i2 from "../../ThView";
export class ThRenderPass extends ThRenderPassGen {
    constructor(effectComposer, view) {
        super(effectComposer);
        this.effectComposer = effectComposer;
        this.view = view;
    }
    createThreeInstance(args) {
        if (!args) {
            args = new Array(5);
        }
        args[0] = args[0] ?? this.view.scene;
        args[1] = args[1] ?? this.view.camera;
        args[2] = args[2] ?? this.overrideMaterial;
        args[3] = args[3] ?? this.clearColor;
        args[4] = args[4] ?? this.clearAlpha;
        return super.createThreeInstance(args);
    }
    ngAfterContentChecked() {
        if (!this._objRef) {
            return;
        }
        if (this.view.scene && this.view.scene.objRef) {
            this._objRef.scene = this.view.scene.objRef;
        }
        if (this.view.camera && this.view.camera.objRef) {
            this._objRef.camera = this.view.camera.objRef;
        }
    }
}
ThRenderPass.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThRenderPass, deps: [{ token: i1.ThEffectComposer }, { token: i2.ThView }], target: i0.ɵɵFactoryTarget.Component });
ThRenderPass.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.1", type: ThRenderPass, selector: "th-renderPass", providers: [{ provide: ThPassBase, useExisting: forwardRef(() => ThRenderPass) }], usesInheritance: true, ngImport: i0, template: '<ng-content/>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThRenderPass, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-renderPass',
                    template: '<ng-content/>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [{ provide: ThPassBase, useExisting: forwardRef(() => ThRenderPass) }]
                }]
        }], ctorParameters: function () { return [{ type: i1.ThEffectComposer }, { type: i2.ThView }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGhSZW5kZXJQYXNzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXRocmVlL3NyYy9saWIvZ2VuZXJhdGVkL292ZXJyaWRlcy9UaFJlbmRlclBhc3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEseURBQXlEO0FBQ3pELHlDQUF5QztBQUN6QyxxSUFBcUk7QUFDckksT0FBTyxFQUlMLHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsVUFBVSxFQUNYLE1BQU0sZUFBZSxDQUFDO0FBSXZCLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUc5QyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7Ozs7QUFTckQsTUFBTSxPQUFPLFlBVVgsU0FBUSxlQUF5QjtJQUdqQyxZQUFzQixjQUFnQyxFQUFVLElBQVk7UUFDMUUsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBREYsbUJBQWMsR0FBZCxjQUFjLENBQWtCO1FBQVUsU0FBSSxHQUFKLElBQUksQ0FBUTtJQUU1RSxDQUFDO0lBRU0sbUJBQW1CLENBQUMsSUFBWTtRQUNyQyxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ1QsSUFBSSxHQUFHLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBVSxDQUFDO1NBQzlCO1FBRUQsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUNyQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3RDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLGdCQUFnQixDQUFDO1FBQzNDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUNyQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUM7UUFFckMsT0FBTyxLQUFLLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVNLHFCQUFxQjtRQUMxQixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNqQixPQUFPO1NBQ1I7UUFFRCxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRTtZQUM3QyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUM7U0FDN0M7UUFFRCxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTtZQUMvQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7U0FDL0M7SUFDSCxDQUFDOzt5R0EzQ1UsWUFBWTs2RkFBWixZQUFZLHdDQUZaLENBQUMsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxpREFGdkUsZUFBZTsyRkFJZCxZQUFZO2tCQU54QixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxlQUFlO29CQUN6QixRQUFRLEVBQUUsZUFBZTtvQkFDekIsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07b0JBQy9DLFNBQVMsRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxhQUFhLENBQUMsRUFBRSxDQUFDO2lCQUNsRiIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZXJzY29yZS1kYW5nbGUgKi9cbi8qIGVzbGludC1kaXNhYmxlIEBhbmd1bGFyLWVzbGludC9jb21wb25lbnQtc2VsZWN0b3IsIEBhbmd1bGFyLWVzbGludC9jb21wb25lbnQtY2xhc3Mtc3VmZml4LCBqc2RvYy9uby10eXBlcywgaW1wb3J0L25vLWRlcHJlY2F0ZWQgKi9cbmltcG9ydCB7XG4gIEFmdGVyQ29udGVudENoZWNrZWQsXG4gIEFmdGVyVmlld0NoZWNrZWQsXG4gIEFmdGVyVmlld0luaXQsXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDb21wb25lbnQsXG4gIGZvcndhcmRSZWZcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDYW1lcmEsIENvbG9yLCBNYXRlcmlhbCwgU2NlbmUgfSBmcm9tICd0aHJlZSc7XG5pbXBvcnQgeyBSZW5kZXJQYXNzIH0gZnJvbSAndGhyZWUvZXhhbXBsZXMvanNtL3Bvc3Rwcm9jZXNzaW5nL1JlbmRlclBhc3MnO1xuaW1wb3J0IHsgRWZmZWN0Q29tcG9zZXIgfSBmcm9tICcuLi8uLi9nZW5lcmF0b3IvcGFzc190eXBlcyc7XG5pbXBvcnQgeyBUaFBhc3NCYXNlIH0gZnJvbSAnLi4vLi4vVGhQYXNzQmFzZSc7XG5pbXBvcnQgeyBUaFZpZXcgfSBmcm9tICcuLi8uLi9UaFZpZXcnO1xuaW1wb3J0IHsgVGhPYmplY3QzRCB9IGZyb20gJy4uL1RoT2JqZWN0M0QnO1xuaW1wb3J0IHsgVGhSZW5kZXJQYXNzR2VuIH0gZnJvbSAnLi4vVGhSZW5kZXJQYXNzR2VuJztcbmltcG9ydCB7IFRoRWZmZWN0Q29tcG9zZXIgfSBmcm9tICcuL1RoRWZmZWN0Q29tcG9zZXInO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd0aC1yZW5kZXJQYXNzJyxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudC8+JyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHByb3ZpZGVyczogW3sgcHJvdmlkZTogVGhQYXNzQmFzZSwgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gVGhSZW5kZXJQYXNzKSB9XVxufSlcbmV4cG9ydCBjbGFzcyBUaFJlbmRlclBhc3M8XG4gICAgVCBleHRlbmRzIFJlbmRlclBhc3MgPSBSZW5kZXJQYXNzLFxuICAgIFRBUkdTIGV4dGVuZHMgYW55W10gPSBbXG4gICAgICBzY2VuZTogU2NlbmUsXG4gICAgICBjYW1lcmE6IENhbWVyYSxcbiAgICAgIG92ZXJyaWRlTWF0ZXJpYWw/OiBNYXRlcmlhbCxcbiAgICAgIGNsZWFyQ29sb3I/OiBDb2xvcixcbiAgICAgIGNsZWFyQWxwaGE/OiBudW1iZXJcbiAgICBdXG4gID5cbiAgZXh0ZW5kcyBUaFJlbmRlclBhc3NHZW48VCwgVEFSR1M+XG4gIGltcGxlbWVudHMgQWZ0ZXJDb250ZW50Q2hlY2tlZFxue1xuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgZWZmZWN0Q29tcG9zZXI6IFRoRWZmZWN0Q29tcG9zZXIsIHByaXZhdGUgdmlldzogVGhWaWV3KSB7XG4gICAgc3VwZXIoZWZmZWN0Q29tcG9zZXIpO1xuICB9XG5cbiAgcHVibGljIGNyZWF0ZVRocmVlSW5zdGFuY2UoYXJncz86IFRBUkdTKTogUmVuZGVyUGFzcyB7XG4gICAgaWYgKCFhcmdzKSB7XG4gICAgICBhcmdzID0gbmV3IEFycmF5KDUpIGFzIFRBUkdTO1xuICAgIH1cblxuICAgIGFyZ3NbMF0gPSBhcmdzWzBdID8/IHRoaXMudmlldy5zY2VuZTtcbiAgICBhcmdzWzFdID0gYXJnc1sxXSA/PyB0aGlzLnZpZXcuY2FtZXJhO1xuICAgIGFyZ3NbMl0gPSBhcmdzWzJdID8/IHRoaXMub3ZlcnJpZGVNYXRlcmlhbDtcbiAgICBhcmdzWzNdID0gYXJnc1szXSA/PyB0aGlzLmNsZWFyQ29sb3I7XG4gICAgYXJnc1s0XSA9IGFyZ3NbNF0gPz8gdGhpcy5jbGVhckFscGhhO1xuXG4gICAgcmV0dXJuIHN1cGVyLmNyZWF0ZVRocmVlSW5zdGFuY2UoYXJncyk7XG4gIH1cblxuICBwdWJsaWMgbmdBZnRlckNvbnRlbnRDaGVja2VkKCkge1xuICAgIGlmICghdGhpcy5fb2JqUmVmKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudmlldy5zY2VuZSAmJiB0aGlzLnZpZXcuc2NlbmUub2JqUmVmKSB7XG4gICAgICB0aGlzLl9vYmpSZWYuc2NlbmUgPSB0aGlzLnZpZXcuc2NlbmUub2JqUmVmO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnZpZXcuY2FtZXJhICYmIHRoaXMudmlldy5jYW1lcmEub2JqUmVmKSB7XG4gICAgICB0aGlzLl9vYmpSZWYuY2FtZXJhID0gdGhpcy52aWV3LmNhbWVyYS5vYmpSZWY7XG4gICAgfVxuICB9XG59XG4iXX0=