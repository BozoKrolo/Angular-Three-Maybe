/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component } from '@angular/core';
import { Vector4, WebGLRenderTarget } from 'three';
import { ThEffectComposerGen } from '../ThEffectComposerGen';
import * as i0 from "@angular/core";
import * as i1 from "../../ThView";
import * as i2 from "../../ThEngine.service";
export class ThEffectComposer extends ThEffectComposerGen {
    constructor(view, engineService) {
        super();
        this.view = view;
        this.engineService = engineService;
    }
    createThreeInstance(args) {
        if (!args) {
            args = new Array(5);
        }
        args[0] = args[0] ?? this.engineService.renderer;
        args[1] = args[1] ?? this.initRenderTarget();
        return super.createThreeInstance(args);
    }
    initRenderTarget() {
        if (!this.view.viewPort) {
            return;
        }
        else {
            let width;
            let height;
            if (this.view.viewPort instanceof Vector4) {
                width = this.view.viewPort.z;
                height = this.view.viewPort?.width;
            }
            else {
                width = this.view.viewPort.width;
                height = this.view.viewPort.height;
            }
            return new WebGLRenderTarget(width, height);
        }
    }
    addToParent() {
        if (this._objRef) {
            this.view.effectComposer = this._objRef;
        }
    }
    removeFromParent() {
        this.view.effectComposer = undefined;
    }
}
ThEffectComposer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThEffectComposer, deps: [{ token: i1.ThView }, { token: i2.ThEngineService }], target: i0.ɵɵFactoryTarget.Component });
ThEffectComposer.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.1", type: ThEffectComposer, selector: "th-effectComposer", providers: [], usesInheritance: true, ngImport: i0, template: '<ng-content/>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThEffectComposer, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-effectComposer',
                    template: '<ng-content/>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: []
                }]
        }], ctorParameters: function () { return [{ type: i1.ThView }, { type: i2.ThEngineService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGhFZmZlY3RDb21wb3Nlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC10aHJlZS9zcmMvbGliL2dlbmVyYXRlZC9vdmVycmlkZXMvVGhFZmZlY3RDb21wb3Nlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx5REFBeUQ7QUFDekQseUNBQXlDO0FBQ3pDLHFJQUFxSTtBQUNySSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25FLE9BQU8sRUFBaUIsT0FBTyxFQUFpQixpQkFBaUIsRUFBRSxNQUFNLE9BQU8sQ0FBQztBQUlqRixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQzs7OztBQVE3RCxNQUFNLE9BQU8sZ0JBR1gsU0FBUSxtQkFBNkI7SUFDckMsWUFBc0IsSUFBWSxFQUFZLGFBQThCO1FBQzFFLEtBQUssRUFBRSxDQUFDO1FBRFksU0FBSSxHQUFKLElBQUksQ0FBUTtRQUFZLGtCQUFhLEdBQWIsYUFBYSxDQUFpQjtJQUU1RSxDQUFDO0lBRU0sbUJBQW1CLENBQUMsSUFBWTtRQUNyQyxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ1QsSUFBSSxHQUFHLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBVSxDQUFDO1NBQzlCO1FBRUQsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQztRQUNqRCxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBRTdDLE9BQU8sS0FBSyxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFTyxnQkFBZ0I7UUFDdEIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ3ZCLE9BQU87U0FDUjthQUFNO1lBQ0wsSUFBSSxLQUFhLENBQUM7WUFDbEIsSUFBSSxNQUFjLENBQUM7WUFDbkIsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsWUFBWSxPQUFPLEVBQUU7Z0JBQ3pDLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7Z0JBQzdCLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUM7YUFDcEM7aUJBQU07Z0JBQ0wsS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQztnQkFDakMsTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQzthQUNwQztZQUNELE9BQU8sSUFBSSxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDN0M7SUFDSCxDQUFDO0lBRU0sV0FBVztRQUNoQixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztTQUN6QztJQUNILENBQUM7SUFFTSxnQkFBZ0I7UUFDckIsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLEdBQUcsU0FBUyxDQUFDO0lBQ3ZDLENBQUM7OzZHQTVDVSxnQkFBZ0I7aUdBQWhCLGdCQUFnQiw0Q0FGaEIsRUFBRSxpREFGSCxlQUFlOzJGQUlkLGdCQUFnQjtrQkFONUIsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsbUJBQW1CO29CQUM3QixRQUFRLEVBQUUsZUFBZTtvQkFDekIsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07b0JBQy9DLFNBQVMsRUFBRSxFQUFFO2lCQUNkIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlcnNjb3JlLWRhbmdsZSAqL1xuLyogZXNsaW50LWRpc2FibGUgQGFuZ3VsYXItZXNsaW50L2NvbXBvbmVudC1zZWxlY3RvciwgQGFuZ3VsYXItZXNsaW50L2NvbXBvbmVudC1jbGFzcy1zdWZmaXgsIGpzZG9jL25vLXR5cGVzLCBpbXBvcnQvbm8tZGVwcmVjYXRlZCAqL1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVW5pZm9ybXNVdGlscywgVmVjdG9yNCwgV2ViR0xSZW5kZXJlciwgV2ViR0xSZW5kZXJUYXJnZXQgfSBmcm9tICd0aHJlZSc7XG5pbXBvcnQgeyBFZmZlY3RDb21wb3NlciB9IGZyb20gJ3RocmVlL2V4YW1wbGVzL2pzbS9wb3N0cHJvY2Vzc2luZy9FZmZlY3RDb21wb3Nlcic7XG5pbXBvcnQgeyBUaEVuZ2luZVNlcnZpY2UgfSBmcm9tICcuLi8uLi9UaEVuZ2luZS5zZXJ2aWNlJztcbmltcG9ydCB7IFRoVmlldyB9IGZyb20gJy4uLy4uL1RoVmlldyc7XG5pbXBvcnQgeyBUaEVmZmVjdENvbXBvc2VyR2VuIH0gZnJvbSAnLi4vVGhFZmZlY3RDb21wb3Nlckdlbic7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3RoLWVmZmVjdENvbXBvc2VyJyxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudC8+JyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHByb3ZpZGVyczogW11cbn0pXG5leHBvcnQgY2xhc3MgVGhFZmZlY3RDb21wb3NlcjxcbiAgVCBleHRlbmRzIEVmZmVjdENvbXBvc2VyID0gRWZmZWN0Q29tcG9zZXIsXG4gIFRBUkdTIGV4dGVuZHMgYW55W10gPSBbcmVuZGVyZXI6IFdlYkdMUmVuZGVyZXIsIHJlbmRlclRhcmdldD86IFdlYkdMUmVuZGVyVGFyZ2V0XVxuPiBleHRlbmRzIFRoRWZmZWN0Q29tcG9zZXJHZW48VCwgVEFSR1M+IHtcbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIHZpZXc6IFRoVmlldywgcHJvdGVjdGVkIGVuZ2luZVNlcnZpY2U6IFRoRW5naW5lU2VydmljZSkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBwdWJsaWMgY3JlYXRlVGhyZWVJbnN0YW5jZShhcmdzPzogVEFSR1MpOiBFZmZlY3RDb21wb3NlciB7XG4gICAgaWYgKCFhcmdzKSB7XG4gICAgICBhcmdzID0gbmV3IEFycmF5KDUpIGFzIFRBUkdTO1xuICAgIH1cblxuICAgIGFyZ3NbMF0gPSBhcmdzWzBdID8/IHRoaXMuZW5naW5lU2VydmljZS5yZW5kZXJlcjtcbiAgICBhcmdzWzFdID0gYXJnc1sxXSA/PyB0aGlzLmluaXRSZW5kZXJUYXJnZXQoKTtcblxuICAgIHJldHVybiBzdXBlci5jcmVhdGVUaHJlZUluc3RhbmNlKGFyZ3MpO1xuICB9XG5cbiAgcHJpdmF0ZSBpbml0UmVuZGVyVGFyZ2V0KCkge1xuICAgIGlmICghdGhpcy52aWV3LnZpZXdQb3J0KSB7XG4gICAgICByZXR1cm47XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCB3aWR0aDogbnVtYmVyO1xuICAgICAgbGV0IGhlaWdodDogbnVtYmVyO1xuICAgICAgaWYgKHRoaXMudmlldy52aWV3UG9ydCBpbnN0YW5jZW9mIFZlY3RvcjQpIHtcbiAgICAgICAgd2lkdGggPSB0aGlzLnZpZXcudmlld1BvcnQuejtcbiAgICAgICAgaGVpZ2h0ID0gdGhpcy52aWV3LnZpZXdQb3J0Py53aWR0aDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpZHRoID0gdGhpcy52aWV3LnZpZXdQb3J0LndpZHRoO1xuICAgICAgICBoZWlnaHQgPSB0aGlzLnZpZXcudmlld1BvcnQuaGVpZ2h0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBXZWJHTFJlbmRlclRhcmdldCh3aWR0aCwgaGVpZ2h0KTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgYWRkVG9QYXJlbnQoKSB7XG4gICAgaWYgKHRoaXMuX29ialJlZikge1xuICAgICAgdGhpcy52aWV3LmVmZmVjdENvbXBvc2VyID0gdGhpcy5fb2JqUmVmO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyByZW1vdmVGcm9tUGFyZW50KCkge1xuICAgIHRoaXMudmlldy5lZmZlY3RDb21wb3NlciA9IHVuZGVmaW5lZDtcbiAgfVxufVxuIl19