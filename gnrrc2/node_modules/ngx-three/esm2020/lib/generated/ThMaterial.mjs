/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, Input, SkipSelf } from '@angular/core';
import { Material } from 'three';
import { ThMaterialBase } from '../ThMaterialBase';
import * as i0 from "@angular/core";
import * as i1 from "./ThObject3D";
export class ThMaterial extends ThMaterialBase {
    getType() {
        return Material;
    }
    set alphaTest(value) {
        if (this._objRef) {
            this._objRef.alphaTest = value;
        }
    }
    // @ts-ignore
    get alphaTest() {
        return this._objRef?.alphaTest;
    }
    set alphaToCoverage(value) {
        if (this._objRef) {
            this._objRef.alphaToCoverage = value;
        }
    }
    // @ts-ignore
    get alphaToCoverage() {
        return this._objRef?.alphaToCoverage;
    }
    set blendDst(value) {
        if (this._objRef) {
            this._objRef.blendDst = value;
        }
    }
    // @ts-ignore
    get blendDst() {
        return this._objRef?.blendDst;
    }
    set blendDstAlpha(value) {
        if (this._objRef) {
            this._objRef.blendDstAlpha = value;
        }
    }
    // @ts-ignore
    get blendDstAlpha() {
        return this._objRef?.blendDstAlpha;
    }
    set blendEquation(value) {
        if (this._objRef) {
            this._objRef.blendEquation = value;
        }
    }
    // @ts-ignore
    get blendEquation() {
        return this._objRef?.blendEquation;
    }
    set blendEquationAlpha(value) {
        if (this._objRef) {
            this._objRef.blendEquationAlpha = value;
        }
    }
    // @ts-ignore
    get blendEquationAlpha() {
        return this._objRef?.blendEquationAlpha;
    }
    set blending(value) {
        if (this._objRef) {
            this._objRef.blending = value;
        }
    }
    // @ts-ignore
    get blending() {
        return this._objRef?.blending;
    }
    set blendSrc(value) {
        if (this._objRef) {
            this._objRef.blendSrc = value;
        }
    }
    // @ts-ignore
    get blendSrc() {
        return this._objRef?.blendSrc;
    }
    set blendSrcAlpha(value) {
        if (this._objRef) {
            this._objRef.blendSrcAlpha = value;
        }
    }
    // @ts-ignore
    get blendSrcAlpha() {
        return this._objRef?.blendSrcAlpha;
    }
    set clipIntersection(value) {
        if (this._objRef) {
            this._objRef.clipIntersection = value;
        }
    }
    // @ts-ignore
    get clipIntersection() {
        return this._objRef?.clipIntersection;
    }
    set clippingPlanes(value) {
        if (this._objRef) {
            this._objRef.clippingPlanes = value;
        }
    }
    // @ts-ignore
    get clippingPlanes() {
        return this._objRef?.clippingPlanes;
    }
    set clipShadows(value) {
        if (this._objRef) {
            this._objRef.clipShadows = value;
        }
    }
    // @ts-ignore
    get clipShadows() {
        return this._objRef?.clipShadows;
    }
    set colorWrite(value) {
        if (this._objRef) {
            this._objRef.colorWrite = value;
        }
    }
    // @ts-ignore
    get colorWrite() {
        return this._objRef?.colorWrite;
    }
    set defines(value) {
        if (this._objRef) {
            this._objRef.defines = value;
        }
    }
    // @ts-ignore
    get defines() {
        return this._objRef?.defines;
    }
    set depthFunc(value) {
        if (this._objRef) {
            this._objRef.depthFunc = value;
        }
    }
    // @ts-ignore
    get depthFunc() {
        return this._objRef?.depthFunc;
    }
    set depthTest(value) {
        if (this._objRef) {
            this._objRef.depthTest = value;
        }
    }
    // @ts-ignore
    get depthTest() {
        return this._objRef?.depthTest;
    }
    set depthWrite(value) {
        if (this._objRef) {
            this._objRef.depthWrite = value;
        }
    }
    // @ts-ignore
    get depthWrite() {
        return this._objRef?.depthWrite;
    }
    set id(value) {
        if (this._objRef) {
            this._objRef.id = value;
        }
    }
    // @ts-ignore
    get id() {
        return this._objRef?.id;
    }
    set stencilWrite(value) {
        if (this._objRef) {
            this._objRef.stencilWrite = value;
        }
    }
    // @ts-ignore
    get stencilWrite() {
        return this._objRef?.stencilWrite;
    }
    set stencilFunc(value) {
        if (this._objRef) {
            this._objRef.stencilFunc = value;
        }
    }
    // @ts-ignore
    get stencilFunc() {
        return this._objRef?.stencilFunc;
    }
    set stencilRef(value) {
        if (this._objRef) {
            this._objRef.stencilRef = value;
        }
    }
    // @ts-ignore
    get stencilRef() {
        return this._objRef?.stencilRef;
    }
    set stencilWriteMask(value) {
        if (this._objRef) {
            this._objRef.stencilWriteMask = value;
        }
    }
    // @ts-ignore
    get stencilWriteMask() {
        return this._objRef?.stencilWriteMask;
    }
    set stencilFuncMask(value) {
        if (this._objRef) {
            this._objRef.stencilFuncMask = value;
        }
    }
    // @ts-ignore
    get stencilFuncMask() {
        return this._objRef?.stencilFuncMask;
    }
    set stencilFail(value) {
        if (this._objRef) {
            this._objRef.stencilFail = value;
        }
    }
    // @ts-ignore
    get stencilFail() {
        return this._objRef?.stencilFail;
    }
    set stencilZFail(value) {
        if (this._objRef) {
            this._objRef.stencilZFail = value;
        }
    }
    // @ts-ignore
    get stencilZFail() {
        return this._objRef?.stencilZFail;
    }
    set stencilZPass(value) {
        if (this._objRef) {
            this._objRef.stencilZPass = value;
        }
    }
    // @ts-ignore
    get stencilZPass() {
        return this._objRef?.stencilZPass;
    }
    // @ts-ignore
    get isMaterial() {
        return this._objRef?.isMaterial;
    }
    set name(value) {
        if (this._objRef) {
            this._objRef.name = value;
        }
    }
    // @ts-ignore
    get name() {
        return this._objRef?.name;
    }
    set needsUpdate(value) {
        if (this._objRef) {
            this._objRef.needsUpdate = value;
        }
    }
    // @ts-ignore
    get needsUpdate() {
        return this._objRef?.needsUpdate;
    }
    set opacity(value) {
        if (this._objRef) {
            this._objRef.opacity = value;
        }
    }
    // @ts-ignore
    get opacity() {
        return this._objRef?.opacity;
    }
    set polygonOffset(value) {
        if (this._objRef) {
            this._objRef.polygonOffset = value;
        }
    }
    // @ts-ignore
    get polygonOffset() {
        return this._objRef?.polygonOffset;
    }
    set polygonOffsetFactor(value) {
        if (this._objRef) {
            this._objRef.polygonOffsetFactor = value;
        }
    }
    // @ts-ignore
    get polygonOffsetFactor() {
        return this._objRef?.polygonOffsetFactor;
    }
    set polygonOffsetUnits(value) {
        if (this._objRef) {
            this._objRef.polygonOffsetUnits = value;
        }
    }
    // @ts-ignore
    get polygonOffsetUnits() {
        return this._objRef?.polygonOffsetUnits;
    }
    set precision(value) {
        if (this._objRef) {
            this._objRef.precision = value;
        }
    }
    // @ts-ignore
    get precision() {
        return this._objRef?.precision;
    }
    set premultipliedAlpha(value) {
        if (this._objRef) {
            this._objRef.premultipliedAlpha = value;
        }
    }
    // @ts-ignore
    get premultipliedAlpha() {
        return this._objRef?.premultipliedAlpha;
    }
    set forceSinglePass(value) {
        if (this._objRef) {
            this._objRef.forceSinglePass = value;
        }
    }
    // @ts-ignore
    get forceSinglePass() {
        return this._objRef?.forceSinglePass;
    }
    set dithering(value) {
        if (this._objRef) {
            this._objRef.dithering = value;
        }
    }
    // @ts-ignore
    get dithering() {
        return this._objRef?.dithering;
    }
    set side(value) {
        if (this._objRef) {
            this._objRef.side = value;
        }
    }
    // @ts-ignore
    get side() {
        return this._objRef?.side;
    }
    set shadowSide(value) {
        if (this._objRef) {
            this._objRef.shadowSide = value;
        }
    }
    // @ts-ignore
    get shadowSide() {
        return this._objRef?.shadowSide;
    }
    set toneMapped(value) {
        if (this._objRef) {
            this._objRef.toneMapped = value;
        }
    }
    // @ts-ignore
    get toneMapped() {
        return this._objRef?.toneMapped;
    }
    set transparent(value) {
        if (this._objRef) {
            this._objRef.transparent = value;
        }
    }
    // @ts-ignore
    get transparent() {
        return this._objRef?.transparent;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    // @ts-ignore
    get type() {
        return this._objRef?.type;
    }
    set uuid(value) {
        if (this._objRef) {
            this._objRef.uuid = value;
        }
    }
    // @ts-ignore
    get uuid() {
        return this._objRef?.uuid;
    }
    set vertexColors(value) {
        if (this._objRef) {
            this._objRef.vertexColors = value;
        }
    }
    // @ts-ignore
    get vertexColors() {
        return this._objRef?.vertexColors;
    }
    set visible(value) {
        if (this._objRef) {
            this._objRef.visible = value;
        }
    }
    // @ts-ignore
    get visible() {
        return this._objRef?.visible;
    }
    set userData(value) {
        if (this._objRef) {
            this._objRef.userData = value;
        }
    }
    // @ts-ignore
    get userData() {
        return this._objRef?.userData;
    }
    set version(value) {
        if (this._objRef) {
            this._objRef.version = value;
        }
    }
    // @ts-ignore
    get version() {
        return this._objRef?.version;
    }
    constructor(hostObject) {
        super(hostObject);
    }
}
ThMaterial.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThMaterial, deps: [{ token: i1.ThObject3D, skipSelf: true }], target: i0.ɵɵFactoryTarget.Component });
ThMaterial.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.1", type: ThMaterial, selector: "th-material", inputs: { alphaTest: "alphaTest", alphaToCoverage: "alphaToCoverage", blendDst: "blendDst", blendDstAlpha: "blendDstAlpha", blendEquation: "blendEquation", blendEquationAlpha: "blendEquationAlpha", blending: "blending", blendSrc: "blendSrc", blendSrcAlpha: "blendSrcAlpha", clipIntersection: "clipIntersection", clippingPlanes: "clippingPlanes", clipShadows: "clipShadows", colorWrite: "colorWrite", defines: "defines", depthFunc: "depthFunc", depthTest: "depthTest", depthWrite: "depthWrite", id: "id", stencilWrite: "stencilWrite", stencilFunc: "stencilFunc", stencilRef: "stencilRef", stencilWriteMask: "stencilWriteMask", stencilFuncMask: "stencilFuncMask", stencilFail: "stencilFail", stencilZFail: "stencilZFail", stencilZPass: "stencilZPass", name: "name", needsUpdate: "needsUpdate", opacity: "opacity", polygonOffset: "polygonOffset", polygonOffsetFactor: "polygonOffsetFactor", polygonOffsetUnits: "polygonOffsetUnits", precision: "precision", premultipliedAlpha: "premultipliedAlpha", forceSinglePass: "forceSinglePass", dithering: "dithering", side: "side", shadowSide: "shadowSide", toneMapped: "toneMapped", transparent: "transparent", type: "type", uuid: "uuid", vertexColors: "vertexColors", visible: "visible", userData: "userData", version: "version" }, providers: [], usesInheritance: true, ngImport: i0, template: '<ng-content/>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThMaterial, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-material',
                    template: '<ng-content/>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: []
                }]
        }], ctorParameters: function () { return [{ type: i1.ThObject3D, decorators: [{
                    type: SkipSelf
                }] }]; }, propDecorators: { alphaTest: [{
                type: Input
            }], alphaToCoverage: [{
                type: Input
            }], blendDst: [{
                type: Input
            }], blendDstAlpha: [{
                type: Input
            }], blendEquation: [{
                type: Input
            }], blendEquationAlpha: [{
                type: Input
            }], blending: [{
                type: Input
            }], blendSrc: [{
                type: Input
            }], blendSrcAlpha: [{
                type: Input
            }], clipIntersection: [{
                type: Input
            }], clippingPlanes: [{
                type: Input
            }], clipShadows: [{
                type: Input
            }], colorWrite: [{
                type: Input
            }], defines: [{
                type: Input
            }], depthFunc: [{
                type: Input
            }], depthTest: [{
                type: Input
            }], depthWrite: [{
                type: Input
            }], id: [{
                type: Input
            }], stencilWrite: [{
                type: Input
            }], stencilFunc: [{
                type: Input
            }], stencilRef: [{
                type: Input
            }], stencilWriteMask: [{
                type: Input
            }], stencilFuncMask: [{
                type: Input
            }], stencilFail: [{
                type: Input
            }], stencilZFail: [{
                type: Input
            }], stencilZPass: [{
                type: Input
            }], name: [{
                type: Input
            }], needsUpdate: [{
                type: Input
            }], opacity: [{
                type: Input
            }], polygonOffset: [{
                type: Input
            }], polygonOffsetFactor: [{
                type: Input
            }], polygonOffsetUnits: [{
                type: Input
            }], precision: [{
                type: Input
            }], premultipliedAlpha: [{
                type: Input
            }], forceSinglePass: [{
                type: Input
            }], dithering: [{
                type: Input
            }], side: [{
                type: Input
            }], shadowSide: [{
                type: Input
            }], toneMapped: [{
                type: Input
            }], transparent: [{
                type: Input
            }], type: [{
                type: Input
            }], uuid: [{
                type: Input
            }], vertexColors: [{
                type: Input
            }], visible: [{
                type: Input
            }], userData: [{
                type: Input
            }], version: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,