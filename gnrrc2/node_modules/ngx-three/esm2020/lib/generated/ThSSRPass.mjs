/* eslint-disable @typescript-eslint/ban-types */
/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, forwardRef, Input } from '@angular/core';
import { SSRPass } from 'three/examples/jsm/postprocessing/SSRPass';
import { ThPassBase } from '../ThPassBase';
import { applyValue } from '../util';
import { ThPass } from './ThPass';
import * as i0 from "@angular/core";
export class ThSSRPass extends ThPass {
    getType() {
        return SSRPass;
    }
    set width(value) {
        if (this._objRef) {
            this._objRef.width = value;
        }
    }
    // @ts-ignore
    get width() {
        return this._objRef?.width;
    }
    set height(value) {
        if (this._objRef) {
            this._objRef.height = value;
        }
    }
    // @ts-ignore
    get height() {
        return this._objRef?.height;
    }
    set clear(value) {
        if (this._objRef) {
            this._objRef.clear = value;
        }
    }
    // @ts-ignore
    get clear() {
        return this._objRef?.clear;
    }
    set renderer(value) {
        if (this._objRef) {
            this._objRef.renderer = value;
        }
    }
    // @ts-ignore
    get renderer() {
        return this._objRef?.renderer;
    }
    set scene(value) {
        if (this._objRef) {
            this._objRef.scene = value;
        }
    }
    // @ts-ignore
    get scene() {
        return this._objRef?.scene;
    }
    set camera(value) {
        if (this._objRef) {
            this._objRef.camera = value;
        }
    }
    // @ts-ignore
    get camera() {
        return this._objRef?.camera;
    }
    set groundReflector(value) {
        if (this._objRef) {
            this._objRef.groundReflector = value;
        }
    }
    // @ts-ignore
    get groundReflector() {
        return this._objRef?.groundReflector;
    }
    set opacity(value) {
        if (this._objRef) {
            this._objRef.opacity = value;
        }
    }
    // @ts-ignore
    get opacity() {
        return this._objRef?.opacity;
    }
    set output(value) {
        if (this._objRef) {
            this._objRef.output = value;
        }
    }
    // @ts-ignore
    get output() {
        return this._objRef?.output;
    }
    set maxDistance(value) {
        if (this._objRef) {
            this._objRef.maxDistance = value;
        }
    }
    // @ts-ignore
    get maxDistance() {
        return this._objRef?.maxDistance;
    }
    set thickness(value) {
        if (this._objRef) {
            this._objRef.thickness = value;
        }
    }
    // @ts-ignore
    get thickness() {
        return this._objRef?.thickness;
    }
    set tempColor(value) {
        if (this._objRef) {
            this._objRef.tempColor = applyValue(this._objRef.tempColor, value);
        }
    }
    // @ts-ignore
    get tempColor() {
        return this._objRef?.tempColor;
    }
    set selective(value) {
        if (this._objRef) {
            this._objRef.selective = value;
        }
    }
    // @ts-ignore
    get selective() {
        return this._objRef?.selective;
    }
    set blur(value) {
        if (this._objRef) {
            this._objRef.blur = value;
        }
    }
    // @ts-ignore
    get blur() {
        return this._objRef?.blur;
    }
    set thickTolerance(value) {
        if (this._objRef) {
            this._objRef.thickTolerance = value;
        }
    }
    // @ts-ignore
    get thickTolerance() {
        return this._objRef?.thickTolerance;
    }
    set beautyRenderTarget(value) {
        if (this._objRef) {
            this._objRef.beautyRenderTarget = value;
        }
    }
    // @ts-ignore
    get beautyRenderTarget() {
        return this._objRef?.beautyRenderTarget;
    }
    set prevRenderTarget(value) {
        if (this._objRef) {
            this._objRef.prevRenderTarget = value;
        }
    }
    // @ts-ignore
    get prevRenderTarget() {
        return this._objRef?.prevRenderTarget;
    }
    set normalRenderTarget(value) {
        if (this._objRef) {
            this._objRef.normalRenderTarget = value;
        }
    }
    // @ts-ignore
    get normalRenderTarget() {
        return this._objRef?.normalRenderTarget;
    }
    set metalnessRenderTarget(value) {
        if (this._objRef) {
            this._objRef.metalnessRenderTarget = value;
        }
    }
    // @ts-ignore
    get metalnessRenderTarget() {
        return this._objRef?.metalnessRenderTarget;
    }
    set ssrRenderTarget(value) {
        if (this._objRef) {
            this._objRef.ssrRenderTarget = value;
        }
    }
    // @ts-ignore
    get ssrRenderTarget() {
        return this._objRef?.ssrRenderTarget;
    }
    set blurRenderTarget(value) {
        if (this._objRef) {
            this._objRef.blurRenderTarget = value;
        }
    }
    // @ts-ignore
    get blurRenderTarget() {
        return this._objRef?.blurRenderTarget;
    }
    set blurRenderTarget2(value) {
        if (this._objRef) {
            this._objRef.blurRenderTarget2 = value;
        }
    }
    // @ts-ignore
    get blurRenderTarget2() {
        return this._objRef?.blurRenderTarget2;
    }
    set ssrMaterial(value) {
        if (this._objRef) {
            this._objRef.ssrMaterial = value;
        }
    }
    // @ts-ignore
    get ssrMaterial() {
        return this._objRef?.ssrMaterial;
    }
    set normalMaterial(value) {
        if (this._objRef) {
            this._objRef.normalMaterial = value;
        }
    }
    // @ts-ignore
    get normalMaterial() {
        return this._objRef?.normalMaterial;
    }
    set metalnessOnMaterial(value) {
        if (this._objRef) {
            this._objRef.metalnessOnMaterial = value;
        }
    }
    // @ts-ignore
    get metalnessOnMaterial() {
        return this._objRef?.metalnessOnMaterial;
    }
    set metalnessOffMaterial(value) {
        if (this._objRef) {
            this._objRef.metalnessOffMaterial = value;
        }
    }
    // @ts-ignore
    get metalnessOffMaterial() {
        return this._objRef?.metalnessOffMaterial;
    }
    set blurMaterial(value) {
        if (this._objRef) {
            this._objRef.blurMaterial = value;
        }
    }
    // @ts-ignore
    get blurMaterial() {
        return this._objRef?.blurMaterial;
    }
    set blurMaterial2(value) {
        if (this._objRef) {
            this._objRef.blurMaterial2 = value;
        }
    }
    // @ts-ignore
    get blurMaterial2() {
        return this._objRef?.blurMaterial2;
    }
    set depthRenderMaterial(value) {
        if (this._objRef) {
            this._objRef.depthRenderMaterial = value;
        }
    }
    // @ts-ignore
    get depthRenderMaterial() {
        return this._objRef?.depthRenderMaterial;
    }
    set copyMaterial(value) {
        if (this._objRef) {
            this._objRef.copyMaterial = value;
        }
    }
    // @ts-ignore
    get copyMaterial() {
        return this._objRef?.copyMaterial;
    }
    set fsQuad(value) {
        if (this._objRef) {
            this._objRef.fsQuad = value;
        }
    }
    // @ts-ignore
    get fsQuad() {
        return this._objRef?.fsQuad;
    }
    set originalClearColor(value) {
        if (this._objRef) {
            this._objRef.originalClearColor = applyValue(this._objRef.originalClearColor, value);
        }
    }
    // @ts-ignore
    get originalClearColor() {
        return this._objRef?.originalClearColor;
    }
    set dispose(value) {
        if (this._objRef) {
            this._objRef.dispose = value;
        }
    }
    // @ts-ignore
    get dispose() {
        return this._objRef?.dispose;
    }
    set renderPass(value) {
        if (this._objRef) {
            this._objRef.renderPass = value;
        }
    }
    // @ts-ignore
    get renderPass() {
        return this._objRef?.renderPass;
    }
    set renderOverride(value) {
        if (this._objRef) {
            this._objRef.renderOverride = value;
        }
    }
    // @ts-ignore
    get renderOverride() {
        return this._objRef?.renderOverride;
    }
    set renderMetalness(value) {
        if (this._objRef) {
            this._objRef.renderMetalness = value;
        }
    }
    // @ts-ignore
    get renderMetalness() {
        return this._objRef?.renderMetalness;
    }
}
ThSSRPass.OUTPUT = SSRPass.OUTPUT;
ThSSRPass.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThSSRPass, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThSSRPass.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.1", type: ThSSRPass, selector: "th-sSRPass", inputs: { width: "width", height: "height", clear: "clear", renderer: "renderer", scene: "scene", camera: "camera", groundReflector: "groundReflector", opacity: "opacity", output: "output", maxDistance: "maxDistance", thickness: "thickness", tempColor: "tempColor", selective: "selective", blur: "blur", thickTolerance: "thickTolerance", beautyRenderTarget: "beautyRenderTarget", prevRenderTarget: "prevRenderTarget", normalRenderTarget: "normalRenderTarget", metalnessRenderTarget: "metalnessRenderTarget", ssrRenderTarget: "ssrRenderTarget", blurRenderTarget: "blurRenderTarget", blurRenderTarget2: "blurRenderTarget2", ssrMaterial: "ssrMaterial", normalMaterial: "normalMaterial", metalnessOnMaterial: "metalnessOnMaterial", metalnessOffMaterial: "metalnessOffMaterial", blurMaterial: "blurMaterial", blurMaterial2: "blurMaterial2", depthRenderMaterial: "depthRenderMaterial", copyMaterial: "copyMaterial", fsQuad: "fsQuad", originalClearColor: "originalClearColor", dispose: "dispose", renderPass: "renderPass", renderOverride: "renderOverride", renderMetalness: "renderMetalness" }, providers: [{ provide: ThPassBase, useExisting: forwardRef(() => ThSSRPass) }], usesInheritance: true, ngImport: i0, template: '<ng-content/>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThSSRPass, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-sSRPass',
                    template: '<ng-content/>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [{ provide: ThPassBase, useExisting: forwardRef(() => ThSSRPass) }]
                }]
        }], propDecorators: { width: [{
                type: Input
            }], height: [{
                type: Input
            }], clear: [{
                type: Input
            }], renderer: [{
                type: Input
            }], scene: [{
                type: Input
            }], camera: [{
                type: Input
            }], groundReflector: [{
                type: Input
            }], opacity: [{
                type: Input
            }], output: [{
                type: Input
            }], maxDistance: [{
                type: Input
            }], thickness: [{
                type: Input
            }], tempColor: [{
                type: Input
            }], selective: [{
                type: Input
            }], blur: [{
                type: Input
            }], thickTolerance: [{
                type: Input
            }], beautyRenderTarget: [{
                type: Input
            }], prevRenderTarget: [{
                type: Input
            }], normalRenderTarget: [{
                type: Input
            }], metalnessRenderTarget: [{
                type: Input
            }], ssrRenderTarget: [{
                type: Input
            }], blurRenderTarget: [{
                type: Input
            }], blurRenderTarget2: [{
                type: Input
            }], ssrMaterial: [{
                type: Input
            }], normalMaterial: [{
                type: Input
            }], metalnessOnMaterial: [{
                type: Input
            }], metalnessOffMaterial: [{
                type: Input
            }], blurMaterial: [{
                type: Input
            }], blurMaterial2: [{
                type: Input
            }], depthRenderMaterial: [{
                type: Input
            }], copyMaterial: [{
                type: Input
            }], fsQuad: [{
                type: Input
            }], originalClearColor: [{
                type: Input
            }], dispose: [{
                type: Input
            }], renderPass: [{
                type: Input
            }], renderOverride: [{
                type: Input
            }], renderMetalness: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,