/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, forwardRef, Input } from '@angular/core';
import { InstancedMesh } from 'three';
import { applyValue } from '../util';
import { ThMesh } from './ThMesh';
import { ThObject3D } from './ThObject3D';
import * as i0 from "@angular/core";
export class ThInstancedMesh extends ThMesh {
    getType() {
        return InstancedMesh;
    }
    // @ts-ignore
    get isInstancedMesh() {
        return this._objRef?.isInstancedMesh;
    }
    set boundingBox(value) {
        if (this._objRef) {
            this._objRef.boundingBox = applyValue(this._objRef.boundingBox, value);
        }
    }
    // @ts-ignore
    get boundingBox() {
        return this._objRef?.boundingBox;
    }
    set boundingSphere(value) {
        if (this._objRef) {
            this._objRef.boundingSphere = applyValue(this._objRef.boundingSphere, value);
        }
    }
    // @ts-ignore
    get boundingSphere() {
        return this._objRef?.boundingSphere;
    }
    set count(value) {
        if (this._objRef) {
            this._objRef.count = value;
        }
    }
    // @ts-ignore
    get count() {
        return this._objRef?.count;
    }
    set instanceColor(value) {
        if (this._objRef) {
            this._objRef.instanceColor = applyValue(this._objRef.instanceColor, value);
        }
    }
    // @ts-ignore
    get instanceColor() {
        return this._objRef?.instanceColor;
    }
    set instanceMatrix(value) {
        if (this._objRef) {
            this._objRef.instanceMatrix = applyValue(this._objRef.instanceMatrix, value);
        }
    }
    // @ts-ignore
    get instanceMatrix() {
        return this._objRef?.instanceMatrix;
    }
}
ThInstancedMesh.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThInstancedMesh, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThInstancedMesh.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.1", type: ThInstancedMesh, selector: "th-instancedMesh", inputs: { boundingBox: "boundingBox", boundingSphere: "boundingSphere", count: "count", instanceColor: "instanceColor", instanceMatrix: "instanceMatrix" }, providers: [{ provide: ThObject3D, useExisting: forwardRef(() => ThInstancedMesh) }], usesInheritance: true, ngImport: i0, template: '<ng-content/>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThInstancedMesh, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-instancedMesh',
                    template: '<ng-content/>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [{ provide: ThObject3D, useExisting: forwardRef(() => ThInstancedMesh) }]
                }]
        }], propDecorators: { boundingBox: [{
                type: Input
            }], boundingSphere: [{
                type: Input
            }], count: [{
                type: Input
            }], instanceColor: [{
                type: Input
            }], instanceMatrix: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGhJbnN0YW5jZWRNZXNoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXRocmVlL3NyYy9saWIvZ2VuZXJhdGVkL1RoSW5zdGFuY2VkTWVzaC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx5REFBeUQ7QUFDekQseUNBQXlDO0FBQ3pDLHFJQUFxSTtBQUNySSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQVEsTUFBTSxlQUFlLENBQUM7QUFDNUYsT0FBTyxFQUFrRCxhQUFhLEVBQTZCLE1BQU0sT0FBTyxDQUFDO0FBQ2pILE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDckMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUNsQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sY0FBYyxDQUFDOztBQVExQyxNQUFNLE9BQU8sZUFLWCxTQUFRLE1BQXNDO0lBQ3ZDLE9BQU87UUFDWixPQUFPLGFBQWEsQ0FBQztJQUN2QixDQUFDO0lBRUQsYUFBYTtJQUNiLElBQVcsZUFBZTtRQUN4QixPQUFPLElBQUksQ0FBQyxPQUFPLEVBQUUsZUFBZSxDQUFDO0lBQ3ZDLENBQUM7SUFDRCxJQUNXLFdBQVcsQ0FBQyxLQUFpRDtRQUN0RSxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEdBQUcsVUFBVSxDQUFjLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQ3JGO0lBQ0gsQ0FBQztJQUNELGFBQWE7SUFDYixJQUFXLFdBQVc7UUFDcEIsT0FBTyxJQUFJLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQztJQUNuQyxDQUFDO0lBQ0QsSUFDVyxjQUFjLENBQUMsS0FBd0Q7UUFDaEYsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxHQUFHLFVBQVUsQ0FBZ0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDN0Y7SUFDSCxDQUFDO0lBQ0QsYUFBYTtJQUNiLElBQVcsY0FBYztRQUN2QixPQUFPLElBQUksQ0FBQyxPQUFPLEVBQUUsY0FBYyxDQUFDO0lBQ3RDLENBQUM7SUFDRCxJQUNXLEtBQUssQ0FBQyxLQUFhO1FBQzVCLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7U0FDNUI7SUFDSCxDQUFDO0lBRUQsYUFBYTtJQUNiLElBQVcsS0FBSztRQUNkLE9BQU8sSUFBSSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUM7SUFDN0IsQ0FBQztJQUNELElBQ1csYUFBYSxDQUN0QixLQUFzRztRQUV0RyxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEdBQUcsVUFBVSxDQUFrQyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxLQUFLLENBQUMsQ0FBQztTQUM3RztJQUNILENBQUM7SUFDRCxhQUFhO0lBQ2IsSUFBVyxhQUFhO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLE9BQU8sRUFBRSxhQUFhLENBQUM7SUFDckMsQ0FBQztJQUNELElBQ1csY0FBYyxDQUN2QixLQUErRjtRQUUvRixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLEdBQUcsVUFBVSxDQUEyQixJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsRUFBRSxLQUFLLENBQUMsQ0FBQztTQUN4RztJQUNILENBQUM7SUFDRCxhQUFhO0lBQ2IsSUFBVyxjQUFjO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDLE9BQU8sRUFBRSxjQUFjLENBQUM7SUFDdEMsQ0FBQzs7NEdBcEVVLGVBQWU7Z0dBQWYsZUFBZSx1TUFGZixDQUFDLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsaURBRjFFLGVBQWU7MkZBSWQsZUFBZTtrQkFOM0IsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsa0JBQWtCO29CQUM1QixRQUFRLEVBQUUsZUFBZTtvQkFDekIsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07b0JBQy9DLFNBQVMsRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsQ0FBQyxFQUFFLENBQUM7aUJBQ3JGOzhCQWdCWSxXQUFXO3NCQURyQixLQUFLO2dCQVdLLGNBQWM7c0JBRHhCLEtBQUs7Z0JBV0ssS0FBSztzQkFEZixLQUFLO2dCQVlLLGFBQWE7c0JBRHZCLEtBQUs7Z0JBYUssY0FBYztzQkFEeEIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZXJzY29yZS1kYW5nbGUgKi9cbi8qIGVzbGludC1kaXNhYmxlIEBhbmd1bGFyLWVzbGludC9jb21wb25lbnQtc2VsZWN0b3IsIEBhbmd1bGFyLWVzbGludC9jb21wb25lbnQtY2xhc3Mtc3VmZml4LCBqc2RvYy9uby10eXBlcywgaW1wb3J0L25vLWRlcHJlY2F0ZWQgKi9cbmltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIGZvcndhcmRSZWYsIElucHV0LCBUeXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCb3gzLCBCdWZmZXJHZW9tZXRyeSwgSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlLCBJbnN0YW5jZWRNZXNoLCBNYXRlcmlhbCwgU3BoZXJlLCBWZWN0b3IzIH0gZnJvbSAndGhyZWUnO1xuaW1wb3J0IHsgYXBwbHlWYWx1ZSB9IGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IHsgVGhNZXNoIH0gZnJvbSAnLi9UaE1lc2gnO1xuaW1wb3J0IHsgVGhPYmplY3QzRCB9IGZyb20gJy4vVGhPYmplY3QzRCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3RoLWluc3RhbmNlZE1lc2gnLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50Lz4nLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgcHJvdmlkZXJzOiBbeyBwcm92aWRlOiBUaE9iamVjdDNELCB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBUaEluc3RhbmNlZE1lc2gpIH1dXG59KVxuZXhwb3J0IGNsYXNzIFRoSW5zdGFuY2VkTWVzaDxcbiAgVEdlb21ldHJ5IGV4dGVuZHMgQnVmZmVyR2VvbWV0cnkgPSBCdWZmZXJHZW9tZXRyeSxcbiAgVE1hdGVyaWFsIGV4dGVuZHMgTWF0ZXJpYWwgfCBNYXRlcmlhbFtdID0gTWF0ZXJpYWwgfCBNYXRlcmlhbFtdLFxuICBUIGV4dGVuZHMgSW5zdGFuY2VkTWVzaDxUR2VvbWV0cnksIFRNYXRlcmlhbD4gPSBJbnN0YW5jZWRNZXNoPFRHZW9tZXRyeSwgVE1hdGVyaWFsPixcbiAgVEFSR1MgPSBbZ2VvbWV0cnk6IFRHZW9tZXRyeSB8IHVuZGVmaW5lZCwgbWF0ZXJpYWw6IFRNYXRlcmlhbCB8IHVuZGVmaW5lZCwgY291bnQ6IG51bWJlcl1cbj4gZXh0ZW5kcyBUaE1lc2g8VEdlb21ldHJ5LCBUTWF0ZXJpYWwsIFQsIFRBUkdTPiB7XG4gIHB1YmxpYyBnZXRUeXBlKCk6IFR5cGU8SW5zdGFuY2VkTWVzaDxUR2VvbWV0cnksIFRNYXRlcmlhbD4+IHtcbiAgICByZXR1cm4gSW5zdGFuY2VkTWVzaDtcbiAgfVxuXG4gIC8vIEB0cy1pZ25vcmVcbiAgcHVibGljIGdldCBpc0luc3RhbmNlZE1lc2goKTogdHJ1ZSB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuX29ialJlZj8uaXNJbnN0YW5jZWRNZXNoO1xuICB9XG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBzZXQgYm91bmRpbmdCb3godmFsdWU6IEJveDMgfCBudWxsIHwgW21pbjogVmVjdG9yMywgbWF4OiBWZWN0b3IzXSkge1xuICAgIGlmICh0aGlzLl9vYmpSZWYpIHtcbiAgICAgIHRoaXMuX29ialJlZi5ib3VuZGluZ0JveCA9IGFwcGx5VmFsdWU8Qm94MyB8IG51bGw+KHRoaXMuX29ialJlZi5ib3VuZGluZ0JveCwgdmFsdWUpO1xuICAgIH1cbiAgfVxuICAvLyBAdHMtaWdub3JlXG4gIHB1YmxpYyBnZXQgYm91bmRpbmdCb3goKTogKEJveDMgfCBudWxsKSB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuX29ialJlZj8uYm91bmRpbmdCb3g7XG4gIH1cbiAgQElucHV0KClcbiAgcHVibGljIHNldCBib3VuZGluZ1NwaGVyZSh2YWx1ZTogU3BoZXJlIHwgbnVsbCB8IFtjZW50ZXI6IFZlY3RvcjMsIHJhZGl1czogbnVtYmVyXSkge1xuICAgIGlmICh0aGlzLl9vYmpSZWYpIHtcbiAgICAgIHRoaXMuX29ialJlZi5ib3VuZGluZ1NwaGVyZSA9IGFwcGx5VmFsdWU8U3BoZXJlIHwgbnVsbD4odGhpcy5fb2JqUmVmLmJvdW5kaW5nU3BoZXJlLCB2YWx1ZSk7XG4gICAgfVxuICB9XG4gIC8vIEB0cy1pZ25vcmVcbiAgcHVibGljIGdldCBib3VuZGluZ1NwaGVyZSgpOiAoU3BoZXJlIHwgbnVsbCkgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLl9vYmpSZWY/LmJvdW5kaW5nU3BoZXJlO1xuICB9XG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBzZXQgY291bnQodmFsdWU6IG51bWJlcikge1xuICAgIGlmICh0aGlzLl9vYmpSZWYpIHtcbiAgICAgIHRoaXMuX29ialJlZi5jb3VudCA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIC8vIEB0cy1pZ25vcmVcbiAgcHVibGljIGdldCBjb3VudCgpOiBudW1iZXIgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLl9vYmpSZWY/LmNvdW50O1xuICB9XG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBzZXQgaW5zdGFuY2VDb2xvcihcbiAgICB2YWx1ZTogSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlIHwgbnVsbCB8IFt2YWx1ZTogQXJyYXlMaWtlPG51bWJlcj4gfCBBcnJheUJ1ZmZlclZpZXcsIG9mZnNldD86IG51bWJlcl1cbiAgKSB7XG4gICAgaWYgKHRoaXMuX29ialJlZikge1xuICAgICAgdGhpcy5fb2JqUmVmLmluc3RhbmNlQ29sb3IgPSBhcHBseVZhbHVlPEluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSB8IG51bGw+KHRoaXMuX29ialJlZi5pbnN0YW5jZUNvbG9yLCB2YWx1ZSk7XG4gICAgfVxuICB9XG4gIC8vIEB0cy1pZ25vcmVcbiAgcHVibGljIGdldCBpbnN0YW5jZUNvbG9yKCk6IChJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUgfCBudWxsKSB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuX29ialJlZj8uaW5zdGFuY2VDb2xvcjtcbiAgfVxuICBASW5wdXQoKVxuICBwdWJsaWMgc2V0IGluc3RhbmNlTWF0cml4KFxuICAgIHZhbHVlOiBJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUgfCBbdmFsdWU6IEFycmF5TGlrZTxudW1iZXI+IHwgQXJyYXlCdWZmZXJWaWV3LCBvZmZzZXQ/OiBudW1iZXJdXG4gICkge1xuICAgIGlmICh0aGlzLl9vYmpSZWYpIHtcbiAgICAgIHRoaXMuX29ialJlZi5pbnN0YW5jZU1hdHJpeCA9IGFwcGx5VmFsdWU8SW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlPih0aGlzLl9vYmpSZWYuaW5zdGFuY2VNYXRyaXgsIHZhbHVlKTtcbiAgICB9XG4gIH1cbiAgLy8gQHRzLWlnbm9yZVxuICBwdWJsaWMgZ2V0IGluc3RhbmNlTWF0cml4KCk6IEluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuX29ialJlZj8uaW5zdGFuY2VNYXRyaXg7XG4gIH1cbn1cbiJdfQ==