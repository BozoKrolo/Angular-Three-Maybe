/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, forwardRef, Input } from '@angular/core';
import { SpotLight } from 'three';
import { applyValue } from '../util';
import { ThLight } from './ThLight';
import { ThObject3D } from './ThObject3D';
import * as i0 from "@angular/core";
export class ThSpotLight extends ThLight {
    getType() {
        return SpotLight;
    }
    // @ts-ignore
    get isSpotLight() {
        return this._objRef?.isSpotLight;
    }
    // @ts-ignore
    get type() {
        return this._objRef?.type;
    }
    set position(value) {
        if (this._objRef) {
            this._objRef.position = applyValue(this._objRef.position, value);
        }
    }
    // @ts-ignore
    get position() {
        return this._objRef?.position;
    }
    set target(value) {
        if (this._objRef) {
            this._objRef.target = value;
        }
    }
    // @ts-ignore
    get target() {
        return this._objRef?.target;
    }
    set castShadow(value) {
        if (this._objRef) {
            this._objRef.castShadow = value;
        }
    }
    // @ts-ignore
    get castShadow() {
        return this._objRef?.castShadow;
    }
    set intensity(value) {
        if (this._objRef) {
            this._objRef.intensity = value;
        }
    }
    // @ts-ignore
    get intensity() {
        return this._objRef?.intensity;
    }
    set distance(value) {
        if (this._objRef) {
            this._objRef.distance = value;
        }
    }
    // @ts-ignore
    get distance() {
        return this._objRef?.distance;
    }
    set angle(value) {
        if (this._objRef) {
            this._objRef.angle = value;
        }
    }
    // @ts-ignore
    get angle() {
        return this._objRef?.angle;
    }
    set decay(value) {
        if (this._objRef) {
            this._objRef.decay = value;
        }
    }
    // @ts-ignore
    get decay() {
        return this._objRef?.decay;
    }
    set shadow(value) {
        if (this._objRef) {
            this._objRef.shadow = value;
        }
    }
    // @ts-ignore
    get shadow() {
        return this._objRef?.shadow;
    }
    set power(value) {
        if (this._objRef) {
            this._objRef.power = value;
        }
    }
    // @ts-ignore
    get power() {
        return this._objRef?.power;
    }
    set penumbra(value) {
        if (this._objRef) {
            this._objRef.penumbra = value;
        }
    }
    // @ts-ignore
    get penumbra() {
        return this._objRef?.penumbra;
    }
    set map(value) {
        if (this._objRef) {
            this._objRef.map = value;
        }
    }
    // @ts-ignore
    get map() {
        return this._objRef?.map;
    }
}
ThSpotLight.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThSpotLight, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThSpotLight.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.1", type: ThSpotLight, selector: "th-spotLight", inputs: { position: "position", target: "target", castShadow: "castShadow", intensity: "intensity", distance: "distance", angle: "angle", decay: "decay", shadow: "shadow", power: "power", penumbra: "penumbra", map: "map" }, providers: [{ provide: ThObject3D, useExisting: forwardRef(() => ThSpotLight) }], usesInheritance: true, ngImport: i0, template: '<ng-content/>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThSpotLight, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-spotLight',
                    template: '<ng-content/>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [{ provide: ThObject3D, useExisting: forwardRef(() => ThSpotLight) }]
                }]
        }], propDecorators: { position: [{
                type: Input
            }], target: [{
                type: Input
            }], castShadow: [{
                type: Input
            }], intensity: [{
                type: Input
            }], distance: [{
                type: Input
            }], angle: [{
                type: Input
            }], decay: [{
                type: Input
            }], shadow: [{
                type: Input
            }], power: [{
                type: Input
            }], penumbra: [{
                type: Input
            }], map: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGhTcG90TGlnaHQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtdGhyZWUvc3JjL2xpYi9nZW5lcmF0ZWQvVGhTcG90TGlnaHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEseURBQXlEO0FBQ3pELHlDQUF5QztBQUN6QyxxSUFBcUk7QUFDckksT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFRLE1BQU0sZUFBZSxDQUFDO0FBQzVGLE9BQU8sRUFBaUMsU0FBUyxFQUFxQyxNQUFNLE9BQU8sQ0FBQztBQUNwRyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3JDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDcEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGNBQWMsQ0FBQzs7QUFRMUMsTUFBTSxPQUFPLFdBVVgsU0FBUSxPQUFrQztJQUNuQyxPQUFPO1FBQ1osT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztJQUVELGFBQWE7SUFDYixJQUFXLFdBQVc7UUFDcEIsT0FBTyxJQUFJLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQztJQUNuQyxDQUFDO0lBQ0QsYUFBYTtJQUNiLElBQVcsSUFBSTtRQUNiLE9BQU8sSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUM7SUFDNUIsQ0FBQztJQUNELElBQ1csUUFBUSxDQUFDLEtBQWtEO1FBQ3BFLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsR0FBRyxVQUFVLENBQVUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDM0U7SUFDSCxDQUFDO0lBQ0QsYUFBYTtJQUNiLElBQVcsUUFBUTtRQUNqQixPQUFPLElBQUksQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDO0lBQ2hDLENB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LE9BQU8sRUFBRTtZQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUM7U0FDMUI7SUFDSCxDQUFDO0lBRUQsYUFBYTtJQUNiLElBQVcsR0FBRztRQUNaLE9BQU8sSUFBSSxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUM7SUFDM0IsQ0FBQzs7d0dBOUlVLFdBQVc7NEZBQVgsV0FBVyx1UUFGWCxDQUFDLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsaURBRnRFLGVBQWU7MkZBSWQsV0FBVztrQkFOdkIsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsY0FBYztvQkFDeEIsUUFBUSxFQUFFLGVBQWU7b0JBQ3pCLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsWUFBWSxDQUFDLEVBQUUsQ0FBQztpQkFDakY7OEJBeUJZLFFBQVE7c0JBRGxCLEtBQUs7Z0JBV0ssTUFBTTtzQkFEaEIsS0FBSztnQkFZSyxVQUFVO3NCQURwQixLQUFLO2dCQVlLLFNBQVM7c0JBRG5CLEtBQUs7Z0JBWUssUUFBUTtzQkFEbEIsS0FBSztnQkFZSyxLQUFLO3NCQURmLEtBQUs7Z0JBWUssS0FBSztzQkFEZixLQUFLO2dCQVlLLE1BQU07c0JBRGhCLEtBQUs7Z0JBWUssS0FBSztzQkFEZixLQUFLO2dCQVlLLFFBQVE7c0JBRGxCLEtBQUs7Z0JBWUssR0FBRztzQkFEYixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlcnNjb3JlLWRhbmdsZSAqL1xuLyogZXNsaW50LWRpc2FibGUgQGFuZ3VsYXItZXNsaW50L2NvbXBvbmVudC1zZWxlY3RvciwgQGFuZ3VsYXItZXNsaW50L2NvbXBvbmVudC1jbGFzcy1zdWZmaXgsIGpzZG9jL25vLXR5cGVzLCBpbXBvcnQvbm8tZGVwcmVjYXRlZCAqL1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgZm9yd2FyZFJlZiwgSW5wdXQsIFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbG9yUmVwcmVzZW50YXRpb24sIE9iamVjdDNELCBTcG90TGlnaHQsIFNwb3RMaWdodFNoYWRvdywgVGV4dHVyZSwgVmVjdG9yMyB9IGZyb20gJ3RocmVlJztcbmltcG9ydCB7IGFwcGx5VmFsdWUgfSBmcm9tICcuLi91dGlsJztcbmltcG9ydCB7IFRoTGlnaHQgfSBmcm9tICcuL1RoTGlnaHQnO1xuaW1wb3J0IHsgVGhPYmplY3QzRCB9IGZyb20gJy4vVGhPYmplY3QzRCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3RoLXNwb3RMaWdodCcsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQvPicsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBwcm92aWRlcnM6IFt7IHByb3ZpZGU6IFRoT2JqZWN0M0QsIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IFRoU3BvdExpZ2h0KSB9XVxufSlcbmV4cG9ydCBjbGFzcyBUaFNwb3RMaWdodDxcbiAgVCBleHRlbmRzIFNwb3RMaWdodCA9IFNwb3RMaWdodCxcbiAgVEFSR1MgPSBbXG4gICAgY29sb3I/OiBDb2xvclJlcHJlc2VudGF0aW9uLFxuICAgIGludGVuc2l0eT86IG51bWJlcixcbiAgICBkaXN0YW5jZT86IG51bWJlcixcbiAgICBhbmdsZT86IG51bWJlcixcbiAgICBwZW51bWJyYT86IG51bWJlcixcbiAgICBkZWNheT86IG51bWJlclxuICBdXG4+IGV4dGVuZHMgVGhMaWdodDxTcG90TGlnaHRTaGFkb3csIFQsIFRBUkdTPiB7XG4gIHB1YmxpYyBnZXRUeXBlKCk6IFR5cGU8U3BvdExpZ2h0PiB7XG4gICAgcmV0dXJuIFNwb3RMaWdodDtcbiAgfVxuXG4gIC8vIEB0cy1pZ25vcmVcbiAgcHVibGljIGdldCBpc1Nwb3RMaWdodCgpOiB0cnVlIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5fb2JqUmVmPy5pc1Nwb3RMaWdodDtcbiAgfVxuICAvLyBAdHMtaWdub3JlXG4gIHB1YmxpYyBnZXQgdHlwZSgpOiAoc3RyaW5nIHwgJ1Nwb3RMaWdodCcpIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5fb2JqUmVmPy50eXBlO1xuICB9XG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBzZXQgcG9zaXRpb24odmFsdWU6IFZlY3RvcjMgfCBbeDogbnVtYmVyLCB5OiBudW1iZXIsIHo6IG51bWJlcl0pIHtcbiAgICBpZiAodGhpcy5fb2JqUmVmKSB7XG4gICAgICB0aGlzLl9vYmpSZWYucG9zaXRpb24gPSBhcHBseVZhbHVlPFZlY3RvcjM+KHRoaXMuX29ialJlZi5wb3NpdGlvbiwgdmFsdWUpO1xuICAgIH1cbiAgfVxuICAvLyBAdHMtaWdub3JlXG4gIHB1YmxpYyBnZXQgcG9zaXRpb24oKTogVmVjdG9yMyB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuX29ialJlZj8ucG9zaXRpb247XG4gIH1cbiAgQElucHV0KClcbiAgcHVibGljIHNldCB0YXJnZXQodmFsdWU6IE9iamVjdDNEKSB7XG4gICAgaWYgKHRoaXMuX29ialJlZikge1xuICAgICAgdGhpcy5fb2JqUmVmLnRhcmdldCA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIC8vIEB0cy1pZ25vcmVcbiAgcHVibGljIGdldCB0YXJnZXQoKTogT2JqZWN0M0QgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLl9vYmpSZWY/LnRhcmdldDtcbiAgfVxuICBASW5wdXQoKVxuICBwdWJsaWMgc2V0IGNhc3RTaGFkb3codmFsdWU6IGJvb2xlYW4pIHtcbiAgICBpZiAodGhpcy5fb2JqUmVmKSB7XG4gICAgICB0aGlzLl9vYmpSZWYuY2FzdFNoYWRvdyA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIC8vIEB0cy1pZ25vcmVcbiAgcHVibGljIGdldCBjYXN0U2hhZG93KCk6IGJvb2xlYW4gfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLl9vYmpSZWY/LmNhc3RTaGFkb3c7XG4gIH1cbiAgQElucHV0KClcbiAgcHVibGljIHNldCBpbnRlbnNpdHkodmFsdWU6IG51bWJlcikge1xuICAgIGlmICh0aGlzLl9vYmpSZWYpIHtcbiAgICAgIHRoaXMuX29ialJlZi5pbnRlbnNpdHkgPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICAvLyBAdHMtaWdub3JlXG4gIHB1YmxpYyBnZXQgaW50ZW5zaXR5KCk6IG51bWJlciB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuX29ialJlZj8uaW50ZW5zaXR5O1xuICB9XG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBzZXQgZGlzdGFuY2UodmFsdWU6IG51bWJlcikge1xuICAgIGlmICh0aGlzLl9vYmpSZWYpIHtcbiAgICAgIHRoaXMuX29ialJlZi5kaXN0YW5jZSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIC8vIEB0cy1pZ25vcmVcbiAgcHVibGljIGdldCBkaXN0YW5jZSgpOiBudW1iZXIgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLl9vYmpSZWY/LmRpc3RhbmNlO1xuICB9XG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBzZXQgYW5nbGUodmFsdWU6IG51bWJlcikge1xuICAgIGlmICh0aGlzLl9vYmpSZWYpIHtcbiAgICAgIHRoaXMuX29ialJlZi5hbmdsZSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIC8vIEB0cy1pZ25vcmVcbiAgcHVibGljIGdldCBhbmdsZSgpOiBudW1iZXIgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLl9vYmpSZWY/LmFuZ2xlO1xuICB9XG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBzZXQgZGVjYXkodmFsdWU6IG51bWJlcikge1xuICAgIGlmICh0aGlzLl9vYmpSZWYpIHtcbiAgICAgIHRoaXMuX29ialJlZi5kZWNheSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIC8vIEB0cy1pZ25vcmVcbiAgcHVibGljIGdldCBkZWNheSgpOiBudW1iZXIgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLl9vYmpSZWY/LmRlY2F5O1xuICB9XG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBzZXQgc2hhZG93KHZhbHVlOiBTcG90TGlnaHRTaGFkb3cpIHtcbiAgICBpZiAodGhpcy5fb2JqUmVmKSB7XG4gICAgICB0aGlzLl9vYmpSZWYuc2hhZG93ID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgLy8gQHRzLWlnbm9yZVxuICBwdWJsaWMgZ2V0IHNoYWRvdygpOiBTcG90TGlnaHRTaGFkb3cgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLl9vYmpSZWY/LnNoYWRvdztcbiAgfVxuICBASW5wdXQoKVxuICBwdWJsaWMgc2V0IHBvd2VyKHZhbHVlOiBudW1iZXIpIHtcbiAgICBpZiAodGhpcy5fb2JqUmVmKSB7XG4gICAgICB0aGlzLl9vYmpSZWYucG93ZXIgPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICAvLyBAdHMtaWdub3JlXG4gIHB1YmxpYyBnZXQgcG93ZXIoKTogbnVtYmVyIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5fb2JqUmVmPy5wb3dlcjtcbiAgfVxuICBASW5wdXQoKVxuICBwdWJsaWMgc2V0IHBlbnVtYnJhKHZhbHVlOiBudW1iZXIpIHtcbiAgICBpZiAodGhpcy5fb2JqUmVmKSB7XG4gICAgICB0aGlzLl9vYmpSZWYucGVudW1icmEgPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICAvLyBAdHMtaWdub3JlXG4gIHB1YmxpYyBnZXQgcGVudW1icmEoKTogbnVtYmVyIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5fb2JqUmVmPy5wZW51bWJyYTtcbiAgfVxuICBASW5wdXQoKVxuICBwdWJsaWMgc2V0IG1hcCh2YWx1ZTogVGV4dHVyZSB8IG51bGwpIHtcbiAgICBpZiAodGhpcy5fb2JqUmVmKSB7XG4gICAgICB0aGlzLl9vYmpSZWYubWFwID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgLy8gQHRzLWlnbm9yZVxuICBwdWJsaWMgZ2V0IG1hcCgpOiAoVGV4dHVyZSB8IG51bGwpIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5fb2JqUmVmPy5tYXA7XG4gIH1cbn1cbiJdfQ==