/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, forwardRef } from '@angular/core';
import { ConeGeometry } from 'three';
import { ThBufferGeometry } from './ThBufferGeometry';
import { ThCylinderGeometry } from './ThCylinderGeometry';
import * as i0 from "@angular/core";
export class ThConeGeometry extends ThCylinderGeometry {
    getType() {
        return ConeGeometry;
    }
    // @ts-ignore
    get type() {
        return this._objRef?.type;
    }
    // @ts-ignore
    get parameters() {
        return this._objRef?.parameters;
    }
}
ThConeGeometry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThConeGeometry, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThConeGeometry.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.1", type: ThConeGeometry, selector: "th-coneGeometry", providers: [
        {
            provide: ThBufferGeometry,
            useExisting: forwardRef(() => ThConeGeometry)
        }
    ], usesInheritance: true, ngImport: i0, template: '<ng-content/>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThConeGeometry, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-coneGeometry',
                    template: '<ng-content/>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThBufferGeometry,
                            useExisting: forwardRef(() => ThConeGeometry)
                        }
                    ]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGhDb25lR2VvbWV0cnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtdGhyZWUvc3JjL2xpYi9nZW5lcmF0ZWQvVGhDb25lR2VvbWV0cnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEseURBQXlEO0FBQ3pELHlDQUF5QztBQUN6QyxxSUFBcUk7QUFDckksT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQVEsTUFBTSxlQUFlLENBQUM7QUFDckYsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLE9BQU8sQ0FBQztBQUNyQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQzs7QUFhMUQsTUFBTSxPQUFPLGNBV1gsU0FBUSxrQkFBNEI7SUFDN0IsT0FBTztRQUNaLE9BQU8sWUFBWSxDQUFDO0lBQ3RCLENBQUM7SUFFRCxhQUFhO0lBQ2IsSUFBVyxJQUFJO1FBQ2IsT0FBTyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQztJQUM1QixDQUFDO0lBQ0QsYUFBYTtJQUNiLElBQVcsVUFBVTtRQWFuQixPQUFPLElBQUksQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDO0lBQ2xDLENBQUM7OzJHQW5DVSxjQUFjOytGQUFkLGNBQWMsMENBUGQ7UUFDVDtZQUNFLE9BQU8sRUFBRSxnQkFBZ0I7WUFDekIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxjQUFjLENBQUM7U0FDOUM7S0FDRixpREFQUyxlQUFlOzJGQVNkLGNBQWM7a0JBWDFCLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLGlCQUFpQjtvQkFDM0IsUUFBUSxFQUFFLGVBQWU7b0JBQ3pCLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxTQUFTLEVBQUU7d0JBQ1Q7NEJBQ0UsT0FBTyxFQUFFLGdCQUFnQjs0QkFDekIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsZUFBZSxDQUFDO3lCQUM5QztxQkFDRjtpQkFDRiIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZXJzY29yZS1kYW5nbGUgKi9cbi8qIGVzbGludC1kaXNhYmxlIEBhbmd1bGFyLWVzbGludC9jb21wb25lbnQtc2VsZWN0b3IsIEBhbmd1bGFyLWVzbGludC9jb21wb25lbnQtY2xhc3Mtc3VmZml4LCBqc2RvYy9uby10eXBlcywgaW1wb3J0L25vLWRlcHJlY2F0ZWQgKi9cbmltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIGZvcndhcmRSZWYsIFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbmVHZW9tZXRyeSB9IGZyb20gJ3RocmVlJztcbmltcG9ydCB7IFRoQnVmZmVyR2VvbWV0cnkgfSBmcm9tICcuL1RoQnVmZmVyR2VvbWV0cnknO1xuaW1wb3J0IHsgVGhDeWxpbmRlckdlb21ldHJ5IH0gZnJvbSAnLi9UaEN5bGluZGVyR2VvbWV0cnknO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd0aC1jb25lR2VvbWV0cnknLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50Lz4nLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogVGhCdWZmZXJHZW9tZXRyeSxcbiAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IFRoQ29uZUdlb21ldHJ5KVxuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBUaENvbmVHZW9tZXRyeTxcbiAgVCBleHRlbmRzIENvbmVHZW9tZXRyeSA9IENvbmVHZW9tZXRyeSxcbiAgVEFSR1MgPSBbXG4gICAgcmFkaXVzPzogbnVtYmVyLFxuICAgIGhlaWdodD86IG51bWJlcixcbiAgICByYWRpYWxTZWdtZW50cz86IG51bWJlcixcbiAgICBoZWlnaHRTZWdtZW50cz86IG51bWJlcixcbiAgICBvcGVuRW5kZWQ/OiBib29sZWFuLFxuICAgIHRoZXRhU3RhcnQ/OiBudW1iZXIsXG4gICAgdGhldGFMZW5ndGg/OiBudW1iZXJcbiAgXVxuPiBleHRlbmRzIFRoQ3lsaW5kZXJHZW9tZXRyeTxULCBUQVJHUz4ge1xuICBwdWJsaWMgZ2V0VHlwZSgpOiBUeXBlPENvbmVHZW9tZXRyeT4ge1xuICAgIHJldHVybiBDb25lR2VvbWV0cnk7XG4gIH1cblxuICAvLyBAdHMtaWdub3JlXG4gIHB1YmxpYyBnZXQgdHlwZSgpOiAoc3RyaW5nIHwgJ0NvbmVHZW9tZXRyeScpIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5fb2JqUmVmPy50eXBlO1xuICB9XG4gIC8vIEB0cy1pZ25vcmVcbiAgcHVibGljIGdldCBwYXJhbWV0ZXJzKCk6XG4gICAgfCB7XG4gICAgICAgIHJlYWRvbmx5IHJhZGl1czogbnVtYmVyO1xuICAgICAgICByZWFkb25seSByYWRpdXNUb3A6IG51bWJlcjtcbiAgICAgICAgcmVhZG9ubHkgcmFkaXVzQm90dG9tOiBudW1iZXI7XG4gICAgICAgIHJlYWRvbmx5IGhlaWdodDogbnVtYmVyO1xuICAgICAgICByZWFkb25seSByYWRpYWxTZWdtZW50czogbnVtYmVyO1xuICAgICAgICByZWFkb25seSBoZWlnaHRTZWdtZW50czogbnVtYmVyO1xuICAgICAgICByZWFkb25seSBvcGVuRW5kZWQ6IGJvb2xlYW47XG4gICAgICAgIHJlYWRvbmx5IHRoZXRhU3RhcnQ6IG51bWJlcjtcbiAgICAgICAgcmVhZG9ubHkgdGhldGFMZW5ndGg6IG51bWJlcjtcbiAgICAgIH1cbiAgICB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuX29ialJlZj8ucGFyYW1ldGVycztcbiAgfVxufVxuIl19