/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, forwardRef, Input } from '@angular/core';
import { TransformControls } from 'three/examples/jsm/controls/TransformControls';
import { ThControlBase } from '../ThControlBase';
import * as i0 from "@angular/core";
export class ThTransformControlsGen extends ThControlBase {
    getType() {
        return TransformControls;
    }
    set domElement(value) {
        if (this._objRef) {
            this._objRef.domElement = value;
        }
    }
    // @ts-ignore
    get domElement() {
        return this._objRef?.domElement;
    }
    set camera(value) {
        if (this._objRef) {
            this._objRef.camera = value;
        }
    }
    // @ts-ignore
    get camera() {
        return this._objRef?.camera;
    }
    set object(value) {
        if (this._objRef) {
            this._objRef.object = value;
        }
    }
    // @ts-ignore
    get object() {
        return this._objRef?.object;
    }
    set enabled(value) {
        if (this._objRef) {
            this._objRef.enabled = value;
        }
    }
    // @ts-ignore
    get enabled() {
        return this._objRef?.enabled;
    }
    set axis(value) {
        if (this._objRef) {
            this._objRef.axis = value;
        }
    }
    // @ts-ignore
    get axis() {
        return this._objRef?.axis;
    }
    set mode(value) {
        if (this._objRef) {
            this._objRef.mode = value;
        }
    }
    // @ts-ignore
    get mode() {
        return this._objRef?.mode;
    }
    set translationSnap(value) {
        if (this._objRef) {
            this._objRef.translationSnap = value;
        }
    }
    // @ts-ignore
    get translationSnap() {
        return this._objRef?.translationSnap;
    }
    set rotationSnap(value) {
        if (this._objRef) {
            this._objRef.rotationSnap = value;
        }
    }
    // @ts-ignore
    get rotationSnap() {
        return this._objRef?.rotationSnap;
    }
    set space(value) {
        if (this._objRef) {
            this._objRef.space = value;
        }
    }
    // @ts-ignore
    get space() {
        return this._objRef?.space;
    }
    set size(value) {
        if (this._objRef) {
            this._objRef.size = value;
        }
    }
    // @ts-ignore
    get size() {
        return this._objRef?.size;
    }
    set dragging(value) {
        if (this._objRef) {
            this._objRef.dragging = value;
        }
    }
    // @ts-ignore
    get dragging() {
        return this._objRef?.dragging;
    }
    set showX(value) {
        if (this._objRef) {
            this._objRef.showX = value;
        }
    }
    // @ts-ignore
    get showX() {
        return this._objRef?.showX;
    }
    set showY(value) {
        if (this._objRef) {
            this._objRef.showY = value;
        }
    }
    // @ts-ignore
    get showY() {
        return this._objRef?.showY;
    }
    set showZ(value) {
        if (this._objRef) {
            this._objRef.showZ = value;
        }
    }
    // @ts-ignore
    get showZ() {
        return this._objRef?.showZ;
    }
    // @ts-ignore
    get isTransformControls() {
        return this._objRef?.isTransformControls;
    }
    set mouseButtons(value) {
        if (this._objRef) {
            this._objRef.mouseButtons = value;
        }
    }
    // @ts-ignore
    get mouseButtons() {
        return this._objRef?.mouseButtons;
    }
}
ThTransformControlsGen.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThTransformControlsGen, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThTransformControlsGen.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.1", type: ThTransformControlsGen, selector: "th-transformControlsGen", inputs: { domElement: "domElement", camera: "camera", object: "object", enabled: "enabled", axis: "axis", mode: "mode", translationSnap: "translationSnap", rotationSnap: "rotationSnap", space: "space", size: "size", dragging: "dragging", showX: "showX", showY: "showY", showZ: "showZ", mouseButtons: "mouseButtons" }, providers: [
        {
            provide: ThControlBase,
            useExisting: forwardRef(() => ThTransformControlsGen)
        }
    ], usesInheritance: true, ngImport: i0, template: '<ng-content/>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThTransformControlsGen, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-transformControlsGen',
                    template: '<ng-content/>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThControlBase,
                            useExisting: forwardRef(() => ThTransformControlsGen)
                        }
                    ]
                }]
        }], propDecorators: { domElement: [{
                type: Input
            }], camera: [{
                type: Input
            }], object: [{
                type: Input
            }], enabled: [{
                type: Input
            }], axis: [{
                type: Input
            }], mode: [{
                type: Input
            }], translationSnap: [{
                type: Input
            }], rotationSnap: [{
                type: Input
            }], space: [{
                type: Input
            }], size: [{
                type: Input
            }], dragging: [{
                type: Input
            }], showX: [{
                type: Input
            }], showY: [{
                type: Input
            }], showZ: [{
                type: Input
            }], mouseButtons: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,