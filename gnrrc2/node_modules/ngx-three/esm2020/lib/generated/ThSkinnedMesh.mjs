/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, forwardRef, Input } from '@angular/core';
import { SkinnedMesh } from 'three';
import { applyValue } from '../util';
import { ThMesh } from './ThMesh';
import { ThObject3D } from './ThObject3D';
import * as i0 from "@angular/core";
export class ThSkinnedMesh extends ThMesh {
    getType() {
        return SkinnedMesh;
    }
    // @ts-ignore
    get isSkinnedMesh() {
        return this._objRef?.isSkinnedMesh;
    }
    // @ts-ignore
    get type() {
        return this._objRef?.type;
    }
    set bindMode(value) {
        if (this._objRef) {
            this._objRef.bindMode = value;
        }
    }
    // @ts-ignore
    get bindMode() {
        return this._objRef?.bindMode;
    }
    set bindMatrix(value) {
        if (this._objRef) {
            this._objRef.bindMatrix = applyValue(this._objRef.bindMatrix, value);
        }
    }
    // @ts-ignore
    get bindMatrix() {
        return this._objRef?.bindMatrix;
    }
    set bindMatrixInverse(value) {
        if (this._objRef) {
            this._objRef.bindMatrixInverse = applyValue(this._objRef.bindMatrixInverse, value);
        }
    }
    // @ts-ignore
    get bindMatrixInverse() {
        return this._objRef?.bindMatrixInverse;
    }
    set boundingBox(value) {
        if (this._objRef) {
            this._objRef.boundingBox = applyValue(this._objRef.boundingBox, value);
        }
    }
    // @ts-ignore
    get boundingBox() {
        return this._objRef?.boundingBox;
    }
    set boundingSphere(value) {
        if (this._objRef) {
            this._objRef.boundingSphere = applyValue(this._objRef.boundingSphere, value);
        }
    }
    // @ts-ignore
    get boundingSphere() {
        return this._objRef?.boundingSphere;
    }
    set skeleton(value) {
        if (this._objRef) {
            this._objRef.skeleton = value;
        }
    }
    // @ts-ignore
    get skeleton() {
        return this._objRef?.skeleton;
    }
}
ThSkinnedMesh.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThSkinnedMesh, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThSkinnedMesh.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.1", type: ThSkinnedMesh, selector: "th-skinnedMesh", inputs: { bindMode: "bindMode", bindMatrix: "bindMatrix", bindMatrixInverse: "bindMatrixInverse", boundingBox: "boundingBox", boundingSphere: "boundingSphere", skeleton: "skeleton" }, providers: [{ provide: ThObject3D, useExisting: forwardRef(() => ThSkinnedMesh) }], usesInheritance: true, ngImport: i0, template: '<ng-content/>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThSkinnedMesh, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-skinnedMesh',
                    template: '<ng-content/>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [{ provide: ThObject3D, useExisting: forwardRef(() => ThSkinnedMesh) }]
                }]
        }], propDecorators: { bindMode: [{
                type: Input
            }], bindMatrix: [{
                type: Input
            }], bindMatrixInverse: [{
                type: Input
            }], boundingBox: [{
                type: Input
            }], boundingSphere: [{
                type: Input
            }], skeleton: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGhTa2lubmVkTWVzaC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC10aHJlZS9zcmMvbGliL2dlbmVyYXRlZC9UaFNraW5uZWRNZXNoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHlEQUF5RDtBQUN6RCx5Q0FBeUM7QUFDekMscUlBQXFJO0FBQ3JJLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBUSxNQUFNLGVBQWUsQ0FBQztBQUM1RixPQUFPLEVBQXFELFdBQVcsRUFBbUIsTUFBTSxPQUFPLENBQUM7QUFDeEcsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNyQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxjQUFjLENBQUM7O0FBUTFDLE1BQU0sT0FBTyxhQUtYLFNBQVEsTUFBc0M7SUFDdkMsT0FBTztRQUNaLE9BQU8sV0FBVyxDQUFDO0lBQ3JCLENBQUM7SUFFRCxhQUFhO0lBQ2IsSUFBVyxhQUFhO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLE9BQU8sRUFBRSxhQUFhLENBQUM7SUFDckMsQ0FBQztJQUNELGFBQWE7SUFDYixJQUFXLElBQUk7UUFDYixPQUFPLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDO0lBQzVCLENBQUM7SUFDRCxJQUNXLFFBQVEsQ0FBQyxLQUE4QjtRQUNoRCxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1NBQy9CO0lBQ0gsQ0FBQztJQUVELGFBQWE7SUFDYixJQUFXLFFBQVE7UUFDakIsT0FBTyxJQUFJLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQztJQUNoQyxDQUFDO0lBQ0QsSUFDVyxVQUFVLENBQ25CLEtBbUJLO1FBRUwsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBVSxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQztTQUMvRTtJQUNILENBQUM7SUFDRCxhQUFhO0lBQ2IsSUFBVyxVQUFVO1FBQ25CLE9BQU8sSUFBSSxDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUM7SUFDbEMsQ0FBQztJQUNELElBQ1csaUJBQWlCLENBQzFCLEtBbUJLO1FBRUwsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLEdBQUcsVUFBVSxDQUFVLElBQUksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDN0Y7SUFDSCxDQUFDO0lBQ0QsYUFBYTtJQUNiLElBQVcsaUJBQWlCO1FBQzFCLE9BQU8sSUFBSSxDQUFDLE9BQU8sRUFBRSxpQkFBaUIsQ0FBQztJQUN6QyxDQUFDO0lBQ0QsSUFDVyxXQUFXLENBQUMsS0FBMEM7UUFDL0QsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxHQUFHLFVBQVUsQ0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxLQUFLLENBQUMsQ0FBQztTQUM5RTtJQUNILENBQUM7SUFDRCxhQUFhO0lBQ2IsSUFBVyxXQUFXO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLE9BQU8sRUFBRSxXQUFXLENBQUM7SUFDbkMsQ0FBQztJQUNELElBQ1csY0FBYyxDQUFDLEtBQWlEO1FBQ3pFLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsR0FBRyxVQUFVLENBQVMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDdEY7SUFDSCxDQUFDO0lBQ0QsYUFBYTtJQUNiLElBQVcsY0FBYztRQUN2QixPQUFPLElBQUksQ0FBQyxPQUFPLEVBQUUsY0FBYyxDQUFDO0lBQ3RDLENBQUM7SUFDRCxJQUNXLFFBQVEsQ0FBQyxLQUFlO1FBQ2pDLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7U0FDL0I7SUFDSCxDQUFDO0lBRUQsYUFBYTtJQUNiLElBQVcsUUFBUTtRQUNqQixPQUFPLElBQUksQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDO0lBQ2hDLENBQUM7OzBHQXpIVSxhQUFhOzhGQUFiLGFBQWEsaU9BRmIsQ0FBQyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLGlEQUZ4RSxlQUFlOzJGQUlkLGFBQWE7a0JBTnpCLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLGdCQUFnQjtvQkFDMUIsUUFBUSxFQUFFLGVBQWU7b0JBQ3pCLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsY0FBYyxDQUFDLEVBQUUsQ0FBQztpQkFDbkY7OEJBb0JZLFFBQVE7c0JBRGxCLEtBQUs7Z0JBWUssVUFBVTtzQkFEcEIsS0FBSztnQkFnQ0ssaUJBQWlCO3NCQUQzQixLQUFLO2dCQWdDSyxXQUFXO3NCQURyQixLQUFLO2dCQVdLLGNBQWM7c0JBRHhCLEtBQUs7Z0JBV0ssUUFBUTtzQkFEbEIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZXJzY29yZS1kYW5nbGUgKi9cbi8qIGVzbGludC1kaXNhYmxlIEBhbmd1bGFyLWVzbGludC9jb21wb25lbnQtc2VsZWN0b3IsIEBhbmd1bGFyLWVzbGludC9jb21wb25lbnQtY2xhc3Mtc3VmZml4LCBqc2RvYy9uby10eXBlcywgaW1wb3J0L25vLWRlcHJlY2F0ZWQgKi9cbmltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIGZvcndhcmRSZWYsIElucHV0LCBUeXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCb3gzLCBCdWZmZXJHZW9tZXRyeSwgTWF0ZXJpYWwsIE1hdHJpeDQsIFNrZWxldG9uLCBTa2lubmVkTWVzaCwgU3BoZXJlLCBWZWN0b3IzIH0gZnJvbSAndGhyZWUnO1xuaW1wb3J0IHsgYXBwbHlWYWx1ZSB9IGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IHsgVGhNZXNoIH0gZnJvbSAnLi9UaE1lc2gnO1xuaW1wb3J0IHsgVGhPYmplY3QzRCB9IGZyb20gJy4vVGhPYmplY3QzRCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3RoLXNraW5uZWRNZXNoJyxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudC8+JyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHByb3ZpZGVyczogW3sgcHJvdmlkZTogVGhPYmplY3QzRCwgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gVGhTa2lubmVkTWVzaCkgfV1cbn0pXG5leHBvcnQgY2xhc3MgVGhTa2lubmVkTWVzaDxcbiAgVEdlb21ldHJ5IGV4dGVuZHMgQnVmZmVyR2VvbWV0cnkgPSBCdWZmZXJHZW9tZXRyeSxcbiAgVE1hdGVyaWFsIGV4dGVuZHMgTWF0ZXJpYWwgfCBNYXRlcmlhbFtdID0gTWF0ZXJpYWwgfCBNYXRlcmlhbFtdLFxuICBUIGV4dGVuZHMgU2tpbm5lZE1lc2g8VEdlb21ldHJ5LCBUTWF0ZXJpYWw+ID0gU2tpbm5lZE1lc2g8VEdlb21ldHJ5LCBUTWF0ZXJpYWw+LFxuICBUQVJHUyA9IFtnZW9tZXRyeT86IFRHZW9tZXRyeSwgbWF0ZXJpYWw/OiBUTWF0ZXJpYWwsIHVzZVZlcnRleFRleHR1cmU/OiBib29sZWFuXVxuPiBleHRlbmRzIFRoTWVzaDxUR2VvbWV0cnksIFRNYXRlcmlhbCwgVCwgVEFSR1M+IHtcbiAgcHVibGljIGdldFR5cGUoKTogVHlwZTxTa2lubmVkTWVzaDxUR2VvbWV0cnksIFRNYXRlcmlhbD4+IHtcbiAgICByZXR1cm4gU2tpbm5lZE1lc2g7XG4gIH1cblxuICAvLyBAdHMtaWdub3JlXG4gIHB1YmxpYyBnZXQgaXNTa2lubmVkTWVzaCgpOiB0cnVlIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5fb2JqUmVmPy5pc1NraW5uZWRNZXNoO1xuICB9XG4gIC8vIEB0cy1pZ25vcmVcbiAgcHVibGljIGdldCB0eXBlKCk6IChzdHJpbmcgfCAnU2tpbm5lZE1lc2gnKSB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuX29ialJlZj8udHlwZTtcbiAgfVxuICBASW5wdXQoKVxuICBwdWJsaWMgc2V0IGJpbmRNb2RlKHZhbHVlOiAnYXR0YWNoZWQnIHwgJ2RldGFjaGVkJykge1xuICAgIGlmICh0aGlzLl9vYmpSZWYpIHtcbiAgICAgIHRoaXMuX29ialJlZi5iaW5kTW9kZSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIC8vIEB0cy1pZ25vcmVcbiAgcHVibGljIGdldCBiaW5kTW9kZSgpOiAoJ2F0dGFjaGVkJyB8ICdkZXRhY2hlZCcpIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5fb2JqUmVmPy5iaW5kTW9kZTtcbiAgfVxuICBASW5wdXQoKVxuICBwdWJsaWMgc2V0IGJpbmRNYXRyaXgoXG4gICAgdmFsdWU6XG4gICAgICB8IE1hdHJpeDRcbiAgICAgIHwgW1xuICAgICAgICAgIG4xMTogbnVtYmVyLFxuICAgICAgICAgIG4xMjogbnVtYmVyLFxuICAgICAgICAgIG4xMzogbnVtYmVyLFxuICAgICAgICAgIG4xNDogbnVtYmVyLFxuICAgICAgICAgIG4yMTogbnVtYmVyLFxuICAgICAgICAgIG4yMjogbnVtYmVyLFxuICAgICAgICAgIG4yMzogbnVtYmVyLFxuICAgICAgICAgIG4yNDogbnVtYmVyLFxuICAgICAgICAgIG4zMTogbnVtYmVyLFxuICAgICAgICAgIG4zMjogbnVtYmVyLFxuICAgICAgICAgIG4zMzogbnVtYmVyLFxuICAgICAgICAgIG4zNDogbnVtYmVyLFxuICAgICAgICAgIG40MTogbnVtYmVyLFxuICAgICAgICAgIG40MjogbnVtYmVyLFxuICAgICAgICAgIG40MzogbnVtYmVyLFxuICAgICAgICAgIG40NDogbnVtYmVyXG4gICAgICAgIF1cbiAgKSB7XG4gICAgaWYgKHRoaXMuX29ialJlZikge1xuICAgICAgdGhpcy5fb2JqUmVmLmJpbmRNYXRyaXggPSBhcHBseVZhbHVlPE1hdHJpeDQ+KHRoaXMuX29ialJlZi5iaW5kTWF0cml4LCB2YWx1ZSk7XG4gICAgfVxuICB9XG4gIC8vIEB0cy1pZ25vcmVcbiAgcHVibGljIGdldCBiaW5kTWF0cml4KCk6IE1hdHJpeDQgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLl9vYmpSZWY/LmJpbmRNYXRyaXg7XG4gIH1cbiAgQElucHV0KClcbiAgcHVibGljIHNldCBiaW5kTWF0cml4SW52ZXJzZShcbiAgICB2YWx1ZTpcbiAgICAgIHwgTWF0cml4NFxuICAgICAgfCBbXG4gICAgICAgICAgbjExOiBudW1iZXIsXG4gICAgICAgICAgbjEyOiBudW1iZXIsXG4gICAgICAgICAgbjEzOiBudW1iZXIsXG4gICAgICAgICAgbjE0OiBudW1iZXIsXG4gICAgICAgICAgbjIxOiBudW1iZXIsXG4gICAgICAgICAgbjIyOiBudW1iZXIsXG4gICAgICAgICAgbjIzOiBudW1iZXIsXG4gICAgICAgICAgbjI0OiBudW1iZXIsXG4gICAgICAgICAgbjMxOiBudW1iZXIsXG4gICAgICAgICAgbjMyOiBudW1iZXIsXG4gICAgICAgICAgbjMzOiBudW1iZXIsXG4gICAgICAgICAgbjM0OiBudW1iZXIsXG4gICAgICAgICAgbjQxOiBudW1iZXIsXG4gICAgICAgICAgbjQyOiBudW1iZXIsXG4gICAgICAgICAgbjQzOiBudW1iZXIsXG4gICAgICAgICAgbjQ0OiBudW1iZXJcbiAgICAgICAgXVxuICApIHtcbiAgICBpZiAodGhpcy5fb2JqUmVmKSB7XG4gICAgICB0aGlzLl9vYmpSZWYuYmluZE1hdHJpeEludmVyc2UgPSBhcHBseVZhbHVlPE1hdHJpeDQ+KHRoaXMuX29ialJlZi5iaW5kTWF0cml4SW52ZXJzZSwgdmFsdWUpO1xuICAgIH1cbiAgfVxuICAvLyBAdHMtaWdub3JlXG4gIHB1YmxpYyBnZXQgYmluZE1hdHJpeEludmVyc2UoKTogTWF0cml4NCB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuX29ialJlZj8uYmluZE1hdHJpeEludmVyc2U7XG4gIH1cbiAgQElucHV0KClcbiAgcHVibGljIHNldCBib3VuZGluZ0JveCh2YWx1ZTogQm94MyB8IFttaW46IFZlY3RvcjMsIG1heDogVmVjdG9yM10pIHtcbiAgICBpZiAodGhpcy5fb2JqUmVmKSB7XG4gICAgICB0aGlzLl9vYmpSZWYuYm91bmRpbmdCb3ggPSBhcHBseVZhbHVlPEJveDM+KHRoaXMuX29ialJlZi5ib3VuZGluZ0JveCwgdmFsdWUpO1xuICAgIH1cbiAgfVxuICAvLyBAdHMtaWdub3JlXG4gIHB1YmxpYyBnZXQgYm91bmRpbmdCb3goKTogQm94MyB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuX29ialJlZj8uYm91bmRpbmdCb3g7XG4gIH1cbiAgQElucHV0KClcbiAgcHVibGljIHNldCBib3VuZGluZ1NwaGVyZSh2YWx1ZTogU3BoZXJlIHwgW2NlbnRlcjogVmVjdG9yMywgcmFkaXVzOiBudW1iZXJdKSB7XG4gICAgaWYgKHRoaXMuX29ialJlZikge1xuICAgICAgdGhpcy5fb2JqUmVmLmJvdW5kaW5nU3BoZXJlID0gYXBwbHlWYWx1ZTxTcGhlcmU+KHRoaXMuX29ialJlZi5ib3VuZGluZ1NwaGVyZSwgdmFsdWUpO1xuICAgIH1cbiAgfVxuICAvLyBAdHMtaWdub3JlXG4gIHB1YmxpYyBnZXQgYm91bmRpbmdTcGhlcmUoKTogU3BoZXJlIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5fb2JqUmVmPy5ib3VuZGluZ1NwaGVyZTtcbiAgfVxuICBASW5wdXQoKVxuICBwdWJsaWMgc2V0IHNrZWxldG9uKHZhbHVlOiBTa2VsZXRvbikge1xuICAgIGlmICh0aGlzLl9vYmpSZWYpIHtcbiAgICAgIHRoaXMuX29ialJlZi5za2VsZXRvbiA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIC8vIEB0cy1pZ25vcmVcbiAgcHVibGljIGdldCBza2VsZXRvbigpOiBTa2VsZXRvbiB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuX29ialJlZj8uc2tlbGV0b247XG4gIH1cbn1cbiJdfQ==