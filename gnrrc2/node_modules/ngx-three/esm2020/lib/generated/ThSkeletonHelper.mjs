/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, forwardRef, Input } from '@angular/core';
import { SkeletonHelper } from 'three';
import { applyValue } from '../util';
import { ThLineSegments } from './ThLineSegments';
import { ThObject3D } from './ThObject3D';
import * as i0 from "@angular/core";
export class ThSkeletonHelper extends ThLineSegments {
    getType() {
        return SkeletonHelper;
    }
    // @ts-ignore
    get type() {
        return this._objRef?.type;
    }
    set bones(value) {
        if (this._objRef) {
            this._objRef.bones = value;
        }
    }
    // @ts-ignore
    get bones() {
        return this._objRef?.bones;
    }
    set root(value) {
        if (this._objRef) {
            this._objRef.root = value;
        }
    }
    // @ts-ignore
    get root() {
        return this._objRef?.root;
    }
    set matrix(value) {
        if (this._objRef) {
            this._objRef.matrix = applyValue(this._objRef.matrix, value);
        }
    }
    // @ts-ignore
    get matrix() {
        return this._objRef?.matrix;
    }
    set matrixAutoUpdate(value) {
        if (this._objRef) {
            this._objRef.matrixAutoUpdate = value;
        }
    }
    // @ts-ignore
    get matrixAutoUpdate() {
        return this._objRef?.matrixAutoUpdate;
    }
}
ThSkeletonHelper.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThSkeletonHelper, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThSkeletonHelper.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.1", type: ThSkeletonHelper, selector: "th-skeletonHelper", inputs: { bones: "bones", root: "root", matrix: "matrix", matrixAutoUpdate: "matrixAutoUpdate" }, providers: [{ provide: ThObject3D, useExisting: forwardRef(() => ThSkeletonHelper) }], usesInheritance: true, ngImport: i0, template: '<ng-content/>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThSkeletonHelper, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-skeletonHelper',
                    template: '<ng-content/>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [{ provide: ThObject3D, useExisting: forwardRef(() => ThSkeletonHelper) }]
                }]
        }], propDecorators: { bones: [{
                type: Input
            }], root: [{
                type: Input
            }], matrix: [{
                type: Input
            }], matrixAutoUpdate: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGhTa2VsZXRvbkhlbHBlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC10aHJlZS9zcmMvbGliL2dlbmVyYXRlZC9UaFNrZWxldG9uSGVscGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHlEQUF5RDtBQUN6RCx5Q0FBeUM7QUFDekMscUlBQXFJO0FBQ3JJLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBUSxNQUFNLGVBQWUsQ0FBQztBQUM1RixPQUFPLEVBQXFELGNBQWMsRUFBZSxNQUFNLE9BQU8sQ0FBQztBQUN2RyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3JDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sY0FBYyxDQUFDOztBQVExQyxNQUFNLE9BQU8sZ0JBR1gsU0FBUSxjQUErRDtJQUNoRSxPQUFPO1FBQ1osT0FBTyxjQUFjLENBQUM7SUFDeEIsQ0FBQztJQUVELGFBQWE7SUFDYixJQUFXLElBQUk7UUFDYixPQUFPLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDO0lBQzVCLENBQUM7SUFDRCxJQUNXLEtBQUssQ0FBQyxLQUFhO1FBQzVCLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7U0FDNUI7SUFDSCxDQUFDO0lBRUQsYUFBYTtJQUNiLElBQVcsS0FBSztRQUNkLE9BQU8sSUFBSSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUM7SUFDN0IsQ0FBQztJQUNELElBQ1csSUFBSSxDQUFDLEtBQTZCO1FBQzNDLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksR0FBRyxLQUFLLENBQUM7U0FDM0I7SUFDSCxDQUFDO0lBRUQsYUFBYTtJQUNiLElBQVcsSUFBSTtRQUNiLE9BQU8sSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUM7SUFDNUIsQ0FBQztJQUNELElBQ1csTUFBTSxDQUNmLEtBbUJLO1FBRUwsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLFVBQVUsQ0FBVSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztTQUN2RTtJQUNILENBQUM7SUFDRCxhQUFhO0lBQ2IsSUFBVyxNQUFNO1FBQ2YsT0FBTyxJQUFJLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQztJQUM5QixDQUFDO0lBQ0QsSUFDVyxnQkFBZ0IsQ0FBQyxLQUFjO1FBQ3hDLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixHQUFHLEtBQUssQ0FBQztTQUN2QztJQUNILENBQUM7SUFFRCxhQUFhO0lBQ2IsSUFBVyxnQkFBZ0I7UUFDekIsT0FBTyxJQUFJLENBQUMsT0FBTyxFQUFFLGdCQUFnQixDQUFDO0lBQ3hDLENBQUM7OzZHQTNFVSxnQkFBZ0I7aUdBQWhCLGdCQUFnQiw4SUFGaEIsQ0FBQyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsaURBRjNFLGVBQWU7MkZBSWQsZ0JBQWdCO2tCQU41QixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxtQkFBbUI7b0JBQzdCLFFBQVEsRUFBRSxlQUFlO29CQUN6QixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsU0FBUyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLGlCQUFpQixDQUFDLEVBQUUsQ0FBQztpQkFDdEY7OEJBY1ksS0FBSztzQkFEZixLQUFLO2dCQVlLLElBQUk7c0JBRGQsS0FBSztnQkFZSyxNQUFNO3NCQURoQixLQUFLO2dCQWdDSyxnQkFBZ0I7c0JBRDFCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb24gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVyc2NvcmUtZGFuZ2xlICovXG4vKiBlc2xpbnQtZGlzYWJsZSBAYW5ndWxhci1lc2xpbnQvY29tcG9uZW50LXNlbGVjdG9yLCBAYW5ndWxhci1lc2xpbnQvY29tcG9uZW50LWNsYXNzLXN1ZmZpeCwganNkb2Mvbm8tdHlwZXMsIGltcG9ydC9uby1kZXByZWNhdGVkICovXG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBmb3J3YXJkUmVmLCBJbnB1dCwgVHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQm9uZSwgQnVmZmVyR2VvbWV0cnksIE1hdGVyaWFsLCBNYXRyaXg0LCBPYmplY3QzRCwgU2tlbGV0b25IZWxwZXIsIFNraW5uZWRNZXNoIH0gZnJvbSAndGhyZWUnO1xuaW1wb3J0IHsgYXBwbHlWYWx1ZSB9IGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IHsgVGhMaW5lU2VnbWVudHMgfSBmcm9tICcuL1RoTGluZVNlZ21lbnRzJztcbmltcG9ydCB7IFRoT2JqZWN0M0QgfSBmcm9tICcuL1RoT2JqZWN0M0QnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd0aC1za2VsZXRvbkhlbHBlcicsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQvPicsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBwcm92aWRlcnM6IFt7IHByb3ZpZGU6IFRoT2JqZWN0M0QsIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IFRoU2tlbGV0b25IZWxwZXIpIH1dXG59KVxuZXhwb3J0IGNsYXNzIFRoU2tlbGV0b25IZWxwZXI8XG4gIFQgZXh0ZW5kcyBTa2VsZXRvbkhlbHBlciA9IFNrZWxldG9uSGVscGVyLFxuICBUQVJHUyA9IC8qIG9iamVjdCAqLyBTa2lubmVkTWVzaCB8IE9iamVjdDNEXG4+IGV4dGVuZHMgVGhMaW5lU2VnbWVudHM8QnVmZmVyR2VvbWV0cnksIE1hdGVyaWFsIHwgTWF0ZXJpYWxbXSwgVCwgVEFSR1M+IHtcbiAgcHVibGljIGdldFR5cGUoKTogVHlwZTxTa2VsZXRvbkhlbHBlcj4ge1xuICAgIHJldHVybiBTa2VsZXRvbkhlbHBlcjtcbiAgfVxuXG4gIC8vIEB0cy1pZ25vcmVcbiAgcHVibGljIGdldCB0eXBlKCk6IChzdHJpbmcgfCAnU2tlbGV0b25IZWxwZXInKSB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuX29ialJlZj8udHlwZTtcbiAgfVxuICBASW5wdXQoKVxuICBwdWJsaWMgc2V0IGJvbmVzKHZhbHVlOiBCb25lW10pIHtcbiAgICBpZiAodGhpcy5fb2JqUmVmKSB7XG4gICAgICB0aGlzLl9vYmpSZWYuYm9uZXMgPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICAvLyBAdHMtaWdub3JlXG4gIHB1YmxpYyBnZXQgYm9uZXMoKTogQm9uZVtdIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5fb2JqUmVmPy5ib25lcztcbiAgfVxuICBASW5wdXQoKVxuICBwdWJsaWMgc2V0IHJvb3QodmFsdWU6IFNraW5uZWRNZXNoIHwgT2JqZWN0M0QpIHtcbiAgICBpZiAodGhpcy5fb2JqUmVmKSB7XG4gICAgICB0aGlzLl9vYmpSZWYucm9vdCA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIC8vIEB0cy1pZ25vcmVcbiAgcHVibGljIGdldCByb290KCk6IChTa2lubmVkTWVzaCB8IE9iamVjdDNEKSB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuX29ialJlZj8ucm9vdDtcbiAgfVxuICBASW5wdXQoKVxuICBwdWJsaWMgc2V0IG1hdHJpeChcbiAgICB2YWx1ZTpcbiAgICAgIHwgTWF0cml4NFxuICAgICAgfCBbXG4gICAgICAgICAgbjExOiBudW1iZXIsXG4gICAgICAgICAgbjEyOiBudW1iZXIsXG4gICAgICAgICAgbjEzOiBudW1iZXIsXG4gICAgICAgICAgbjE0OiBudW1iZXIsXG4gICAgICAgICAgbjIxOiBudW1iZXIsXG4gICAgICAgICAgbjIyOiBudW1iZXIsXG4gICAgICAgICAgbjIzOiBudW1iZXIsXG4gICAgICAgICAgbjI0OiBudW1iZXIsXG4gICAgICAgICAgbjMxOiBudW1iZXIsXG4gICAgICAgICAgbjMyOiBudW1iZXIsXG4gICAgICAgICAgbjMzOiBudW1iZXIsXG4gICAgICAgICAgbjM0OiBudW1iZXIsXG4gICAgICAgICAgbjQxOiBudW1iZXIsXG4gICAgICAgICAgbjQyOiBudW1iZXIsXG4gICAgICAgICAgbjQzOiBudW1iZXIsXG4gICAgICAgICAgbjQ0OiBudW1iZXJcbiAgICAgICAgXVxuICApIHtcbiAgICBpZiAodGhpcy5fb2JqUmVmKSB7XG4gICAgICB0aGlzLl9vYmpSZWYubWF0cml4ID0gYXBwbHlWYWx1ZTxNYXRyaXg0Pih0aGlzLl9vYmpSZWYubWF0cml4LCB2YWx1ZSk7XG4gICAgfVxuICB9XG4gIC8vIEB0cy1pZ25vcmVcbiAgcHVibGljIGdldCBtYXRyaXgoKTogTWF0cml4NCB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuX29ialJlZj8ubWF0cml4O1xuICB9XG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBzZXQgbWF0cml4QXV0b1VwZGF0ZSh2YWx1ZTogYm9vbGVhbikge1xuICAgIGlmICh0aGlzLl9vYmpSZWYpIHtcbiAgICAgIHRoaXMuX29ialJlZi5tYXRyaXhBdXRvVXBkYXRlID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgLy8gQHRzLWlnbm9yZVxuICBwdWJsaWMgZ2V0IG1hdHJpeEF1dG9VcGRhdGUoKTogYm9vbGVhbiB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuX29ialJlZj8ubWF0cml4QXV0b1VwZGF0ZTtcbiAgfVxufVxuIl19