/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, forwardRef, Input } from '@angular/core';
import { PerspectiveCamera } from 'three';
import { ThCamera } from './ThCamera';
import { ThObject3D } from './ThObject3D';
import * as i0 from "@angular/core";
export class ThPerspectiveCamera extends ThCamera {
    getType() {
        return PerspectiveCamera;
    }
    // @ts-ignore
    get isPerspectiveCamera() {
        return this._objRef?.isPerspectiveCamera;
    }
    // @ts-ignore
    get type() {
        return this._objRef?.type;
    }
    set zoom(value) {
        if (this._objRef) {
            this._objRef.zoom = value;
        }
    }
    // @ts-ignore
    get zoom() {
        return this._objRef?.zoom;
    }
    set fov(value) {
        if (this._objRef) {
            this._objRef.fov = value;
        }
    }
    // @ts-ignore
    get fov() {
        return this._objRef?.fov;
    }
    set aspect(value) {
        if (this._objRef) {
            this._objRef.aspect = value;
        }
    }
    // @ts-ignore
    get aspect() {
        return this._objRef?.aspect;
    }
    set near(value) {
        if (this._objRef) {
            this._objRef.near = value;
        }
    }
    // @ts-ignore
    get near() {
        return this._objRef?.near;
    }
    set far(value) {
        if (this._objRef) {
            this._objRef.far = value;
        }
    }
    // @ts-ignore
    get far() {
        return this._objRef?.far;
    }
    set focus(value) {
        if (this._objRef) {
            this._objRef.focus = value;
        }
    }
    // @ts-ignore
    get focus() {
        return this._objRef?.focus;
    }
    set view(value) {
        if (this._objRef) {
            this._objRef.view = value;
        }
    }
    // @ts-ignore
    get view() {
        return this._objRef?.view;
    }
    set filmGauge(value) {
        if (this._objRef) {
            this._objRef.filmGauge = value;
        }
    }
    // @ts-ignore
    get filmGauge() {
        return this._objRef?.filmGauge;
    }
    set filmOffset(value) {
        if (this._objRef) {
            this._objRef.filmOffset = value;
        }
    }
    // @ts-ignore
    get filmOffset() {
        return this._objRef?.filmOffset;
    }
}
ThPerspectiveCamera.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThPerspectiveCamera, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThPerspectiveCamera.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.1", type: ThPerspectiveCamera, selector: "th-perspectiveCamera", inputs: { zoom: "zoom", fov: "fov", aspect: "aspect", near: "near", far: "far", focus: "focus", view: "view", filmGauge: "filmGauge", filmOffset: "filmOffset" }, providers: [
        { provide: ThObject3D, useExisting: forwardRef(() => ThPerspectiveCamera) },
        { provide: ThCamera, useExisting: forwardRef(() => ThPerspectiveCamera) }
    ], usesInheritance: true, ngImport: i0, template: '<ng-content/>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThPerspectiveCamera, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-perspectiveCamera',
                    template: '<ng-content/>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: ThObject3D, useExisting: forwardRef(() => ThPerspectiveCamera) },
                        { provide: ThCamera, useExisting: forwardRef(() => ThPerspectiveCamera) }
                    ]
                }]
        }], propDecorators: { zoom: [{
                type: Input
            }], fov: [{
                type: Input
            }], aspect: [{
                type: Input
            }], near: [{
                type: Input
            }], far: [{
                type: Input
            }], focus: [{
                type: Input
            }], view: [{
                type: Input
            }], filmGauge: [{
                type: Input
            }], filmOffset: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,