/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, forwardRef, Input } from '@angular/core';
import { PointLightHelper } from 'three';
import { applyValue } from '../util';
import { ThObject3D } from './ThObject3D';
import * as i0 from "@angular/core";
export class ThPointLightHelper extends ThObject3D {
    getType() {
        return PointLightHelper;
    }
    // @ts-ignore
    get type() {
        return this._objRef?.type;
    }
    set light(value) {
        if (this._objRef) {
            this._objRef.light = value;
        }
    }
    // @ts-ignore
    get light() {
        return this._objRef?.light;
    }
    set matrix(value) {
        if (this._objRef) {
            this._objRef.matrix = applyValue(this._objRef.matrix, value);
        }
    }
    // @ts-ignore
    get matrix() {
        return this._objRef?.matrix;
    }
    set color(value) {
        if (this._objRef) {
            this._objRef.color = value;
        }
    }
    // @ts-ignore
    get color() {
        return this._objRef?.color;
    }
    set matrixAutoUpdate(value) {
        if (this._objRef) {
            this._objRef.matrixAutoUpdate = value;
        }
    }
    // @ts-ignore
    get matrixAutoUpdate() {
        return this._objRef?.matrixAutoUpdate;
    }
}
ThPointLightHelper.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThPointLightHelper, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThPointLightHelper.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.1", type: ThPointLightHelper, selector: "th-pointLightHelper", inputs: { light: "light", matrix: "matrix", color: "color", matrixAutoUpdate: "matrixAutoUpdate" }, providers: [{ provide: ThObject3D, useExisting: forwardRef(() => ThPointLightHelper) }], usesInheritance: true, ngImport: i0, template: '<ng-content/>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThPointLightHelper, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-pointLightHelper',
                    template: '<ng-content/>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [{ provide: ThObject3D, useExisting: forwardRef(() => ThPointLightHelper) }]
                }]
        }], propDecorators: { light: [{
                type: Input
            }], matrix: [{
                type: Input
            }], color: [{
                type: Input
            }], matrixAutoUpdate: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGhQb2ludExpZ2h0SGVscGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXRocmVlL3NyYy9saWIvZ2VuZXJhdGVkL1RoUG9pbnRMaWdodEhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx5REFBeUQ7QUFDekQseUNBQXlDO0FBQ3pDLHFJQUFxSTtBQUNySSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQVEsTUFBTSxlQUFlLENBQUM7QUFDNUYsT0FBTyxFQUFtRCxnQkFBZ0IsRUFBRSxNQUFNLE9BQU8sQ0FBQztBQUMxRixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3JDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxjQUFjLENBQUM7O0FBUTFDLE1BQU0sT0FBTyxrQkFHWCxTQUFRLFVBQTJCO0lBQzVCLE9BQU87UUFDWixPQUFPLGdCQUFnQixDQUFDO0lBQzFCLENBQUM7SUFFRCxhQUFhO0lBQ2IsSUFBVyxJQUFJO1FBQ2IsT0FBTyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQztJQUM1QixDQUFDO0lBQ0QsSUFDVyxLQUFLLENBQUMsS0FBaUI7UUFDaEMsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztTQUM1QjtJQUNILENBQUM7SUFFRCxhQUFhO0lBQ2IsSUFBVyxLQUFLO1FBQ2QsT0FBTyxJQUFJLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQztJQUM3QixDQUFDO0lBQ0QsSUFDVyxNQUFNLENBQ2YsS0FtQks7UUFFTCxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsVUFBVSxDQUFVLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQ3ZFO0lBQ0gsQ0FBQztJQUNELGFBQWE7SUFDYixJQUFXLE1BQU07UUFDZixPQUFPLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDO0lBQzlCLENBQUM7SUFDRCxJQUNXLEtBQUssQ0FBQyxLQUFzQztRQUNyRCxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1NBQzVCO0lBQ0gsQ0FBQztJQUVELGFBQWE7SUFDYixJQUFXLEtBQUs7UUFDZCxPQUFPLElBQUksQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDO0lBQzdCLENBQUM7SUFDRCxJQUNXLGdCQUFnQixDQUFDLEtBQWM7UUFDeEMsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDO1NBQ3ZDO0lBQ0gsQ0FBQztJQUVELGFBQWE7SUFDYixJQUFXLGdCQUFnQjtRQUN6QixPQUFPLElBQUksQ0FBQyxPQUFPLEVBQUUsZ0JBQWdCLENBQUM7SUFDeEMsQ0FBQzs7K0dBM0VVLGtCQUFrQjttR0FBbEIsa0JBQWtCLGtKQUZsQixDQUFDLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLGtCQUFrQixDQUFDLEVBQUUsQ0FBQyxpREFGN0UsZUFBZTsyRkFJZCxrQkFBa0I7a0JBTjlCLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLHFCQUFxQjtvQkFDL0IsUUFBUSxFQUFFLGVBQWU7b0JBQ3pCLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsbUJBQW1CLENBQUMsRUFBRSxDQUFDO2lCQUN4Rjs4QkFjWSxLQUFLO3NCQURmLEtBQUs7Z0JBWUssTUFBTTtzQkFEaEIsS0FBSztnQkFnQ0ssS0FBSztzQkFEZixLQUFLO2dCQVlLLGdCQUFnQjtzQkFEMUIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZXJzY29yZS1kYW5nbGUgKi9cbi8qIGVzbGludC1kaXNhYmxlIEBhbmd1bGFyLWVzbGludC9jb21wb25lbnQtc2VsZWN0b3IsIEBhbmd1bGFyLWVzbGludC9jb21wb25lbnQtY2xhc3Mtc3VmZml4LCBqc2RvYy9uby10eXBlcywgaW1wb3J0L25vLWRlcHJlY2F0ZWQgKi9cbmltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIGZvcndhcmRSZWYsIElucHV0LCBUeXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb2xvclJlcHJlc2VudGF0aW9uLCBFdmVudCwgTWF0cml4NCwgUG9pbnRMaWdodCwgUG9pbnRMaWdodEhlbHBlciB9IGZyb20gJ3RocmVlJztcbmltcG9ydCB7IGFwcGx5VmFsdWUgfSBmcm9tICcuLi91dGlsJztcbmltcG9ydCB7IFRoT2JqZWN0M0QgfSBmcm9tICcuL1RoT2JqZWN0M0QnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd0aC1wb2ludExpZ2h0SGVscGVyJyxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudC8+JyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHByb3ZpZGVyczogW3sgcHJvdmlkZTogVGhPYmplY3QzRCwgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gVGhQb2ludExpZ2h0SGVscGVyKSB9XVxufSlcbmV4cG9ydCBjbGFzcyBUaFBvaW50TGlnaHRIZWxwZXI8XG4gIFQgZXh0ZW5kcyBQb2ludExpZ2h0SGVscGVyID0gUG9pbnRMaWdodEhlbHBlcixcbiAgVEFSR1MgPSBbbGlnaHQ6IFBvaW50TGlnaHQsIHNwaGVyZVNpemU/OiBudW1iZXIsIGNvbG9yPzogQ29sb3JSZXByZXNlbnRhdGlvbl1cbj4gZXh0ZW5kcyBUaE9iamVjdDNEPEV2ZW50LCBULCBUQVJHUz4ge1xuICBwdWJsaWMgZ2V0VHlwZSgpOiBUeXBlPFBvaW50TGlnaHRIZWxwZXI+IHtcbiAgICByZXR1cm4gUG9pbnRMaWdodEhlbHBlcjtcbiAgfVxuXG4gIC8vIEB0cy1pZ25vcmVcbiAgcHVibGljIGdldCB0eXBlKCk6IChzdHJpbmcgfCAnUG9pbnRMaWdodEhlbHBlcicpIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5fb2JqUmVmPy50eXBlO1xuICB9XG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBzZXQgbGlnaHQodmFsdWU6IFBvaW50TGlnaHQpIHtcbiAgICBpZiAodGhpcy5fb2JqUmVmKSB7XG4gICAgICB0aGlzLl9vYmpSZWYubGlnaHQgPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICAvLyBAdHMtaWdub3JlXG4gIHB1YmxpYyBnZXQgbGlnaHQoKTogUG9pbnRMaWdodCB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuX29ialJlZj8ubGlnaHQ7XG4gIH1cbiAgQElucHV0KClcbiAgcHVibGljIHNldCBtYXRyaXgoXG4gICAgdmFsdWU6XG4gICAgICB8IE1hdHJpeDRcbiAgICAgIHwgW1xuICAgICAgICAgIG4xMTogbnVtYmVyLFxuICAgICAgICAgIG4xMjogbnVtYmVyLFxuICAgICAgICAgIG4xMzogbnVtYmVyLFxuICAgICAgICAgIG4xNDogbnVtYmVyLFxuICAgICAgICAgIG4yMTogbnVtYmVyLFxuICAgICAgICAgIG4yMjogbnVtYmVyLFxuICAgICAgICAgIG4yMzogbnVtYmVyLFxuICAgICAgICAgIG4yNDogbnVtYmVyLFxuICAgICAgICAgIG4zMTogbnVtYmVyLFxuICAgICAgICAgIG4zMjogbnVtYmVyLFxuICAgICAgICAgIG4zMzogbnVtYmVyLFxuICAgICAgICAgIG4zNDogbnVtYmVyLFxuICAgICAgICAgIG40MTogbnVtYmVyLFxuICAgICAgICAgIG40MjogbnVtYmVyLFxuICAgICAgICAgIG40MzogbnVtYmVyLFxuICAgICAgICAgIG40NDogbnVtYmVyXG4gICAgICAgIF1cbiAgKSB7XG4gICAgaWYgKHRoaXMuX29ialJlZikge1xuICAgICAgdGhpcy5fb2JqUmVmLm1hdHJpeCA9IGFwcGx5VmFsdWU8TWF0cml4ND4odGhpcy5fb2JqUmVmLm1hdHJpeCwgdmFsdWUpO1xuICAgIH1cbiAgfVxuICAvLyBAdHMtaWdub3JlXG4gIHB1YmxpYyBnZXQgbWF0cml4KCk6IE1hdHJpeDQgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLl9vYmpSZWY/Lm1hdHJpeDtcbiAgfVxuICBASW5wdXQoKVxuICBwdWJsaWMgc2V0IGNvbG9yKHZhbHVlOiBDb2xvclJlcHJlc2VudGF0aW9uIHwgdW5kZWZpbmVkKSB7XG4gICAgaWYgKHRoaXMuX29ialJlZikge1xuICAgICAgdGhpcy5fb2JqUmVmLmNvbG9yID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgLy8gQHRzLWlnbm9yZVxuICBwdWJsaWMgZ2V0IGNvbG9yKCk6IChDb2xvclJlcHJlc2VudGF0aW9uIHwgdW5kZWZpbmVkKSB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuX29ialJlZj8uY29sb3I7XG4gIH1cbiAgQElucHV0KClcbiAgcHVibGljIHNldCBtYXRyaXhBdXRvVXBkYXRlKHZhbHVlOiBib29sZWFuKSB7XG4gICAgaWYgKHRoaXMuX29ialJlZikge1xuICAgICAgdGhpcy5fb2JqUmVmLm1hdHJpeEF1dG9VcGRhdGUgPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICAvLyBAdHMtaWdub3JlXG4gIHB1YmxpYyBnZXQgbWF0cml4QXV0b1VwZGF0ZSgpOiBib29sZWFuIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5fb2JqUmVmPy5tYXRyaXhBdXRvVXBkYXRlO1xuICB9XG59XG4iXX0=