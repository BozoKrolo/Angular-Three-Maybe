/* eslint-disable @typescript-eslint/ban-types */
/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, forwardRef, Input } from '@angular/core';
import { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass';
import { ThPassBase } from '../ThPassBase';
import { applyValue } from '../util';
import { ThPass } from './ThPass';
import * as i0 from "@angular/core";
export class ThUnrealBloomPass extends ThPass {
    getType() {
        return UnrealBloomPass;
    }
    set resolution(value) {
        if (this._objRef) {
            this._objRef.resolution = applyValue(this._objRef.resolution, value);
        }
    }
    // @ts-ignore
    get resolution() {
        return this._objRef?.resolution;
    }
    set strength(value) {
        if (this._objRef) {
            this._objRef.strength = value;
        }
    }
    // @ts-ignore
    get strength() {
        return this._objRef?.strength;
    }
    set radius(value) {
        if (this._objRef) {
            this._objRef.radius = value;
        }
    }
    // @ts-ignore
    get radius() {
        return this._objRef?.radius;
    }
    set threshold(value) {
        if (this._objRef) {
            this._objRef.threshold = value;
        }
    }
    // @ts-ignore
    get threshold() {
        return this._objRef?.threshold;
    }
    set clearColor(value) {
        if (this._objRef) {
            this._objRef.clearColor = applyValue(this._objRef.clearColor, value);
        }
    }
    // @ts-ignore
    get clearColor() {
        return this._objRef?.clearColor;
    }
    set renderTargetsHorizontal(value) {
        if (this._objRef) {
            this._objRef.renderTargetsHorizontal = value;
        }
    }
    // @ts-ignore
    get renderTargetsHorizontal() {
        return this._objRef?.renderTargetsHorizontal;
    }
    set renderTargetsVertical(value) {
        if (this._objRef) {
            this._objRef.renderTargetsVertical = value;
        }
    }
    // @ts-ignore
    get renderTargetsVertical() {
        return this._objRef?.renderTargetsVertical;
    }
    set nMips(value) {
        if (this._objRef) {
            this._objRef.nMips = value;
        }
    }
    // @ts-ignore
    get nMips() {
        return this._objRef?.nMips;
    }
    set renderTargetBright(value) {
        if (this._objRef) {
            this._objRef.renderTargetBright = value;
        }
    }
    // @ts-ignore
    get renderTargetBright() {
        return this._objRef?.renderTargetBright;
    }
    set highPassUniforms(value) {
        if (this._objRef) {
            this._objRef.highPassUniforms = value;
        }
    }
    // @ts-ignore
    get highPassUniforms() {
        return this._objRef?.highPassUniforms;
    }
    set materialHighPassFilter(value) {
        if (this._objRef) {
            this._objRef.materialHighPassFilter = value;
        }
    }
    // @ts-ignore
    get materialHighPassFilter() {
        return this._objRef?.materialHighPassFilter;
    }
    set separableBlurMaterials(value) {
        if (this._objRef) {
            this._objRef.separableBlurMaterials = value;
        }
    }
    // @ts-ignore
    get separableBlurMaterials() {
        return this._objRef?.separableBlurMaterials;
    }
    set compositeMaterial(value) {
        if (this._objRef) {
            this._objRef.compositeMaterial = value;
        }
    }
    // @ts-ignore
    get compositeMaterial() {
        return this._objRef?.compositeMaterial;
    }
    set bloomTintColors(value) {
        if (this._objRef) {
            this._objRef.bloomTintColors = value;
        }
    }
    // @ts-ignore
    get bloomTintColors() {
        return this._objRef?.bloomTintColors;
    }
    set copyUniforms(value) {
        if (this._objRef) {
            this._objRef.copyUniforms = value;
        }
    }
    // @ts-ignore
    get copyUniforms() {
        return this._objRef?.copyUniforms;
    }
    set materialCopy(value) {
        if (this._objRef) {
            this._objRef.materialCopy = value;
        }
    }
    // @ts-ignore
    get materialCopy() {
        return this._objRef?.materialCopy;
    }
    set oldClearColor(value) {
        if (this._objRef) {
            this._objRef.oldClearColor = applyValue(this._objRef.oldClearColor, value);
        }
    }
    // @ts-ignore
    get oldClearColor() {
        return this._objRef?.oldClearColor;
    }
    set oldClearAlpha(value) {
        if (this._objRef) {
            this._objRef.oldClearAlpha = value;
        }
    }
    // @ts-ignore
    get oldClearAlpha() {
        return this._objRef?.oldClearAlpha;
    }
    set basic(value) {
        if (this._objRef) {
            this._objRef.basic = value;
        }
    }
    // @ts-ignore
    get basic() {
        return this._objRef?.basic;
    }
    set fsQuad(value) {
        if (this._objRef) {
            this._objRef.fsQuad = value;
        }
    }
    // @ts-ignore
    get fsQuad() {
        return this._objRef?.fsQuad;
    }
}
ThUnrealBloomPass.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThUnrealBloomPass, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThUnrealBloomPass.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.1", type: ThUnrealBloomPass, selector: "th-unrealBloomPass", inputs: { resolution: "resolution", strength: "strength", radius: "radius", threshold: "threshold", clearColor: "clearColor", renderTargetsHorizontal: "renderTargetsHorizontal", renderTargetsVertical: "renderTargetsVertical", nMips: "nMips", renderTargetBright: "renderTargetBright", highPassUniforms: "highPassUniforms", materialHighPassFilter: "materialHighPassFilter", separableBlurMaterials: "separableBlurMaterials", compositeMaterial: "compositeMaterial", bloomTintColors: "bloomTintColors", copyUniforms: "copyUniforms", materialCopy: "materialCopy", oldClearColor: "oldClearColor", oldClearAlpha: "oldClearAlpha", basic: "basic", fsQuad: "fsQuad" }, providers: [{ provide: ThPassBase, useExisting: forwardRef(() => ThUnrealBloomPass) }], usesInheritance: true, ngImport: i0, template: '<ng-content/>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThUnrealBloomPass, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-unrealBloomPass',
                    template: '<ng-content/>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [{ provide: ThPassBase, useExisting: forwardRef(() => ThUnrealBloomPass) }]
                }]
        }], propDecorators: { resolution: [{
                type: Input
            }], strength: [{
                type: Input
            }], radius: [{
                type: Input
            }], threshold: [{
                type: Input
            }], clearColor: [{
                type: Input
            }], renderTargetsHorizontal: [{
                type: Input
            }], renderTargetsVertical: [{
                type: Input
            }], nMips: [{
                type: Input
            }], renderTargetBright: [{
                type: Input
            }], highPassUniforms: [{
                type: Input
            }], materialHighPassFilter: [{
                type: Input
            }], separableBlurMaterials: [{
                type: Input
            }], compositeMaterial: [{
                type: Input
            }], bloomTintColors: [{
                type: Input
            }], copyUniforms: [{
                type: Input
            }], materialCopy: [{
                type: Input
            }], oldClearColor: [{
                type: Input
            }], oldClearAlpha: [{
                type: Input
            }], basic: [{
                type: Input
            }], fsQuad: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,