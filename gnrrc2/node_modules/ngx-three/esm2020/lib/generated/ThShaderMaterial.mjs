/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, forwardRef, Input } from '@angular/core';
import { ShaderMaterial } from 'three';
import { ThMaterial } from './ThMaterial';
import * as i0 from "@angular/core";
export class ThShaderMaterial extends ThMaterial {
    getType() {
        return ShaderMaterial;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    // @ts-ignore
    get type() {
        return this._objRef?.type;
    }
    set defines(value) {
        if (this._objRef) {
            this._objRef.defines = value;
        }
    }
    // @ts-ignore
    get defines() {
        return this._objRef?.defines;
    }
    set uniforms(value) {
        if (this._objRef) {
            this._objRef.uniforms = value;
        }
    }
    // @ts-ignore
    get uniforms() {
        return this._objRef?.uniforms;
    }
    set vertexShader(value) {
        if (this._objRef) {
            this._objRef.vertexShader = value;
        }
    }
    // @ts-ignore
    get vertexShader() {
        return this._objRef?.vertexShader;
    }
    set fragmentShader(value) {
        if (this._objRef) {
            this._objRef.fragmentShader = value;
        }
    }
    // @ts-ignore
    get fragmentShader() {
        return this._objRef?.fragmentShader;
    }
    set linewidth(value) {
        if (this._objRef) {
            this._objRef.linewidth = value;
        }
    }
    // @ts-ignore
    get linewidth() {
        return this._objRef?.linewidth;
    }
    set wireframe(value) {
        if (this._objRef) {
            this._objRef.wireframe = value;
        }
    }
    // @ts-ignore
    get wireframe() {
        return this._objRef?.wireframe;
    }
    set wireframeLinewidth(value) {
        if (this._objRef) {
            this._objRef.wireframeLinewidth = value;
        }
    }
    // @ts-ignore
    get wireframeLinewidth() {
        return this._objRef?.wireframeLinewidth;
    }
    set fog(value) {
        if (this._objRef) {
            this._objRef.fog = value;
        }
    }
    // @ts-ignore
    get fog() {
        return this._objRef?.fog;
    }
    set lights(value) {
        if (this._objRef) {
            this._objRef.lights = value;
        }
    }
    // @ts-ignore
    get lights() {
        return this._objRef?.lights;
    }
    set clipping(value) {
        if (this._objRef) {
            this._objRef.clipping = value;
        }
    }
    // @ts-ignore
    get clipping() {
        return this._objRef?.clipping;
    }
    set derivatives(value) {
        if (this._objRef) {
            this._objRef.derivatives = value;
        }
    }
    // @ts-ignore
    get derivatives() {
        return this._objRef?.derivatives;
    }
    set extensions(value) {
        if (this._objRef) {
            this._objRef.extensions = value;
        }
    }
    // @ts-ignore
    get extensions() {
        return this._objRef?.extensions;
    }
    set defaultAttributeValues(value) {
        if (this._objRef) {
            this._objRef.defaultAttributeValues = value;
        }
    }
    // @ts-ignore
    get defaultAttributeValues() {
        return this._objRef?.defaultAttributeValues;
    }
    set index0AttributeName(value) {
        if (this._objRef) {
            this._objRef.index0AttributeName = value;
        }
    }
    // @ts-ignore
    get index0AttributeName() {
        return this._objRef?.index0AttributeName;
    }
    set uniformsNeedUpdate(value) {
        if (this._objRef) {
            this._objRef.uniformsNeedUpdate = value;
        }
    }
    // @ts-ignore
    get uniformsNeedUpdate() {
        return this._objRef?.uniformsNeedUpdate;
    }
    set glslVersion(value) {
        if (this._objRef) {
            this._objRef.glslVersion = value;
        }
    }
    // @ts-ignore
    get glslVersion() {
        return this._objRef?.glslVersion;
    }
    set isShaderMaterial(value) {
        if (this._objRef) {
            this._objRef.isShaderMaterial = value;
        }
    }
    // @ts-ignore
    get isShaderMaterial() {
        return this._objRef?.isShaderMaterial;
    }
}
ThShaderMaterial.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThShaderMaterial, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThShaderMaterial.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.1", type: ThShaderMaterial, selector: "th-shaderMaterial", inputs: { type: "type", defines: "defines", uniforms: "uniforms", vertexShader: "vertexShader", fragmentShader: "fragmentShader", linewidth: "linewidth", wireframe: "wireframe", wireframeLinewidth: "wireframeLinewidth", fog: "fog", lights: "lights", clipping: "clipping", derivatives: "derivatives", extensions: "extensions", defaultAttributeValues: "defaultAttributeValues", index0AttributeName: "index0AttributeName", uniformsNeedUpdate: "uniformsNeedUpdate", glslVersion: "glslVersion", isShaderMaterial: "isShaderMaterial" }, providers: [{ provide: ThMaterial, useExisting: forwardRef(() => ThShaderMaterial) }], usesInheritance: true, ngImport: i0, template: '<ng-content/>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThShaderMaterial, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-shaderMaterial',
                    template: '<ng-content/>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [{ provide: ThMaterial, useExisting: forwardRef(() => ThShaderMaterial) }]
                }]
        }], propDecorators: { type: [{
                type: Input
            }], defines: [{
                type: Input
            }], uniforms: [{
                type: Input
            }], vertexShader: [{
                type: Input
            }], fragmentShader: [{
                type: Input
            }], linewidth: [{
                type: Input
            }], wireframe: [{
                type: Input
            }], wireframeLinewidth: [{
                type: Input
            }], fog: [{
                type: Input
            }], lights: [{
                type: Input
            }], clipping: [{
                type: Input
            }], derivatives: [{
                type: Input
            }], extensions: [{
                type: Input
            }], defaultAttributeValues: [{
                type: Input
            }], index0AttributeName: [{
                type: Input
            }], uniformsNeedUpdate: [{
                type: Input
            }], glslVersion: [{
                type: Input
            }], isShaderMaterial: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,