/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, forwardRef, Input } from '@angular/core';
import { Audio } from 'three';
import { ThObject3D } from './ThObject3D';
import * as i0 from "@angular/core";
export class ThAudio extends ThObject3D {
    getType() {
        return Audio;
    }
    // @ts-ignore
    get type() {
        return this._objRef?.type;
    }
    set listener(value) {
        if (this._objRef) {
            this._objRef.listener = value;
        }
    }
    // @ts-ignore
    get listener() {
        return this._objRef?.listener;
    }
    set context(value) {
        if (this._objRef) {
            this._objRef.context = value;
        }
    }
    // @ts-ignore
    get context() {
        return this._objRef?.context;
    }
    set gain(value) {
        if (this._objRef) {
            this._objRef.gain = value;
        }
    }
    // @ts-ignore
    get gain() {
        return this._objRef?.gain;
    }
    set autoplay(value) {
        if (this._objRef) {
            this._objRef.autoplay = value;
        }
    }
    // @ts-ignore
    get autoplay() {
        return this._objRef?.autoplay;
    }
    set buffer(value) {
        if (this._objRef) {
            this._objRef.buffer = value;
        }
    }
    // @ts-ignore
    get buffer() {
        return this._objRef?.buffer;
    }
    set detune(value) {
        if (this._objRef) {
            this._objRef.detune = value;
        }
    }
    // @ts-ignore
    get detune() {
        return this._objRef?.detune;
    }
    set loop(value) {
        if (this._objRef) {
            this._objRef.loop = value;
        }
    }
    // @ts-ignore
    get loop() {
        return this._objRef?.loop;
    }
    set loopStart(value) {
        if (this._objRef) {
            this._objRef.loopStart = value;
        }
    }
    // @ts-ignore
    get loopStart() {
        return this._objRef?.loopStart;
    }
    set loopEnd(value) {
        if (this._objRef) {
            this._objRef.loopEnd = value;
        }
    }
    // @ts-ignore
    get loopEnd() {
        return this._objRef?.loopEnd;
    }
    set offset(value) {
        if (this._objRef) {
            this._objRef.offset = value;
        }
    }
    // @ts-ignore
    get offset() {
        return this._objRef?.offset;
    }
    set duration(value) {
        if (this._objRef) {
            this._objRef.duration = value;
        }
    }
    // @ts-ignore
    get duration() {
        return this._objRef?.duration;
    }
    set playbackRate(value) {
        if (this._objRef) {
            this._objRef.playbackRate = value;
        }
    }
    // @ts-ignore
    get playbackRate() {
        return this._objRef?.playbackRate;
    }
    set isPlaying(value) {
        if (this._objRef) {
            this._objRef.isPlaying = value;
        }
    }
    // @ts-ignore
    get isPlaying() {
        return this._objRef?.isPlaying;
    }
    set hasPlaybackControl(value) {
        if (this._objRef) {
            this._objRef.hasPlaybackControl = value;
        }
    }
    // @ts-ignore
    get hasPlaybackControl() {
        return this._objRef?.hasPlaybackControl;
    }
    set sourceType(value) {
        if (this._objRef) {
            this._objRef.sourceType = value;
        }
    }
    // @ts-ignore
    get sourceType() {
        return this._objRef?.sourceType;
    }
    set source(value) {
        if (this._objRef) {
            this._objRef.source = value;
        }
    }
    // @ts-ignore
    get source() {
        return this._objRef?.source;
    }
    set filters(value) {
        if (this._objRef) {
            this._objRef.filters = value;
        }
    }
    // @ts-ignore
    get filters() {
        return this._objRef?.filters;
    }
}
ThAudio.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThAudio, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThAudio.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.1", type: ThAudio, selector: "th-audio", inputs: { listener: "listener", context: "context", gain: "gain", autoplay: "autoplay", buffer: "buffer", detune: "detune", loop: "loop", loopStart: "loopStart", loopEnd: "loopEnd", offset: "offset", duration: "duration", playbackRate: "playbackRate", isPlaying: "isPlaying", hasPlaybackControl: "hasPlaybackControl", sourceType: "sourceType", source: "source", filters: "filters" }, providers: [{ provide: ThObject3D, useExisting: forwardRef(() => ThAudio) }], usesInheritance: true, ngImport: i0, template: '<ng-content/>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThAudio, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-audio',
                    template: '<ng-content/>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [{ provide: ThObject3D, useExisting: forwardRef(() => ThAudio) }]
                }]
        }], propDecorators: { listener: [{
                type: Input
            }], context: [{
                type: Input
            }], gain: [{
                type: Input
            }], autoplay: [{
                type: Input
            }], buffer: [{
                type: Input
            }], detune: [{
                type: Input
            }], loop: [{
                type: Input
            }], loopStart: [{
                type: Input
            }], loopEnd: [{
                type: Input
            }], offset: [{
                type: Input
            }], duration: [{
                type: Input
            }], playbackRate: [{
                type: Input
            }], isPlaying: [{
                type: Input
            }], hasPlaybackControl: [{
                type: Input
            }], sourceType: [{
                type: Input
            }], source: [{
                type: Input
            }], filters: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,