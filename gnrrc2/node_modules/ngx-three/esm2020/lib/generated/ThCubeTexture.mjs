/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, forwardRef, Input } from '@angular/core';
import { CubeTexture } from 'three';
import { ThTextureBase } from '../ThTextureBase';
import { ThTexture } from './ThTexture';
import * as i0 from "@angular/core";
export class ThCubeTexture extends ThTexture {
    getType() {
        return CubeTexture;
    }
    // @ts-ignore
    get isCubeTexture() {
        return this._objRef?.isCubeTexture;
    }
    set mapping(value) {
        if (this._objRef) {
            this._objRef.mapping = value;
        }
    }
    // @ts-ignore
    get mapping() {
        return this._objRef?.mapping;
    }
    set flipY(value) {
        if (this._objRef) {
            this._objRef.flipY = value;
        }
    }
    // @ts-ignore
    get flipY() {
        return this._objRef?.flipY;
    }
}
ThCubeTexture.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThCubeTexture, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThCubeTexture.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.1", type: ThCubeTexture, selector: "th-cubeTexture", inputs: { mapping: "mapping", flipY: "flipY" }, providers: [{ provide: ThTextureBase, useExisting: forwardRef(() => ThCubeTexture) }], usesInheritance: true, ngImport: i0, template: '<ng-content/>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThCubeTexture, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-cubeTexture',
                    template: '<ng-content/>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [{ provide: ThTextureBase, useExisting: forwardRef(() => ThCubeTexture) }]
                }]
        }], propDecorators: { mapping: [{
                type: Input
            }], flipY: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGhDdWJlVGV4dHVyZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC10aHJlZS9zcmMvbGliL2dlbmVyYXRlZC9UaEN1YmVUZXh0dXJlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHlEQUF5RDtBQUN6RCx5Q0FBeUM7QUFDekMscUlBQXFJO0FBQ3JJLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBUSxNQUFNLGVBQWUsQ0FBQztBQUM1RixPQUFPLEVBQ0wsV0FBVyxFQVFaLE1BQU0sT0FBTyxDQUFDO0FBQ2YsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxhQUFhLENBQUM7O0FBUXhDLE1BQU0sT0FBTyxhQWNYLFNBQVEsU0FBbUI7SUFDcEIsT0FBTztRQUNaLE9BQU8sV0FBVyxDQUFDO0lBQ3JCLENBQUM7SUFFRCxhQUFhO0lBQ2IsSUFBVyxhQUFhO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLE9BQU8sRUFBRSxhQUFhLENBQUM7SUFDckMsQ0FBQztJQUNELElBQ1csT0FBTyxDQUFDLEtBQXlCO1FBQzFDLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7U0FDOUI7SUFDSCxDQUFDO0lBRUQsYUFBYTtJQUNiLElBQVcsT0FBTztRQUNoQixPQUFPLElBQUksQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDO0lBQy9CLENBQUM7SUFDRCxJQUNXLEtBQUssQ0FBQyxLQUFjO1FBQzdCLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7U0FDNUI7SUFDSCxDQUFDO0lBRUQsYUFBYTtJQUNiLElBQVcsS0FBSztRQUNkLE9BQU8sSUFBSSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUM7SUFDN0IsQ0FBQzs7MEdBNUNVLGFBQWE7OEZBQWIsYUFBYSx5RkFGYixDQUFDLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsaURBRjNFLGVBQWU7MkZBSWQsYUFBYTtrQkFOekIsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsZ0JBQWdCO29CQUMxQixRQUFRLEVBQUUsZUFBZTtvQkFDekIsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07b0JBQy9DLFNBQVMsRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxjQUFjLENBQUMsRUFBRSxDQUFDO2lCQUN0Rjs4QkF5QlksT0FBTztzQkFEakIsS0FBSztnQkFZSyxLQUFLO3NCQURmLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb24gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVyc2NvcmUtZGFuZ2xlICovXG4vKiBlc2xpbnQtZGlzYWJsZSBAYW5ndWxhci1lc2xpbnQvY29tcG9uZW50LXNlbGVjdG9yLCBAYW5ndWxhci1lc2xpbnQvY29tcG9uZW50LWNsYXNzLXN1ZmZpeCwganNkb2Mvbm8tdHlwZXMsIGltcG9ydC9uby1kZXByZWNhdGVkICovXG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBmb3J3YXJkUmVmLCBJbnB1dCwgVHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgQ3ViZVRleHR1cmUsXG4gIEN1YmVUZXh0dXJlTWFwcGluZyxcbiAgTWFnbmlmaWNhdGlvblRleHR1cmVGaWx0ZXIsXG4gIE1pbmlmaWNhdGlvblRleHR1cmVGaWx0ZXIsXG4gIFBpeGVsRm9ybWF0LFxuICBUZXh0dXJlRGF0YVR5cGUsXG4gIFRleHR1cmVFbmNvZGluZyxcbiAgV3JhcHBpbmdcbn0gZnJvbSAndGhyZWUnO1xuaW1wb3J0IHsgVGhUZXh0dXJlQmFzZSB9IGZyb20gJy4uL1RoVGV4dHVyZUJhc2UnO1xuaW1wb3J0IHsgVGhUZXh0dXJlIH0gZnJvbSAnLi9UaFRleHR1cmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd0aC1jdWJlVGV4dHVyZScsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQvPicsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBwcm92aWRlcnM6IFt7IHByb3ZpZGU6IFRoVGV4dHVyZUJhc2UsIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IFRoQ3ViZVRleHR1cmUpIH1dXG59KVxuZXhwb3J0IGNsYXNzIFRoQ3ViZVRleHR1cmU8XG4gIFQgZXh0ZW5kcyBDdWJlVGV4dHVyZSA9IEN1YmVUZXh0dXJlLFxuICBUQVJHUyA9IFtcbiAgICBpbWFnZXM/OiBhbnlbXSxcbiAgICBtYXBwaW5nPzogQ3ViZVRleHR1cmVNYXBwaW5nLFxuICAgIHdyYXBTPzogV3JhcHBpbmcsXG4gICAgd3JhcFQ/OiBXcmFwcGluZyxcbiAgICBtYWdGaWx0ZXI/OiBNYWduaWZpY2F0aW9uVGV4dHVyZUZpbHRlcixcbiAgICBtaW5GaWx0ZXI/OiBNaW5pZmljYXRpb25UZXh0dXJlRmlsdGVyLFxuICAgIGZvcm1hdD86IFBpeGVsRm9ybWF0LFxuICAgIHR5cGU/OiBUZXh0dXJlRGF0YVR5cGUsXG4gICAgYW5pc290cm9weT86IG51bWJlcixcbiAgICBlbmNvZGluZz86IFRleHR1cmVFbmNvZGluZ1xuICBdXG4+IGV4dGVuZHMgVGhUZXh0dXJlPFQsIFRBUkdTPiB7XG4gIHB1YmxpYyBnZXRUeXBlKCk6IFR5cGU8Q3ViZVRleHR1cmU+IHtcbiAgICByZXR1cm4gQ3ViZVRleHR1cmU7XG4gIH1cblxuICAvLyBAdHMtaWdub3JlXG4gIHB1YmxpYyBnZXQgaXNDdWJlVGV4dHVyZSgpOiB0cnVlIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5fb2JqUmVmPy5pc0N1YmVUZXh0dXJlO1xuICB9XG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBzZXQgbWFwcGluZyh2YWx1ZTogQ3ViZVRleHR1cmVNYXBwaW5nKSB7XG4gICAgaWYgKHRoaXMuX29ialJlZikge1xuICAgICAgdGhpcy5fb2JqUmVmLm1hcHBpbmcgPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICAvLyBAdHMtaWdub3JlXG4gIHB1YmxpYyBnZXQgbWFwcGluZygpOiBDdWJlVGV4dHVyZU1hcHBpbmcgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLl9vYmpSZWY/Lm1hcHBpbmc7XG4gIH1cbiAgQElucHV0KClcbiAgcHVibGljIHNldCBmbGlwWSh2YWx1ZTogYm9vbGVhbikge1xuICAgIGlmICh0aGlzLl9vYmpSZWYpIHtcbiAgICAgIHRoaXMuX29ialJlZi5mbGlwWSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIC8vIEB0cy1pZ25vcmVcbiAgcHVibGljIGdldCBmbGlwWSgpOiBib29sZWFuIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5fb2JqUmVmPy5mbGlwWTtcbiAgfVxufVxuIl19