/* eslint-disable @typescript-eslint/ban-types */
/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, forwardRef, Input } from '@angular/core';
import { SMAAPass } from 'three/examples/jsm/postprocessing/SMAAPass';
import { ThPassBase } from '../ThPassBase';
import { ThPass } from './ThPass';
import * as i0 from "@angular/core";
export class ThSMAAPass extends ThPass {
    getType() {
        return SMAAPass;
    }
    set edgesRT(value) {
        if (this._objRef) {
            this._objRef.edgesRT = value;
        }
    }
    // @ts-ignore
    get edgesRT() {
        return this._objRef?.edgesRT;
    }
    set weightsRT(value) {
        if (this._objRef) {
            this._objRef.weightsRT = value;
        }
    }
    // @ts-ignore
    get weightsRT() {
        return this._objRef?.weightsRT;
    }
    set areaTexture(value) {
        if (this._objRef) {
            this._objRef.areaTexture = value;
        }
    }
    // @ts-ignore
    get areaTexture() {
        return this._objRef?.areaTexture;
    }
    set searchTexture(value) {
        if (this._objRef) {
            this._objRef.searchTexture = value;
        }
    }
    // @ts-ignore
    get searchTexture() {
        return this._objRef?.searchTexture;
    }
    set uniformsEdges(value) {
        if (this._objRef) {
            this._objRef.uniformsEdges = value;
        }
    }
    // @ts-ignore
    get uniformsEdges() {
        return this._objRef?.uniformsEdges;
    }
    set materialEdges(value) {
        if (this._objRef) {
            this._objRef.materialEdges = value;
        }
    }
    // @ts-ignore
    get materialEdges() {
        return this._objRef?.materialEdges;
    }
    set uniformsWeights(value) {
        if (this._objRef) {
            this._objRef.uniformsWeights = value;
        }
    }
    // @ts-ignore
    get uniformsWeights() {
        return this._objRef?.uniformsWeights;
    }
    set materialWeights(value) {
        if (this._objRef) {
            this._objRef.materialWeights = value;
        }
    }
    // @ts-ignore
    get materialWeights() {
        return this._objRef?.materialWeights;
    }
    set uniformsBlend(value) {
        if (this._objRef) {
            this._objRef.uniformsBlend = value;
        }
    }
    // @ts-ignore
    get uniformsBlend() {
        return this._objRef?.uniformsBlend;
    }
    set materialBlend(value) {
        if (this._objRef) {
            this._objRef.materialBlend = value;
        }
    }
    // @ts-ignore
    get materialBlend() {
        return this._objRef?.materialBlend;
    }
    set fsQuad(value) {
        if (this._objRef) {
            this._objRef.fsQuad = value;
        }
    }
    // @ts-ignore
    get fsQuad() {
        return this._objRef?.fsQuad;
    }
}
ThSMAAPass.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThSMAAPass, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThSMAAPass.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.1", type: ThSMAAPass, selector: "th-sMAAPass", inputs: { edgesRT: "edgesRT", weightsRT: "weightsRT", areaTexture: "areaTexture", searchTexture: "searchTexture", uniformsEdges: "uniformsEdges", materialEdges: "materialEdges", uniformsWeights: "uniformsWeights", materialWeights: "materialWeights", uniformsBlend: "uniformsBlend", materialBlend: "materialBlend", fsQuad: "fsQuad" }, providers: [{ provide: ThPassBase, useExisting: forwardRef(() => ThSMAAPass) }], usesInheritance: true, ngImport: i0, template: '<ng-content/>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThSMAAPass, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-sMAAPass',
                    template: '<ng-content/>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [{ provide: ThPassBase, useExisting: forwardRef(() => ThSMAAPass) }]
                }]
        }], propDecorators: { edgesRT: [{
                type: Input
            }], weightsRT: [{
                type: Input
            }], areaTexture: [{
                type: Input
            }], searchTexture: [{
                type: Input
            }], uniformsEdges: [{
                type: Input
            }], materialEdges: [{
                type: Input
            }], uniformsWeights: [{
                type: Input
            }], materialWeights: [{
                type: Input
            }], uniformsBlend: [{
                type: Input
            }], materialBlend: [{
                type: Input
            }], fsQuad: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,