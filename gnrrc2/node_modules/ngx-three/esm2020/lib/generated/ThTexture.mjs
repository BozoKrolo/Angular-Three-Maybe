/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, forwardRef, Input } from '@angular/core';
import { Texture } from 'three';
import { ThTextureBase } from '../ThTextureBase';
import { applyValue } from '../util';
import * as i0 from "@angular/core";
export class ThTexture extends ThTextureBase {
    getType() {
        return Texture;
    }
    // @ts-ignore
    get isTexture() {
        return this._objRef?.isTexture;
    }
    // @ts-ignore
    get id() {
        return this._objRef?.id;
    }
    set uuid(value) {
        if (this._objRef) {
            this._objRef.uuid = value;
        }
    }
    // @ts-ignore
    get uuid() {
        return this._objRef?.uuid;
    }
    set name(value) {
        if (this._objRef) {
            this._objRef.name = value;
        }
    }
    // @ts-ignore
    get name() {
        return this._objRef?.name;
    }
    set source(value) {
        if (this._objRef) {
            this._objRef.source = value;
        }
    }
    // @ts-ignore
    get source() {
        return this._objRef?.source;
    }
    set mipmaps(value) {
        if (this._objRef) {
            this._objRef.mipmaps = value;
        }
    }
    // @ts-ignore
    get mipmaps() {
        return this._objRef?.mipmaps;
    }
    set mapping(value) {
        if (this._objRef) {
            this._objRef.mapping = value;
        }
    }
    // @ts-ignore
    get mapping() {
        return this._objRef?.mapping;
    }
    set channel(value) {
        if (this._objRef) {
            this._objRef.channel = value;
        }
    }
    // @ts-ignore
    get channel() {
        return this._objRef?.channel;
    }
    set wrapS(value) {
        if (this._objRef) {
            this._objRef.wrapS = value;
        }
    }
    // @ts-ignore
    get wrapS() {
        return this._objRef?.wrapS;
    }
    set wrapT(value) {
        if (this._objRef) {
            this._objRef.wrapT = value;
        }
    }
    // @ts-ignore
    get wrapT() {
        return this._objRef?.wrapT;
    }
    set magFilter(value) {
        if (this._objRef) {
            this._objRef.magFilter = value;
        }
    }
    // @ts-ignore
    get magFilter() {
        return this._objRef?.magFilter;
    }
    set minFilter(value) {
        if (this._objRef) {
            this._objRef.minFilter = value;
        }
    }
    // @ts-ignore
    get minFilter() {
        return this._objRef?.minFilter;
    }
    set anisotropy(value) {
        if (this._objRef) {
            this._objRef.anisotropy = value;
        }
    }
    // @ts-ignore
    get anisotropy() {
        return this._objRef?.anisotropy;
    }
    set format(value) {
        if (this._objRef) {
            this._objRef.format = value;
        }
    }
    // @ts-ignore
    get format() {
        return this._objRef?.format;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    // @ts-ignore
    get type() {
        return this._objRef?.type;
    }
    set internalFormat(value) {
        if (this._objRef) {
            this._objRef.internalFormat = value;
        }
    }
    // @ts-ignore
    get internalFormat() {
        return this._objRef?.internalFormat;
    }
    set matrix(value) {
        if (this._objRef) {
            this._objRef.matrix = applyValue(this._objRef.matrix, value);
        }
    }
    // @ts-ignore
    get matrix() {
        return this._objRef?.matrix;
    }
    set matrixAutoUpdate(value) {
        if (this._objRef) {
            this._objRef.matrixAutoUpdate = value;
        }
    }
    // @ts-ignore
    get matrixAutoUpdate() {
        return this._objRef?.matrixAutoUpdate;
    }
    set offset(value) {
        if (this._objRef) {
            this._objRef.offset = applyValue(this._objRef.offset, value);
        }
    }
    // @ts-ignore
    get offset() {
        return this._objRef?.offset;
    }
    set repeat(value) {
        if (this._objRef) {
            this._objRef.repeat = applyValue(this._objRef.repeat, value);
        }
    }
    // @ts-ignore
    get repeat() {
        return this._objRef?.repeat;
    }
    set center(value) {
        if (this._objRef) {
            this._objRef.center = applyValue(this._objRef.center, value);
        }
    }
    // @ts-ignore
    get center() {
        return this._objRef?.center;
    }
    set rotation(value) {
        if (this._objRef) {
            this._objRef.rotation = value;
        }
    }
    // @ts-ignore
    get rotation() {
        return this._objRef?.rotation;
    }
    set generateMipmaps(value) {
        if (this._objRef) {
            this._objRef.generateMipmaps = value;
        }
    }
    // @ts-ignore
    get generateMipmaps() {
        return this._objRef?.generateMipmaps;
    }
    set premultiplyAlpha(value) {
        if (this._objRef) {
            this._objRef.premultiplyAlpha = value;
        }
    }
    // @ts-ignore
    get premultiplyAlpha() {
        return this._objRef?.premultiplyAlpha;
    }
    set flipY(value) {
        if (this._objRef) {
            this._objRef.flipY = value;
        }
    }
    // @ts-ignore
    get flipY() {
        return this._objRef?.flipY;
    }
    set unpackAlignment(value) {
        if (this._objRef) {
            this._objRef.unpackAlignment = value;
        }
    }
    // @ts-ignore
    get unpackAlignment() {
        return this._objRef?.unpackAlignment;
    }
    set encoding(value) {
        if (this._objRef) {
            this._objRef.encoding = value;
        }
    }
    // @ts-ignore
    get encoding() {
        return this._objRef?.encoding;
    }
    set isRenderTargetTexture(value) {
        if (this._objRef) {
            this._objRef.isRenderTargetTexture = value;
        }
    }
    // @ts-ignore
    get isRenderTargetTexture() {
        return this._objRef?.isRenderTargetTexture;
    }
    set needsPMREMUpdate(value) {
        if (this._objRef) {
            this._objRef.needsPMREMUpdate = value;
        }
    }
    // @ts-ignore
    get needsPMREMUpdate() {
        return this._objRef?.needsPMREMUpdate;
    }
    set userData(value) {
        if (this._objRef) {
            this._objRef.userData = value;
        }
    }
    // @ts-ignore
    get userData() {
        return this._objRef?.userData;
    }
    set version(value) {
        if (this._objRef) {
            this._objRef.version = value;
        }
    }
    // @ts-ignore
    get version() {
        return this._objRef?.version;
    }
}
ThTexture.DEFAULT_ANISOTROPY = Texture.DEFAULT_ANISOTROPY;
ThTexture.DEFAULT_IMAGE = Texture.DEFAULT_IMAGE;
ThTexture.DEFAULT_MAPPING = Texture.DEFAULT_MAPPING;
ThTexture.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThTexture, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThTexture.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.1", type: ThTexture, selector: "th-texture", inputs: { uuid: "uuid", name: "name", source: "source", mipmaps: "mipmaps", mapping: "mapping", channel: "channel", wrapS: "wrapS", wrapT: "wrapT", magFilter: "magFilter", minFilter: "minFilter", anisotropy: "anisotropy", format: "format", type: "type", internalFormat: "internalFormat", matrix: "matrix", matrixAutoUpdate: "matrixAutoUpdate", offset: "offset", repeat: "repeat", center: "center", rotation: "rotation", generateMipmaps: "generateMipmaps", premultiplyAlpha: "premultiplyAlpha", flipY: "flipY", unpackAlignment: "unpackAlignment", encoding: "encoding", isRenderTargetTexture: "isRenderTargetTexture", needsPMREMUpdate: "needsPMREMUpdate", userData: "userData", version: "version" }, providers: [{ provide: ThTextureBase, useExisting: forwardRef(() => ThTexture) }], usesInheritance: true, ngImport: i0, template: '<ng-content/>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThTexture, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-texture',
                    template: '<ng-content/>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [{ provide: ThTextureBase, useExisting: forwardRef(() => ThTexture) }]
                }]
        }], propDecorators: { uuid: [{
                type: Input
            }], name: [{
                type: Input
            }], source: [{
                type: Input
            }], mipmaps: [{
                type: Input
            }], mapping: [{
                type: Input
            }], channel: [{
                type: Input
            }], wrapS: [{
                type: Input
            }], wrapT: [{
                type: Input
            }], magFilter: [{
                type: Input
            }], minFilter: [{
                type: Input
            }], anisotropy: [{
                type: Input
            }], format: [{
                type: Input
            }], type: [{
                type: Input
            }], internalFormat: [{
                type: Input
            }], matrix: [{
                type: Input
            }], matrixAutoUpdate: [{
                type: Input
            }], offset: [{
                type: Input
            }], repeat: [{
                type: Input
            }], center: [{
                type: Input
            }], rotation: [{
                type: Input
            }], generateMipmaps: [{
                type: Input
            }], premultiplyAlpha: [{
                type: Input
            }], flipY: [{
                type: Input
            }], unpackAlignment: [{
                type: Input
            }], encoding: [{
                type: Input
            }], isRenderTargetTexture: [{
                type: Input
            }], needsPMREMUpdate: [{
                type: Input
            }], userData: [{
                type: Input
            }], version: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,