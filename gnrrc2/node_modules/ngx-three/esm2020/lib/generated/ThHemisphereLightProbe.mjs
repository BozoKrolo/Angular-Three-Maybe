/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, forwardRef } from '@angular/core';
import { HemisphereLightProbe } from 'three';
import { ThLightProbe } from './ThLightProbe';
import { ThObject3D } from './ThObject3D';
import * as i0 from "@angular/core";
export class ThHemisphereLightProbe extends ThLightProbe {
    getType() {
        return HemisphereLightProbe;
    }
    // @ts-ignore
    get isHemisphereLightProbe() {
        return this._objRef?.isHemisphereLightProbe;
    }
}
ThHemisphereLightProbe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThHemisphereLightProbe, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThHemisphereLightProbe.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.1", type: ThHemisphereLightProbe, selector: "th-hemisphereLightProbe", providers: [
        {
            provide: ThObject3D,
            useExisting: forwardRef(() => ThHemisphereLightProbe)
        }
    ], usesInheritance: true, ngImport: i0, template: '<ng-content/>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThHemisphereLightProbe, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-hemisphereLightProbe',
                    template: '<ng-content/>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThObject3D,
                            useExisting: forwardRef(() => ThHemisphereLightProbe)
                        }
                    ]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGhIZW1pc3BoZXJlTGlnaHRQcm9iZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC10aHJlZS9zcmMvbGliL2dlbmVyYXRlZC9UaEhlbWlzcGhlcmVMaWdodFByb2JlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHlEQUF5RDtBQUN6RCx5Q0FBeUM7QUFDekMscUlBQXFJO0FBQ3JJLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFRLE1BQU0sZUFBZSxDQUFDO0FBQ3JGLE9BQU8sRUFBdUIsb0JBQW9CLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFDbEUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxjQUFjLENBQUM7O0FBYTFDLE1BQU0sT0FBTyxzQkFHWCxTQUFRLFlBQXNCO0lBQ3ZCLE9BQU87UUFDWixPQUFPLG9CQUFvQixDQUFDO0lBQzlCLENBQUM7SUFFRCxhQUFhO0lBQ2IsSUFBVyxzQkFBc0I7UUFDL0IsT0FBTyxJQUFJLENBQUMsT0FBTyxFQUFFLHNCQUFzQixDQUFDO0lBQzlDLENBQUM7O21IQVhVLHNCQUFzQjt1R0FBdEIsc0JBQXNCLGtEQVB0QjtRQUNUO1lBQ0UsT0FBTyxFQUFFLFVBQVU7WUFDbkIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQztTQUN0RDtLQUNGLGlEQVBTLGVBQWU7MkZBU2Qsc0JBQXNCO2tCQVhsQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSx5QkFBeUI7b0JBQ25DLFFBQVEsRUFBRSxlQUFlO29CQUN6QixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsU0FBUyxFQUFFO3dCQUNUOzRCQUNFLE9BQU8sRUFBRSxVQUFVOzRCQUNuQixXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSx1QkFBdUIsQ0FBQzt5QkFDdEQ7cUJBQ0Y7aUJBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb24gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVyc2NvcmUtZGFuZ2xlICovXG4vKiBlc2xpbnQtZGlzYWJsZSBAYW5ndWxhci1lc2xpbnQvY29tcG9uZW50LXNlbGVjdG9yLCBAYW5ndWxhci1lc2xpbnQvY29tcG9uZW50LWNsYXNzLXN1ZmZpeCwganNkb2Mvbm8tdHlwZXMsIGltcG9ydC9uby1kZXByZWNhdGVkICovXG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBmb3J3YXJkUmVmLCBUeXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb2xvclJlcHJlc2VudGF0aW9uLCBIZW1pc3BoZXJlTGlnaHRQcm9iZSB9IGZyb20gJ3RocmVlJztcbmltcG9ydCB7IFRoTGlnaHRQcm9iZSB9IGZyb20gJy4vVGhMaWdodFByb2JlJztcbmltcG9ydCB7IFRoT2JqZWN0M0QgfSBmcm9tICcuL1RoT2JqZWN0M0QnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd0aC1oZW1pc3BoZXJlTGlnaHRQcm9iZScsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQvPicsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBUaE9iamVjdDNELFxuICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gVGhIZW1pc3BoZXJlTGlnaHRQcm9iZSlcbiAgICB9XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgVGhIZW1pc3BoZXJlTGlnaHRQcm9iZTxcbiAgVCBleHRlbmRzIEhlbWlzcGhlcmVMaWdodFByb2JlID0gSGVtaXNwaGVyZUxpZ2h0UHJvYmUsXG4gIFRBUkdTID0gW3NreUNvbG9yPzogQ29sb3JSZXByZXNlbnRhdGlvbiwgZ3JvdW5kQ29sb3I/OiBDb2xvclJlcHJlc2VudGF0aW9uLCBpbnRlbnNpdHk/OiBudW1iZXJdXG4+IGV4dGVuZHMgVGhMaWdodFByb2JlPFQsIFRBUkdTPiB7XG4gIHB1YmxpYyBnZXRUeXBlKCk6IFR5cGU8SGVtaXNwaGVyZUxpZ2h0UHJvYmU+IHtcbiAgICByZXR1cm4gSGVtaXNwaGVyZUxpZ2h0UHJvYmU7XG4gIH1cblxuICAvLyBAdHMtaWdub3JlXG4gIHB1YmxpYyBnZXQgaXNIZW1pc3BoZXJlTGlnaHRQcm9iZSgpOiB0cnVlIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5fb2JqUmVmPy5pc0hlbWlzcGhlcmVMaWdodFByb2JlO1xuICB9XG59XG4iXX0=