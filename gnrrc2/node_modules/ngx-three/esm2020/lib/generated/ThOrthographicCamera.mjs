/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, forwardRef, Input } from '@angular/core';
import { OrthographicCamera } from 'three';
import { ThCamera } from './ThCamera';
import { ThObject3D } from './ThObject3D';
import * as i0 from "@angular/core";
export class ThOrthographicCamera extends ThCamera {
    getType() {
        return OrthographicCamera;
    }
    // @ts-ignore
    get isOrthographicCamera() {
        return this._objRef?.isOrthographicCamera;
    }
    // @ts-ignore
    get type() {
        return this._objRef?.type;
    }
    set zoom(value) {
        if (this._objRef) {
            this._objRef.zoom = value;
        }
    }
    // @ts-ignore
    get zoom() {
        return this._objRef?.zoom;
    }
    set view(value) {
        if (this._objRef) {
            this._objRef.view = value;
        }
    }
    // @ts-ignore
    get view() {
        return this._objRef?.view;
    }
    set left(value) {
        if (this._objRef) {
            this._objRef.left = value;
        }
    }
    // @ts-ignore
    get left() {
        return this._objRef?.left;
    }
    set right(value) {
        if (this._objRef) {
            this._objRef.right = value;
        }
    }
    // @ts-ignore
    get right() {
        return this._objRef?.right;
    }
    set top(value) {
        if (this._objRef) {
            this._objRef.top = value;
        }
    }
    // @ts-ignore
    get top() {
        return this._objRef?.top;
    }
    set bottom(value) {
        if (this._objRef) {
            this._objRef.bottom = value;
        }
    }
    // @ts-ignore
    get bottom() {
        return this._objRef?.bottom;
    }
    set near(value) {
        if (this._objRef) {
            this._objRef.near = value;
        }
    }
    // @ts-ignore
    get near() {
        return this._objRef?.near;
    }
    set far(value) {
        if (this._objRef) {
            this._objRef.far = value;
        }
    }
    // @ts-ignore
    get far() {
        return this._objRef?.far;
    }
}
ThOrthographicCamera.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThOrthographicCamera, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThOrthographicCamera.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.1", type: ThOrthographicCamera, selector: "th-orthographicCamera", inputs: { zoom: "zoom", view: "view", left: "left", right: "right", top: "top", bottom: "bottom", near: "near", far: "far" }, providers: [
        {
            provide: ThObject3D,
            useExisting: forwardRef(() => ThOrthographicCamera)
        },
        { provide: ThCamera, useExisting: forwardRef(() => ThOrthographicCamera) }
    ], usesInheritance: true, ngImport: i0, template: '<ng-content/>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThOrthographicCamera, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-orthographicCamera',
                    template: '<ng-content/>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThObject3D,
                            useExisting: forwardRef(() => ThOrthographicCamera)
                        },
                        { provide: ThCamera, useExisting: forwardRef(() => ThOrthographicCamera) }
                    ]
                }]
        }], propDecorators: { zoom: [{
                type: Input
            }], view: [{
                type: Input
            }], left: [{
                type: Input
            }], right: [{
                type: Input
            }], top: [{
                type: Input
            }], bottom: [{
                type: Input
            }], near: [{
                type: Input
            }], far: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,