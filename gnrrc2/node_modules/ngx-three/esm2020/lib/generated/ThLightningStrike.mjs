/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, forwardRef, Input } from '@angular/core';
import { LightningStrike } from 'three/examples/jsm/geometries/LightningStrike';
import { ThBufferGeometry } from './ThBufferGeometry';
import * as i0 from "@angular/core";
export class ThLightningStrike extends ThBufferGeometry {
    getType() {
        return LightningStrike;
    }
    set state(value) {
        if (this._objRef) {
            this._objRef.state = value;
        }
    }
    // @ts-ignore
    get state() {
        return this._objRef?.state;
    }
}
ThLightningStrike.RAY_INITIALIZED = LightningStrike.RAY_INITIALIZED;
ThLightningStrike.RAY_UNBORN = LightningStrike.RAY_UNBORN;
ThLightningStrike.RAY_PROPAGATING = LightningStrike.RAY_PROPAGATING;
ThLightningStrike.RAY_STEADY = LightningStrike.RAY_STEADY;
ThLightningStrike.RAY_VANISHING = LightningStrike.RAY_VANISHING;
ThLightningStrike.RAY_EXTINGUISHED = LightningStrike.RAY_EXTINGUISHED;
ThLightningStrike.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThLightningStrike, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThLightningStrike.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.1", type: ThLightningStrike, selector: "th-lightningStrike", inputs: { state: "state" }, providers: [
        {
            provide: ThBufferGeometry,
            useExisting: forwardRef(() => ThLightningStrike)
        }
    ], usesInheritance: true, ngImport: i0, template: '<ng-content/>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThLightningStrike, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-lightningStrike',
                    template: '<ng-content/>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThBufferGeometry,
                            useExisting: forwardRef(() => ThLightningStrike)
                        }
                    ]
                }]
        }], propDecorators: { state: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGhMaWdodG5pbmdTdHJpa2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtdGhyZWUvc3JjL2xpYi9nZW5lcmF0ZWQvVGhMaWdodG5pbmdTdHJpa2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEseURBQXlEO0FBQ3pELHlDQUF5QztBQUN6QyxxSUFBcUk7QUFDckksT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFRLE1BQU0sZUFBZSxDQUFDO0FBQzVGLE9BQU8sRUFBRSxlQUFlLEVBQWlCLE1BQU0sK0NBQStDLENBQUM7QUFDL0YsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7O0FBYXRELE1BQU0sT0FBTyxpQkFHWCxTQUFRLGdCQUEwQjtJQUMzQixPQUFPO1FBQ1osT0FBTyxlQUFlLENBQUM7SUFDekIsQ0FBQztJQWNELElBQ1csS0FBSyxDQUFDLEtBQWE7UUFDNUIsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztTQUM1QjtJQUNILENBQUM7SUFFRCxhQUFhO0lBQ2IsSUFBVyxLQUFLO1FBQ2QsT0FBTyxJQUFJLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQztJQUM3QixDQUFDOztBQXRCc0IsaUNBQWUsR0FBRyxlQUFlLENBQUMsZUFBZSxDQUFDO0FBRWxELDRCQUFVLEdBQUcsZUFBZSxDQUFDLFVBQVUsQ0FBQztBQUV4QyxpQ0FBZSxHQUFHLGVBQWUsQ0FBQyxlQUFlLENBQUM7QUFFbEQsNEJBQVUsR0FBRyxlQUFlLENBQUMsVUFBVSxDQUFDO0FBRXhDLCtCQUFhLEdBQUcsZUFBZSxDQUFDLGFBQWEsQ0FBQztBQUU5QyxrQ0FBZ0IsR0FBRyxlQUFlLENBQUMsZ0JBQWdCLENBQUM7OEdBbEJoRSxpQkFBaUI7a0dBQWpCLGlCQUFpQix5RUFQakI7UUFDVDtZQUNFLE9BQU8sRUFBRSxnQkFBZ0I7WUFDekIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQztTQUNqRDtLQUNGLGlEQVBTLGVBQWU7MkZBU2QsaUJBQWlCO2tCQVg3QixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxvQkFBb0I7b0JBQzlCLFFBQVEsRUFBRSxlQUFlO29CQUN6QixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsU0FBUyxFQUFFO3dCQUNUOzRCQUNFLE9BQU8sRUFBRSxnQkFBZ0I7NEJBQ3pCLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLGtCQUFrQixDQUFDO3lCQUNqRDtxQkFDRjtpQkFDRjs4QkFzQlksS0FBSztzQkFEZixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlcnNjb3JlLWRhbmdsZSAqL1xuLyogZXNsaW50LWRpc2FibGUgQGFuZ3VsYXItZXNsaW50L2NvbXBvbmVudC1zZWxlY3RvciwgQGFuZ3VsYXItZXNsaW50L2NvbXBvbmVudC1jbGFzcy1zdWZmaXgsIGpzZG9jL25vLXR5cGVzLCBpbXBvcnQvbm8tZGVwcmVjYXRlZCAqL1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgZm9yd2FyZFJlZiwgSW5wdXQsIFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IExpZ2h0bmluZ1N0cmlrZSwgUmF5UGFyYW1ldGVycyB9IGZyb20gJ3RocmVlL2V4YW1wbGVzL2pzbS9nZW9tZXRyaWVzL0xpZ2h0bmluZ1N0cmlrZSc7XG5pbXBvcnQgeyBUaEJ1ZmZlckdlb21ldHJ5IH0gZnJvbSAnLi9UaEJ1ZmZlckdlb21ldHJ5JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndGgtbGlnaHRuaW5nU3RyaWtlJyxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudC8+JyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHByb3ZpZGVyczogW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IFRoQnVmZmVyR2VvbWV0cnksXG4gICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBUaExpZ2h0bmluZ1N0cmlrZSlcbiAgICB9XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgVGhMaWdodG5pbmdTdHJpa2U8XG4gIFQgZXh0ZW5kcyBMaWdodG5pbmdTdHJpa2UgPSBMaWdodG5pbmdTdHJpa2UsXG4gIFRBUkdTID0gLyogcmF5UGFyYW1ldGVycz8gKi8gUmF5UGFyYW1ldGVyc1xuPiBleHRlbmRzIFRoQnVmZmVyR2VvbWV0cnk8VCwgVEFSR1M+IHtcbiAgcHVibGljIGdldFR5cGUoKTogVHlwZTxMaWdodG5pbmdTdHJpa2U+IHtcbiAgICByZXR1cm4gTGlnaHRuaW5nU3RyaWtlO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBSQVlfSU5JVElBTElaRUQgPSBMaWdodG5pbmdTdHJpa2UuUkFZX0lOSVRJQUxJWkVEO1xuXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgUkFZX1VOQk9STiA9IExpZ2h0bmluZ1N0cmlrZS5SQVlfVU5CT1JOO1xuXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgUkFZX1BST1BBR0FUSU5HID0gTGlnaHRuaW5nU3RyaWtlLlJBWV9QUk9QQUdBVElORztcblxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFJBWV9TVEVBRFkgPSBMaWdodG5pbmdTdHJpa2UuUkFZX1NURUFEWTtcblxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFJBWV9WQU5JU0hJTkcgPSBMaWdodG5pbmdTdHJpa2UuUkFZX1ZBTklTSElORztcblxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFJBWV9FWFRJTkdVSVNIRUQgPSBMaWdodG5pbmdTdHJpa2UuUkFZX0VYVElOR1VJU0hFRDtcblxuICBASW5wdXQoKVxuICBwdWJsaWMgc2V0IHN0YXRlKHZhbHVlOiBudW1iZXIpIHtcbiAgICBpZiAodGhpcy5fb2JqUmVmKSB7XG4gICAgICB0aGlzLl9vYmpSZWYuc3RhdGUgPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICAvLyBAdHMtaWdub3JlXG4gIHB1YmxpYyBnZXQgc3RhdGUoKTogbnVtYmVyIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5fb2JqUmVmPy5zdGF0ZTtcbiAgfVxufVxuIl19