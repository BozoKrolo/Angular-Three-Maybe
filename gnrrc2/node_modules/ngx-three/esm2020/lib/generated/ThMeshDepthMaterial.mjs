/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, forwardRef, Input } from '@angular/core';
import { MeshDepthMaterial } from 'three';
import { ThMaterial } from './ThMaterial';
import * as i0 from "@angular/core";
export class ThMeshDepthMaterial extends ThMaterial {
    getType() {
        return MeshDepthMaterial;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    // @ts-ignore
    get type() {
        return this._objRef?.type;
    }
    set map(value) {
        if (this._objRef) {
            this._objRef.map = value;
        }
    }
    // @ts-ignore
    get map() {
        return this._objRef?.map;
    }
    set alphaMap(value) {
        if (this._objRef) {
            this._objRef.alphaMap = value;
        }
    }
    // @ts-ignore
    get alphaMap() {
        return this._objRef?.alphaMap;
    }
    set depthPacking(value) {
        if (this._objRef) {
            this._objRef.depthPacking = value;
        }
    }
    // @ts-ignore
    get depthPacking() {
        return this._objRef?.depthPacking;
    }
    set displacementMap(value) {
        if (this._objRef) {
            this._objRef.displacementMap = value;
        }
    }
    // @ts-ignore
    get displacementMap() {
        return this._objRef?.displacementMap;
    }
    set displacementScale(value) {
        if (this._objRef) {
            this._objRef.displacementScale = value;
        }
    }
    // @ts-ignore
    get displacementScale() {
        return this._objRef?.displacementScale;
    }
    set displacementBias(value) {
        if (this._objRef) {
            this._objRef.displacementBias = value;
        }
    }
    // @ts-ignore
    get displacementBias() {
        return this._objRef?.displacementBias;
    }
    set wireframe(value) {
        if (this._objRef) {
            this._objRef.wireframe = value;
        }
    }
    // @ts-ignore
    get wireframe() {
        return this._objRef?.wireframe;
    }
    set wireframeLinewidth(value) {
        if (this._objRef) {
            this._objRef.wireframeLinewidth = value;
        }
    }
    // @ts-ignore
    get wireframeLinewidth() {
        return this._objRef?.wireframeLinewidth;
    }
    set fog(value) {
        if (this._objRef) {
            this._objRef.fog = value;
        }
    }
    // @ts-ignore
    get fog() {
        return this._objRef?.fog;
    }
}
ThMeshDepthMaterial.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThMeshDepthMaterial, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThMeshDepthMaterial.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.1", type: ThMeshDepthMaterial, selector: "th-meshDepthMaterial", inputs: { type: "type", map: "map", alphaMap: "alphaMap", depthPacking: "depthPacking", displacementMap: "displacementMap", displacementScale: "displacementScale", displacementBias: "displacementBias", wireframe: "wireframe", wireframeLinewidth: "wireframeLinewidth", fog: "fog" }, providers: [{ provide: ThMaterial, useExisting: forwardRef(() => ThMeshDepthMaterial) }], usesInheritance: true, ngImport: i0, template: '<ng-content/>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThMeshDepthMaterial, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-meshDepthMaterial',
                    template: '<ng-content/>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [{ provide: ThMaterial, useExisting: forwardRef(() => ThMeshDepthMaterial) }]
                }]
        }], propDecorators: { type: [{
                type: Input
            }], map: [{
                type: Input
            }], alphaMap: [{
                type: Input
            }], depthPacking: [{
                type: Input
            }], displacementMap: [{
                type: Input
            }], displacementScale: [{
                type: Input
            }], displacementBias: [{
                type: Input
            }], wireframe: [{
                type: Input
            }], wireframeLinewidth: [{
                type: Input
            }], fog: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,