/* eslint-disable @typescript-eslint/ban-types */
/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, forwardRef, Input } from '@angular/core';
import { TAARenderPass } from 'three/examples/jsm/postprocessing/TAARenderPass';
import { ThPassBase } from '../ThPassBase';
import { ThSSAARenderPass } from './ThSSAARenderPass';
import * as i0 from "@angular/core";
export class ThTAARenderPass extends ThSSAARenderPass {
    getType() {
        return TAARenderPass;
    }
    set accumulate(value) {
        if (this._objRef) {
            this._objRef.accumulate = value;
        }
    }
    // @ts-ignore
    get accumulate() {
        return this._objRef?.accumulate;
    }
}
ThTAARenderPass.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThTAARenderPass, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThTAARenderPass.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.1", type: ThTAARenderPass, selector: "th-tAARenderPass", inputs: { accumulate: "accumulate" }, providers: [{ provide: ThPassBase, useExisting: forwardRef(() => ThTAARenderPass) }], usesInheritance: true, ngImport: i0, template: '<ng-content/>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThTAARenderPass, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-tAARenderPass',
                    template: '<ng-content/>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [{ provide: ThPassBase, useExisting: forwardRef(() => ThTAARenderPass) }]
                }]
        }], propDecorators: { accumulate: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGhUQUFSZW5kZXJQYXNzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXRocmVlL3NyYy9saWIvZ2VuZXJhdGVkL1RoVEFBUmVuZGVyUGFzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpREFBaUQ7QUFDakQseURBQXlEO0FBQ3pELHlDQUF5QztBQUN6QyxxSUFBcUk7QUFDckksT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFRLE1BQU0sZUFBZSxDQUFDO0FBRTVGLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxpREFBaUQsQ0FBQztBQUNoRixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDOztBQVF0RCxNQUFNLE9BQU8sZUFHWCxTQUFRLGdCQUEwQjtJQUMzQixPQUFPO1FBQ1osT0FBTyxhQUFhLENBQUM7SUFDdkIsQ0FBQztJQUVELElBQ1csVUFBVSxDQUFDLEtBQWM7UUFDbEMsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztTQUNqQztJQUNILENBQUM7SUFFRCxhQUFhO0lBQ2IsSUFBVyxVQUFVO1FBQ25CLE9BQU8sSUFBSSxDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUM7SUFDbEMsQ0FBQzs7NEdBbEJVLGVBQWU7Z0dBQWYsZUFBZSxpRkFGZixDQUFDLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsaURBRjFFLGVBQWU7MkZBSWQsZUFBZTtrQkFOM0IsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsa0JBQWtCO29CQUM1QixRQUFRLEVBQUUsZUFBZTtvQkFDekIsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07b0JBQy9DLFNBQVMsRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsQ0FBQyxFQUFFLENBQUM7aUJBQ3JGOzhCQVVZLFVBQVU7c0JBRHBCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXR5cGVzICovXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb24gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVyc2NvcmUtZGFuZ2xlICovXG4vKiBlc2xpbnQtZGlzYWJsZSBAYW5ndWxhci1lc2xpbnQvY29tcG9uZW50LXNlbGVjdG9yLCBAYW5ndWxhci1lc2xpbnQvY29tcG9uZW50LWNsYXNzLXN1ZmZpeCwganNkb2Mvbm8tdHlwZXMsIGltcG9ydC9uby1kZXByZWNhdGVkICovXG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBmb3J3YXJkUmVmLCBJbnB1dCwgVHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ2FtZXJhLCBDb2xvclJlcHJlc2VudGF0aW9uLCBTY2VuZSB9IGZyb20gJ3RocmVlJztcbmltcG9ydCB7IFRBQVJlbmRlclBhc3MgfSBmcm9tICd0aHJlZS9leGFtcGxlcy9qc20vcG9zdHByb2Nlc3NpbmcvVEFBUmVuZGVyUGFzcyc7XG5pbXBvcnQgeyBUaFBhc3NCYXNlIH0gZnJvbSAnLi4vVGhQYXNzQmFzZSc7XG5pbXBvcnQgeyBUaFNTQUFSZW5kZXJQYXNzIH0gZnJvbSAnLi9UaFNTQUFSZW5kZXJQYXNzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndGgtdEFBUmVuZGVyUGFzcycsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQvPicsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBwcm92aWRlcnM6IFt7IHByb3ZpZGU6IFRoUGFzc0Jhc2UsIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IFRoVEFBUmVuZGVyUGFzcykgfV1cbn0pXG5leHBvcnQgY2xhc3MgVGhUQUFSZW5kZXJQYXNzPFxuICBUIGV4dGVuZHMgVEFBUmVuZGVyUGFzcyA9IFRBQVJlbmRlclBhc3MsXG4gIFRBUkdTID0gW3NjZW5lOiBTY2VuZSwgY2FtZXJhOiBDYW1lcmEsIGNsZWFyQ29sb3I6IENvbG9yUmVwcmVzZW50YXRpb24sIGNsZWFyQWxwaGE6IG51bWJlcl1cbj4gZXh0ZW5kcyBUaFNTQUFSZW5kZXJQYXNzPFQsIFRBUkdTPiB7XG4gIHB1YmxpYyBnZXRUeXBlKCk6IFR5cGU8VEFBUmVuZGVyUGFzcz4ge1xuICAgIHJldHVybiBUQUFSZW5kZXJQYXNzO1xuICB9XG5cbiAgQElucHV0KClcbiAgcHVibGljIHNldCBhY2N1bXVsYXRlKHZhbHVlOiBib29sZWFuKSB7XG4gICAgaWYgKHRoaXMuX29ialJlZikge1xuICAgICAgdGhpcy5fb2JqUmVmLmFjY3VtdWxhdGUgPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICAvLyBAdHMtaWdub3JlXG4gIHB1YmxpYyBnZXQgYWNjdW11bGF0ZSgpOiBib29sZWFuIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5fb2JqUmVmPy5hY2N1bXVsYXRlO1xuICB9XG59XG4iXX0=