/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, Input, SkipSelf } from '@angular/core';
import { BufferGeometry } from 'three';
import { ThGeometryBase } from '../ThGeometryBase';
import { applyValue } from '../util';
import * as i0 from "@angular/core";
import * as i1 from "./ThObject3D";
export class ThBufferGeometry extends ThGeometryBase {
    getType() {
        return BufferGeometry;
    }
    set id(value) {
        if (this._objRef) {
            this._objRef.id = value;
        }
    }
    // @ts-ignore
    get id() {
        return this._objRef?.id;
    }
    set uuid(value) {
        if (this._objRef) {
            this._objRef.uuid = value;
        }
    }
    // @ts-ignore
    get uuid() {
        return this._objRef?.uuid;
    }
    set name(value) {
        if (this._objRef) {
            this._objRef.name = value;
        }
    }
    // @ts-ignore
    get name() {
        return this._objRef?.name;
    }
    // @ts-ignore
    get type() {
        return this._objRef?.type;
    }
    set index(value) {
        if (this._objRef) {
            this._objRef.index = applyValue(this._objRef.index, value);
        }
    }
    // @ts-ignore
    get index() {
        return this._objRef?.index;
    }
    set attributes(value) {
        if (this._objRef) {
            this._objRef.attributes = value;
        }
    }
    // @ts-ignore
    get attributes() {
        return this._objRef?.attributes;
    }
    set morphAttributes(value) {
        if (this._objRef) {
            this._objRef.morphAttributes = value;
        }
    }
    // @ts-ignore
    get morphAttributes() {
        return this._objRef?.morphAttributes;
    }
    set morphTargetsRelative(value) {
        if (this._objRef) {
            this._objRef.morphTargetsRelative = value;
        }
    }
    // @ts-ignore
    get morphTargetsRelative() {
        return this._objRef?.morphTargetsRelative;
    }
    set groups(value) {
        if (this._objRef) {
            this._objRef.groups = value;
        }
    }
    // @ts-ignore
    get groups() {
        return this._objRef?.groups;
    }
    set boundingBox(value) {
        if (this._objRef) {
            this._objRef.boundingBox = applyValue(this._objRef.boundingBox, value);
        }
    }
    // @ts-ignore
    get boundingBox() {
        return this._objRef?.boundingBox;
    }
    set boundingSphere(value) {
        if (this._objRef) {
            this._objRef.boundingSphere = applyValue(this._objRef.boundingSphere, value);
        }
    }
    // @ts-ignore
    get boundingSphere() {
        return this._objRef?.boundingSphere;
    }
    set drawRange(value) {
        if (this._objRef) {
            this._objRef.drawRange = value;
        }
    }
    // @ts-ignore
    get drawRange() {
        return this._objRef?.drawRange;
    }
    set userData(value) {
        if (this._objRef) {
            this._objRef.userData = value;
        }
    }
    // @ts-ignore
    get userData() {
        return this._objRef?.userData;
    }
    // @ts-ignore
    get isBufferGeometry() {
        return this._objRef?.isBufferGeometry;
    }
    constructor(hostObject) {
        super(hostObject);
    }
}
ThBufferGeometry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThBufferGeometry, deps: [{ token: i1.ThObject3D, skipSelf: true }], target: i0.ɵɵFactoryTarget.Component });
ThBufferGeometry.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.1", type: ThBufferGeometry, selector: "th-bufferGeometry", inputs: { id: "id", uuid: "uuid", name: "name", index: "index", attributes: "attributes", morphAttributes: "morphAttributes", morphTargetsRelative: "morphTargetsRelative", groups: "groups", boundingBox: "boundingBox", boundingSphere: "boundingSphere", drawRange: "drawRange", userData: "userData" }, providers: [], usesInheritance: true, ngImport: i0, template: '<ng-content/>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThBufferGeometry, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-bufferGeometry',
                    template: '<ng-content/>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: []
                }]
        }], ctorParameters: function () { return [{ type: i1.ThObject3D, decorators: [{
                    type: SkipSelf
                }] }]; }, propDecorators: { id: [{
                type: Input
            }], uuid: [{
                type: Input
            }], name: [{
                type: Input
            }], index: [{
                type: Input
            }], attributes: [{
                type: Input
            }], morphAttributes: [{
                type: Input
            }], morphTargetsRelative: [{
                type: Input
            }], groups: [{
                type: Input
            }], boundingBox: [{
                type: Input
            }], boundingSphere: [{
                type: Input
            }], drawRange: [{
                type: Input
            }], userData: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,