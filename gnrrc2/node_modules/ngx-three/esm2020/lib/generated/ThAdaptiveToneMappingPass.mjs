/* eslint-disable @typescript-eslint/ban-types */
/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, forwardRef, Input } from '@angular/core';
import { AdaptiveToneMappingPass } from 'three/examples/jsm/postprocessing/AdaptiveToneMappingPass';
import { ThPassBase } from '../ThPassBase';
import { ThPass } from './ThPass';
import * as i0 from "@angular/core";
export class ThAdaptiveToneMappingPass extends ThPass {
    getType() {
        return AdaptiveToneMappingPass;
    }
    set adaptive(value) {
        if (this._objRef) {
            this._objRef.adaptive = value;
        }
    }
    // @ts-ignore
    get adaptive() {
        return this._objRef?.adaptive;
    }
    set resolution(value) {
        if (this._objRef) {
            this._objRef.resolution = value;
        }
    }
    // @ts-ignore
    get resolution() {
        return this._objRef?.resolution;
    }
    set needsInit(value) {
        if (this._objRef) {
            this._objRef.needsInit = value;
        }
    }
    // @ts-ignore
    get needsInit() {
        return this._objRef?.needsInit;
    }
    set luminanceRT(value) {
        if (this._objRef) {
            this._objRef.luminanceRT = value;
        }
    }
    // @ts-ignore
    get luminanceRT() {
        return this._objRef?.luminanceRT;
    }
    set previousLuminanceRT(value) {
        if (this._objRef) {
            this._objRef.previousLuminanceRT = value;
        }
    }
    // @ts-ignore
    get previousLuminanceRT() {
        return this._objRef?.previousLuminanceRT;
    }
    set currentLuminanceRT(value) {
        if (this._objRef) {
            this._objRef.currentLuminanceRT = value;
        }
    }
    // @ts-ignore
    get currentLuminanceRT() {
        return this._objRef?.currentLuminanceRT;
    }
    set copyUniforms(value) {
        if (this._objRef) {
            this._objRef.copyUniforms = value;
        }
    }
    // @ts-ignore
    get copyUniforms() {
        return this._objRef?.copyUniforms;
    }
    set materialCopy(value) {
        if (this._objRef) {
            this._objRef.materialCopy = value;
        }
    }
    // @ts-ignore
    get materialCopy() {
        return this._objRef?.materialCopy;
    }
    set materialLuminance(value) {
        if (this._objRef) {
            this._objRef.materialLuminance = value;
        }
    }
    // @ts-ignore
    get materialLuminance() {
        return this._objRef?.materialLuminance;
    }
    set adaptLuminanceShader(value) {
        if (this._objRef) {
            this._objRef.adaptLuminanceShader = value;
        }
    }
    // @ts-ignore
    get adaptLuminanceShader() {
        return this._objRef?.adaptLuminanceShader;
    }
    set materialAdaptiveLum(value) {
        if (this._objRef) {
            this._objRef.materialAdaptiveLum = value;
        }
    }
    // @ts-ignore
    get materialAdaptiveLum() {
        return this._objRef?.materialAdaptiveLum;
    }
    set materialToneMap(value) {
        if (this._objRef) {
            this._objRef.materialToneMap = value;
        }
    }
    // @ts-ignore
    get materialToneMap() {
        return this._objRef?.materialToneMap;
    }
    set fsQuad(value) {
        if (this._objRef) {
            this._objRef.fsQuad = value;
        }
    }
    // @ts-ignore
    get fsQuad() {
        return this._objRef?.fsQuad;
    }
}
ThAdaptiveToneMappingPass.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThAdaptiveToneMappingPass, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThAdaptiveToneMappingPass.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.1", type: ThAdaptiveToneMappingPass, selector: "th-adaptiveToneMappingPass", inputs: { adaptive: "adaptive", resolution: "resolution", needsInit: "needsInit", luminanceRT: "luminanceRT", previousLuminanceRT: "previousLuminanceRT", currentLuminanceRT: "currentLuminanceRT", copyUniforms: "copyUniforms", materialCopy: "materialCopy", materialLuminance: "materialLuminance", adaptLuminanceShader: "adaptLuminanceShader", materialAdaptiveLum: "materialAdaptiveLum", materialToneMap: "materialToneMap", fsQuad: "fsQuad" }, providers: [
        {
            provide: ThPassBase,
            useExisting: forwardRef(() => ThAdaptiveToneMappingPass)
        }
    ], usesInheritance: true, ngImport: i0, template: '<ng-content/>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThAdaptiveToneMappingPass, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-adaptiveToneMappingPass',
                    template: '<ng-content/>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThPassBase,
                            useExisting: forwardRef(() => ThAdaptiveToneMappingPass)
                        }
                    ]
                }]
        }], propDecorators: { adaptive: [{
                type: Input
            }], resolution: [{
                type: Input
            }], needsInit: [{
                type: Input
            }], luminanceRT: [{
                type: Input
            }], previousLuminanceRT: [{
                type: Input
            }], currentLuminanceRT: [{
                type: Input
            }], copyUniforms: [{
                type: Input
            }], materialCopy: [{
                type: Input
            }], materialLuminance: [{
                type: Input
            }], adaptLuminanceShader: [{
                type: Input
            }], materialAdaptiveLum: [{
                type: Input
            }], materialToneMap: [{
                type: Input
            }], fsQuad: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,