/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, forwardRef, Input } from '@angular/core';
import { Line } from 'three';
import { ThObject3D } from './ThObject3D';
import * as i0 from "@angular/core";
export class ThLine extends ThObject3D {
    getType() {
        return Line;
    }
    // @ts-ignore
    get isLine() {
        return this._objRef?.isLine;
    }
    // @ts-ignore
    get type() {
        return this._objRef?.type;
    }
    set geometry(value) {
        if (this._objRef) {
            this._objRef.geometry = value;
        }
    }
    // @ts-ignore
    get geometry() {
        return this._objRef?.geometry;
    }
    set material(value) {
        if (this._objRef) {
            this._objRef.material = value;
        }
    }
    // @ts-ignore
    get material() {
        return this._objRef?.material;
    }
    set morphTargetInfluences(value) {
        if (this._objRef) {
            this._objRef.morphTargetInfluences = value;
        }
    }
    // @ts-ignore
    get morphTargetInfluences() {
        return this._objRef?.morphTargetInfluences;
    }
    set morphTargetDictionary(value) {
        if (this._objRef) {
            this._objRef.morphTargetDictionary = value;
        }
    }
    // @ts-ignore
    get morphTargetDictionary() {
        return this._objRef?.morphTargetDictionary;
    }
}
ThLine.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThLine, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThLine.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.1", type: ThLine, selector: "th-line", inputs: { geometry: "geometry", material: "material", morphTargetInfluences: "morphTargetInfluences", morphTargetDictionary: "morphTargetDictionary" }, providers: [{ provide: ThObject3D, useExisting: forwardRef(() => ThLine) }], usesInheritance: true, ngImport: i0, template: '<ng-content/>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThLine, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-line',
                    template: '<ng-content/>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [{ provide: ThObject3D, useExisting: forwardRef(() => ThLine) }]
                }]
        }], propDecorators: { geometry: [{
                type: Input
            }], material: [{
                type: Input
            }], morphTargetInfluences: [{
                type: Input
            }], morphTargetDictionary: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGhMaW5lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXRocmVlL3NyYy9saWIvZ2VuZXJhdGVkL1RoTGluZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx5REFBeUQ7QUFDekQseUNBQXlDO0FBQ3pDLHFJQUFxSTtBQUNySSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQVEsTUFBTSxlQUFlLENBQUM7QUFDNUYsT0FBTyxFQUF5QixJQUFJLEVBQVksTUFBTSxPQUFPLENBQUM7QUFDOUQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGNBQWMsQ0FBQzs7QUFRMUMsTUFBTSxPQUFPLE1BS1gsU0FBUSxVQUEyQjtJQUM1QixPQUFPO1FBQ1osT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsYUFBYTtJQUNiLElBQVcsTUFBTTtRQUNmLE9BQU8sSUFBSSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUM7SUFDOUIsQ0FBQztJQUNELGFBQWE7SUFDYixJQUFXLElBQUk7UUFDYixPQUFPLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDO0lBQzVCLENBQUM7SUFDRCxJQUNXLFFBQVEsQ0FBQyxLQUFnQjtRQUNsQyxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1NBQy9CO0lBQ0gsQ0FBQztJQUVELGFBQWE7SUFDYixJQUFXLFFBQVE7UUFDakIsT0FBTyxJQUFJLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQztJQUNoQyxDQUFDO0lBQ0QsSUFDVyxRQUFRLENBQUMsS0FBZ0I7UUFDbEMsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztTQUMvQjtJQUNILENBQUM7SUFFRCxhQUFhO0lBQ2IsSUFBVyxRQUFRO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUM7SUFDaEMsQ0FBQztJQUNELElBQ1cscUJBQXFCLENBQUMsS0FBMkI7UUFDMUQsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMscUJBQXFCLEdBQUcsS0FBSyxDQUFDO1NBQzVDO0lBQ0gsQ0FBQztJQUVELGFBQWE7SUFDYixJQUFXLHFCQUFxQjtRQUM5QixPQUFPLElBQUksQ0FBQyxPQUFPLEVBQUUscUJBQXFCLENBQUM7SUFDN0MsQ0FBQztJQUNELElBQ1cscUJBQXFCLENBQUMsS0FBNEM7UUFDM0UsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMscUJBQXFCLEdBQUcsS0FBSyxDQUFDO1NBQzVDO0lBQ0gsQ0FBQztJQUVELGFBQWE7SUFDYixJQUFXLHFCQUFxQjtRQUM5QixPQUFPLElBQUksQ0FBQyxPQUFPLEVBQUUscUJBQXFCLENBQUM7SUFDN0MsQ0FBQzs7bUdBN0RVLE1BQU07dUZBQU4sTUFBTSwwTEFGTixDQUFDLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsaURBRmpFLGVBQWU7MkZBSWQsTUFBTTtrQkFObEIsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsU0FBUztvQkFDbkIsUUFBUSxFQUFFLGVBQWU7b0JBQ3pCLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLEVBQUUsQ0FBQztpQkFDNUU7OEJBb0JZLFFBQVE7c0JBRGxCLEtBQUs7Z0JBWUssUUFBUTtzQkFEbEIsS0FBSztnQkFZSyxxQkFBcUI7c0JBRC9CLEtBQUs7Z0JBWUsscUJBQXFCO3NCQUQvQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlcnNjb3JlLWRhbmdsZSAqL1xuLyogZXNsaW50LWRpc2FibGUgQGFuZ3VsYXItZXNsaW50L2NvbXBvbmVudC1zZWxlY3RvciwgQGFuZ3VsYXItZXNsaW50L2NvbXBvbmVudC1jbGFzcy1zdWZmaXgsIGpzZG9jL25vLXR5cGVzLCBpbXBvcnQvbm8tZGVwcmVjYXRlZCAqL1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgZm9yd2FyZFJlZiwgSW5wdXQsIFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJ1ZmZlckdlb21ldHJ5LCBFdmVudCwgTGluZSwgTWF0ZXJpYWwgfSBmcm9tICd0aHJlZSc7XG5pbXBvcnQgeyBUaE9iamVjdDNEIH0gZnJvbSAnLi9UaE9iamVjdDNEJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndGgtbGluZScsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQvPicsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBwcm92aWRlcnM6IFt7IHByb3ZpZGU6IFRoT2JqZWN0M0QsIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IFRoTGluZSkgfV1cbn0pXG5leHBvcnQgY2xhc3MgVGhMaW5lPFxuICBUR2VvbWV0cnkgZXh0ZW5kcyBCdWZmZXJHZW9tZXRyeSA9IEJ1ZmZlckdlb21ldHJ5LFxuICBUTWF0ZXJpYWwgZXh0ZW5kcyBNYXRlcmlhbCB8IE1hdGVyaWFsW10gPSBNYXRlcmlhbCB8IE1hdGVyaWFsW10sXG4gIFQgZXh0ZW5kcyBMaW5lPFRHZW9tZXRyeSwgVE1hdGVyaWFsPiA9IExpbmU8VEdlb21ldHJ5LCBUTWF0ZXJpYWw+LFxuICBUQVJHUyA9IFtnZW9tZXRyeT86IFRHZW9tZXRyeSwgbWF0ZXJpYWw/OiBUTWF0ZXJpYWxdXG4+IGV4dGVuZHMgVGhPYmplY3QzRDxFdmVudCwgVCwgVEFSR1M+IHtcbiAgcHVibGljIGdldFR5cGUoKTogVHlwZTxMaW5lPFRHZW9tZXRyeSwgVE1hdGVyaWFsPj4ge1xuICAgIHJldHVybiBMaW5lO1xuICB9XG5cbiAgLy8gQHRzLWlnbm9yZVxuICBwdWJsaWMgZ2V0IGlzTGluZSgpOiB0cnVlIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5fb2JqUmVmPy5pc0xpbmU7XG4gIH1cbiAgLy8gQHRzLWlnbm9yZVxuICBwdWJsaWMgZ2V0IHR5cGUoKTogKHN0cmluZyB8ICdMaW5lJykgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLl9vYmpSZWY/LnR5cGU7XG4gIH1cbiAgQElucHV0KClcbiAgcHVibGljIHNldCBnZW9tZXRyeSh2YWx1ZTogVEdlb21ldHJ5KSB7XG4gICAgaWYgKHRoaXMuX29ialJlZikge1xuICAgICAgdGhpcy5fb2JqUmVmLmdlb21ldHJ5ID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgLy8gQHRzLWlnbm9yZVxuICBwdWJsaWMgZ2V0IGdlb21ldHJ5KCk6IFRHZW9tZXRyeSB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuX29ialJlZj8uZ2VvbWV0cnk7XG4gIH1cbiAgQElucHV0KClcbiAgcHVibGljIHNldCBtYXRlcmlhbCh2YWx1ZTogVE1hdGVyaWFsKSB7XG4gICAgaWYgKHRoaXMuX29ialJlZikge1xuICAgICAgdGhpcy5fb2JqUmVmLm1hdGVyaWFsID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgLy8gQHRzLWlnbm9yZVxuICBwdWJsaWMgZ2V0IG1hdGVyaWFsKCk6IFRNYXRlcmlhbCB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuX29ialJlZj8ubWF0ZXJpYWw7XG4gIH1cbiAgQElucHV0KClcbiAgcHVibGljIHNldCBtb3JwaFRhcmdldEluZmx1ZW5jZXModmFsdWU6IG51bWJlcltdIHwgdW5kZWZpbmVkKSB7XG4gICAgaWYgKHRoaXMuX29ialJlZikge1xuICAgICAgdGhpcy5fb2JqUmVmLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcyA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIC8vIEB0cy1pZ25vcmVcbiAgcHVibGljIGdldCBtb3JwaFRhcmdldEluZmx1ZW5jZXMoKTogKG51bWJlcltdIHwgdW5kZWZpbmVkKSB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuX29ialJlZj8ubW9ycGhUYXJnZXRJbmZsdWVuY2VzO1xuICB9XG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBzZXQgbW9ycGhUYXJnZXREaWN0aW9uYXJ5KHZhbHVlOiB7IFtrZXk6IHN0cmluZ106IG51bWJlciB9IHwgdW5kZWZpbmVkKSB7XG4gICAgaWYgKHRoaXMuX29ialJlZikge1xuICAgICAgdGhpcy5fb2JqUmVmLm1vcnBoVGFyZ2V0RGljdGlvbmFyeSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIC8vIEB0cy1pZ25vcmVcbiAgcHVibGljIGdldCBtb3JwaFRhcmdldERpY3Rpb25hcnkoKTogKHsgW2tleTogc3RyaW5nXTogbnVtYmVyIH0gfCB1bmRlZmluZWQpIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5fb2JqUmVmPy5tb3JwaFRhcmdldERpY3Rpb25hcnk7XG4gIH1cbn1cbiJdfQ==