/* eslint-disable @typescript-eslint/ban-types */
/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';
import { ThWrapperBase } from '../ThWrapperBase';
import * as i0 from "@angular/core";
export class ThEffectComposerGen extends ThWrapperBase {
    getType() {
        return EffectComposer;
    }
    set renderer(value) {
        if (this._objRef) {
            this._objRef.renderer = value;
        }
    }
    // @ts-ignore
    get renderer() {
        return this._objRef?.renderer;
    }
    set renderTarget1(value) {
        if (this._objRef) {
            this._objRef.renderTarget1 = value;
        }
    }
    // @ts-ignore
    get renderTarget1() {
        return this._objRef?.renderTarget1;
    }
    set renderTarget2(value) {
        if (this._objRef) {
            this._objRef.renderTarget2 = value;
        }
    }
    // @ts-ignore
    get renderTarget2() {
        return this._objRef?.renderTarget2;
    }
    set writeBuffer(value) {
        if (this._objRef) {
            this._objRef.writeBuffer = value;
        }
    }
    // @ts-ignore
    get writeBuffer() {
        return this._objRef?.writeBuffer;
    }
    set readBuffer(value) {
        if (this._objRef) {
            this._objRef.readBuffer = value;
        }
    }
    // @ts-ignore
    get readBuffer() {
        return this._objRef?.readBuffer;
    }
    set passes(value) {
        if (this._objRef) {
            this._objRef.passes = value;
        }
    }
    // @ts-ignore
    get passes() {
        return this._objRef?.passes;
    }
    set copyPass(value) {
        if (this._objRef) {
            this._objRef.copyPass = value;
        }
    }
    // @ts-ignore
    get copyPass() {
        return this._objRef?.copyPass;
    }
    set clock(value) {
        if (this._objRef) {
            this._objRef.clock = value;
        }
    }
    // @ts-ignore
    get clock() {
        return this._objRef?.clock;
    }
    set renderToScreen(value) {
        if (this._objRef) {
            this._objRef.renderToScreen = value;
        }
    }
    // @ts-ignore
    get renderToScreen() {
        return this._objRef?.renderToScreen;
    }
}
ThEffectComposerGen.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThEffectComposerGen, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThEffectComposerGen.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.1", type: ThEffectComposerGen, selector: "th-effectComposerGen", inputs: { renderer: "renderer", renderTarget1: "renderTarget1", renderTarget2: "renderTarget2", writeBuffer: "writeBuffer", readBuffer: "readBuffer", passes: "passes", copyPass: "copyPass", clock: "clock", renderToScreen: "renderToScreen" }, providers: [], usesInheritance: true, ngImport: i0, template: '<ng-content/>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThEffectComposerGen, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-effectComposerGen',
                    template: '<ng-content/>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: []
                }]
        }], propDecorators: { renderer: [{
                type: Input
            }], renderTarget1: [{
                type: Input
            }], renderTarget2: [{
                type: Input
            }], writeBuffer: [{
                type: Input
            }], readBuffer: [{
                type: Input
            }], passes: [{
                type: Input
            }], copyPass: [{
                type: Input
            }], clock: [{
                type: Input
            }], renderToScreen: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,