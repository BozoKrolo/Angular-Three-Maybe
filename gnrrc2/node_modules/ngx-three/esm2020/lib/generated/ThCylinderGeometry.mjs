/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, forwardRef } from '@angular/core';
import { CylinderGeometry } from 'three';
import { ThBufferGeometry } from './ThBufferGeometry';
import * as i0 from "@angular/core";
export class ThCylinderGeometry extends ThBufferGeometry {
    getType() {
        return CylinderGeometry;
    }
    // @ts-ignore
    get type() {
        return this._objRef?.type;
    }
    // @ts-ignore
    get parameters() {
        return this._objRef?.parameters;
    }
}
ThCylinderGeometry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThCylinderGeometry, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThCylinderGeometry.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.1", type: ThCylinderGeometry, selector: "th-cylinderGeometry", providers: [
        {
            provide: ThBufferGeometry,
            useExisting: forwardRef(() => ThCylinderGeometry)
        }
    ], usesInheritance: true, ngImport: i0, template: '<ng-content/>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThCylinderGeometry, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-cylinderGeometry',
                    template: '<ng-content/>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThBufferGeometry,
                            useExisting: forwardRef(() => ThCylinderGeometry)
                        }
                    ]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGhDeWxpbmRlckdlb21ldHJ5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXRocmVlL3NyYy9saWIvZ2VuZXJhdGVkL1RoQ3lsaW5kZXJHZW9tZXRyeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx5REFBeUQ7QUFDekQseUNBQXlDO0FBQ3pDLHFJQUFxSTtBQUNySSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBUSxNQUFNLGVBQWUsQ0FBQztBQUNyRixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFDekMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7O0FBYXRELE1BQU0sT0FBTyxrQkFZWCxTQUFRLGdCQUEwQjtJQUMzQixPQUFPO1FBQ1osT0FBTyxnQkFBZ0IsQ0FBQztJQUMxQixDQUFDO0lBRUQsYUFBYTtJQUNiLElBQVcsSUFBSTtRQUNiLE9BQU8sSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUM7SUFDNUIsQ0FBQztJQUNELGFBQWE7SUFDYixJQUFXLFVBQVU7UUFZbkIsT0FBTyxJQUFJLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQztJQUNsQyxDQUFDOzsrR0FuQ1Usa0JBQWtCO21HQUFsQixrQkFBa0IsOENBUGxCO1FBQ1Q7WUFDRSxPQUFPLEVBQUUsZ0JBQWdCO1lBQ3pCLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsa0JBQWtCLENBQUM7U0FDbEQ7S0FDRixpREFQUyxlQUFlOzJGQVNkLGtCQUFrQjtrQkFYOUIsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUscUJBQXFCO29CQUMvQixRQUFRLEVBQUUsZUFBZTtvQkFDekIsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07b0JBQy9DLFNBQVMsRUFBRTt3QkFDVDs0QkFDRSxPQUFPLEVBQUUsZ0JBQWdCOzRCQUN6QixXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxtQkFBbUIsQ0FBQzt5QkFDbEQ7cUJBQ0Y7aUJBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb24gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVyc2NvcmUtZGFuZ2xlICovXG4vKiBlc2xpbnQtZGlzYWJsZSBAYW5ndWxhci1lc2xpbnQvY29tcG9uZW50LXNlbGVjdG9yLCBAYW5ndWxhci1lc2xpbnQvY29tcG9uZW50LWNsYXNzLXN1ZmZpeCwganNkb2Mvbm8tdHlwZXMsIGltcG9ydC9uby1kZXByZWNhdGVkICovXG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBmb3J3YXJkUmVmLCBUeXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDeWxpbmRlckdlb21ldHJ5IH0gZnJvbSAndGhyZWUnO1xuaW1wb3J0IHsgVGhCdWZmZXJHZW9tZXRyeSB9IGZyb20gJy4vVGhCdWZmZXJHZW9tZXRyeSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3RoLWN5bGluZGVyR2VvbWV0cnknLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50Lz4nLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogVGhCdWZmZXJHZW9tZXRyeSxcbiAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IFRoQ3lsaW5kZXJHZW9tZXRyeSlcbiAgICB9XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgVGhDeWxpbmRlckdlb21ldHJ5PFxuICBUIGV4dGVuZHMgQ3lsaW5kZXJHZW9tZXRyeSA9IEN5bGluZGVyR2VvbWV0cnksXG4gIFRBUkdTID0gW1xuICAgIHJhZGl1c1RvcD86IG51bWJlcixcbiAgICByYWRpdXNCb3R0b20/OiBudW1iZXIsXG4gICAgaGVpZ2h0PzogbnVtYmVyLFxuICAgIHJhZGlhbFNlZ21lbnRzPzogbnVtYmVyLFxuICAgIGhlaWdodFNlZ21lbnRzPzogbnVtYmVyLFxuICAgIG9wZW5FbmRlZD86IGJvb2xlYW4sXG4gICAgdGhldGFTdGFydD86IG51bWJlcixcbiAgICB0aGV0YUxlbmd0aD86IG51bWJlclxuICBdXG4+IGV4dGVuZHMgVGhCdWZmZXJHZW9tZXRyeTxULCBUQVJHUz4ge1xuICBwdWJsaWMgZ2V0VHlwZSgpOiBUeXBlPEN5bGluZGVyR2VvbWV0cnk+IHtcbiAgICByZXR1cm4gQ3lsaW5kZXJHZW9tZXRyeTtcbiAgfVxuXG4gIC8vIEB0cy1pZ25vcmVcbiAgcHVibGljIGdldCB0eXBlKCk6IChzdHJpbmcgfCAnQ3lsaW5kZXJHZW9tZXRyeScpIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5fb2JqUmVmPy50eXBlO1xuICB9XG4gIC8vIEB0cy1pZ25vcmVcbiAgcHVibGljIGdldCBwYXJhbWV0ZXJzKCk6XG4gICAgfCB7XG4gICAgICAgIHJlYWRvbmx5IHJhZGl1c1RvcDogbnVtYmVyO1xuICAgICAgICByZWFkb25seSByYWRpdXNCb3R0b206IG51bWJlcjtcbiAgICAgICAgcmVhZG9ubHkgaGVpZ2h0OiBudW1iZXI7XG4gICAgICAgIHJlYWRvbmx5IHJhZGlhbFNlZ21lbnRzOiBudW1iZXI7XG4gICAgICAgIHJlYWRvbmx5IGhlaWdodFNlZ21lbnRzOiBudW1iZXI7XG4gICAgICAgIHJlYWRvbmx5IG9wZW5FbmRlZDogYm9vbGVhbjtcbiAgICAgICAgcmVhZG9ubHkgdGhldGFTdGFydDogbnVtYmVyO1xuICAgICAgICByZWFkb25seSB0aGV0YUxlbmd0aDogbnVtYmVyO1xuICAgICAgfVxuICAgIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5fb2JqUmVmPy5wYXJhbWV0ZXJzO1xuICB9XG59XG4iXX0=