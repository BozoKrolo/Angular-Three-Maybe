/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, forwardRef, Input } from '@angular/core';
import { LightProbe } from 'three';
import { applyValue } from '../util';
import { ThLight } from './ThLight';
import { ThObject3D } from './ThObject3D';
import * as i0 from "@angular/core";
export class ThLightProbe extends ThLight {
    getType() {
        return LightProbe;
    }
    // @ts-ignore
    get isLightProbe() {
        return this._objRef?.isLightProbe;
    }
    set sh(value) {
        if (this._objRef) {
            this._objRef.sh = applyValue(this._objRef.sh, value);
        }
    }
    // @ts-ignore
    get sh() {
        return this._objRef?.sh;
    }
}
ThLightProbe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThLightProbe, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThLightProbe.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.1", type: ThLightProbe, selector: "th-lightProbe", inputs: { sh: "sh" }, providers: [{ provide: ThObject3D, useExisting: forwardRef(() => ThLightProbe) }], usesInheritance: true, ngImport: i0, template: '<ng-content/>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThLightProbe, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-lightProbe',
                    template: '<ng-content/>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [{ provide: ThObject3D, useExisting: forwardRef(() => ThLightProbe) }]
                }]
        }], propDecorators: { sh: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGhMaWdodFByb2JlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXRocmVlL3NyYy9saWIvZ2VuZXJhdGVkL1RoTGlnaHRQcm9iZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx5REFBeUQ7QUFDekQseUNBQXlDO0FBQ3pDLHFJQUFxSTtBQUNySSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQVEsTUFBTSxlQUFlLENBQUM7QUFDNUYsT0FBTyxFQUFFLFVBQVUsRUFBNkMsTUFBTSxPQUFPLENBQUM7QUFDOUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNyQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxjQUFjLENBQUM7O0FBUTFDLE1BQU0sT0FBTyxZQUdYLFNBQVEsT0FBMEM7SUFDM0MsT0FBTztRQUNaLE9BQU8sVUFBVSxDQUFDO0lBQ3BCLENBQUM7SUFFRCxhQUFhO0lBQ2IsSUFBVyxZQUFZO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUM7SUFDcEMsQ0FBQztJQUNELElBQ1csRUFBRSxDQUFDLEtBQXNEO1FBQ2xFLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxVQUFVLENBQXNCLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQzNFO0lBQ0gsQ0FBQztJQUNELGFBQWE7SUFDYixJQUFXLEVBQUU7UUFDWCxPQUFPLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDO0lBQzFCLENBQUM7O3lHQXJCVSxZQUFZOzZGQUFaLFlBQVksOERBRlosQ0FBQyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLGlEQUZ2RSxlQUFlOzJGQUlkLFlBQVk7a0JBTnhCLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLGVBQWU7b0JBQ3pCLFFBQVEsRUFBRSxlQUFlO29CQUN6QixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsU0FBUyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLGFBQWEsQ0FBQyxFQUFFLENBQUM7aUJBQ2xGOzhCQWNZLEVBQUU7c0JBRFosS0FBSyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZXJzY29yZS1kYW5nbGUgKi9cbi8qIGVzbGludC1kaXNhYmxlIEBhbmd1bGFyLWVzbGludC9jb21wb25lbnQtc2VsZWN0b3IsIEBhbmd1bGFyLWVzbGludC9jb21wb25lbnQtY2xhc3Mtc3VmZml4LCBqc2RvYy9uby10eXBlcywgaW1wb3J0L25vLWRlcHJlY2F0ZWQgKi9cbmltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIGZvcndhcmRSZWYsIElucHV0LCBUeXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBMaWdodFByb2JlLCBMaWdodFNoYWRvdywgU3BoZXJpY2FsSGFybW9uaWNzMywgVmVjdG9yMyB9IGZyb20gJ3RocmVlJztcbmltcG9ydCB7IGFwcGx5VmFsdWUgfSBmcm9tICcuLi91dGlsJztcbmltcG9ydCB7IFRoTGlnaHQgfSBmcm9tICcuL1RoTGlnaHQnO1xuaW1wb3J0IHsgVGhPYmplY3QzRCB9IGZyb20gJy4vVGhPYmplY3QzRCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3RoLWxpZ2h0UHJvYmUnLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50Lz4nLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgcHJvdmlkZXJzOiBbeyBwcm92aWRlOiBUaE9iamVjdDNELCB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBUaExpZ2h0UHJvYmUpIH1dXG59KVxuZXhwb3J0IGNsYXNzIFRoTGlnaHRQcm9iZTxcbiAgVCBleHRlbmRzIExpZ2h0UHJvYmUgPSBMaWdodFByb2JlLFxuICBUQVJHUyA9IFtzaD86IFNwaGVyaWNhbEhhcm1vbmljczMsIGludGVuc2l0eT86IG51bWJlcl1cbj4gZXh0ZW5kcyBUaExpZ2h0PExpZ2h0U2hhZG93IHwgdW5kZWZpbmVkLCBULCBUQVJHUz4ge1xuICBwdWJsaWMgZ2V0VHlwZSgpOiBUeXBlPExpZ2h0UHJvYmU+IHtcbiAgICByZXR1cm4gTGlnaHRQcm9iZTtcbiAgfVxuXG4gIC8vIEB0cy1pZ25vcmVcbiAgcHVibGljIGdldCBpc0xpZ2h0UHJvYmUoKTogdHJ1ZSB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuX29ialJlZj8uaXNMaWdodFByb2JlO1xuICB9XG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBzZXQgc2godmFsdWU6IFNwaGVyaWNhbEhhcm1vbmljczMgfCBbY29lZmZpY2llbnRzOiBWZWN0b3IzW11dKSB7XG4gICAgaWYgKHRoaXMuX29ialJlZikge1xuICAgICAgdGhpcy5fb2JqUmVmLnNoID0gYXBwbHlWYWx1ZTxTcGhlcmljYWxIYXJtb25pY3MzPih0aGlzLl9vYmpSZWYuc2gsIHZhbHVlKTtcbiAgICB9XG4gIH1cbiAgLy8gQHRzLWlnbm9yZVxuICBwdWJsaWMgZ2V0IHNoKCk6IFNwaGVyaWNhbEhhcm1vbmljczMgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLl9vYmpSZWY/LnNoO1xuICB9XG59XG4iXX0=