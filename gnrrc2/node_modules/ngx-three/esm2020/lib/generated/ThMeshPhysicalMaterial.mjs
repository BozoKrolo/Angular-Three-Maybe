/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, forwardRef, Input } from '@angular/core';
import { MeshPhysicalMaterial } from 'three';
import { applyValue } from '../util';
import { ThMaterial } from './ThMaterial';
import { ThMeshStandardMaterial } from './ThMeshStandardMaterial';
import * as i0 from "@angular/core";
export class ThMeshPhysicalMaterial extends ThMeshStandardMaterial {
    getType() {
        return MeshPhysicalMaterial;
    }
    set type(value) {
        if (this._objRef) {
            this._objRef.type = value;
        }
    }
    // @ts-ignore
    get type() {
        return this._objRef?.type;
    }
    set defines(value) {
        if (this._objRef) {
            this._objRef.defines = value;
        }
    }
    // @ts-ignore
    get defines() {
        return this._objRef?.defines;
    }
    set clearcoat(value) {
        if (this._objRef) {
            this._objRef.clearcoat = value;
        }
    }
    // @ts-ignore
    get clearcoat() {
        return this._objRef?.clearcoat;
    }
    set clearcoatMap(value) {
        if (this._objRef) {
            this._objRef.clearcoatMap = value;
        }
    }
    // @ts-ignore
    get clearcoatMap() {
        return this._objRef?.clearcoatMap;
    }
    set clearcoatRoughness(value) {
        if (this._objRef) {
            this._objRef.clearcoatRoughness = value;
        }
    }
    // @ts-ignore
    get clearcoatRoughness() {
        return this._objRef?.clearcoatRoughness;
    }
    set clearcoatRoughnessMap(value) {
        if (this._objRef) {
            this._objRef.clearcoatRoughnessMap = value;
        }
    }
    // @ts-ignore
    get clearcoatRoughnessMap() {
        return this._objRef?.clearcoatRoughnessMap;
    }
    set clearcoatNormalScale(value) {
        if (this._objRef) {
            this._objRef.clearcoatNormalScale = applyValue(this._objRef.clearcoatNormalScale, value);
        }
    }
    // @ts-ignore
    get clearcoatNormalScale() {
        return this._objRef?.clearcoatNormalScale;
    }
    set clearcoatNormalMap(value) {
        if (this._objRef) {
            this._objRef.clearcoatNormalMap = value;
        }
    }
    // @ts-ignore
    get clearcoatNormalMap() {
        return this._objRef?.clearcoatNormalMap;
    }
    set reflectivity(value) {
        if (this._objRef) {
            this._objRef.reflectivity = value;
        }
    }
    // @ts-ignore
    get reflectivity() {
        return this._objRef?.reflectivity;
    }
    set ior(value) {
        if (this._objRef) {
            this._objRef.ior = value;
        }
    }
    // @ts-ignore
    get ior() {
        return this._objRef?.ior;
    }
    set sheen(value) {
        if (this._objRef) {
            this._objRef.sheen = value;
        }
    }
    // @ts-ignore
    get sheen() {
        return this._objRef?.sheen;
    }
    set sheenColor(value) {
        if (this._objRef) {
            this._objRef.sheenColor = applyValue(this._objRef.sheenColor, value);
        }
    }
    // @ts-ignore
    get sheenColor() {
        return this._objRef?.sheenColor;
    }
    set sheenColorMap(value) {
        if (this._objRef) {
            this._objRef.sheenColorMap = value;
        }
    }
    // @ts-ignore
    get sheenColorMap() {
        return this._objRef?.sheenColorMap;
    }
    set sheenRoughness(value) {
        if (this._objRef) {
            this._objRef.sheenRoughness = value;
        }
    }
    // @ts-ignore
    get sheenRoughness() {
        return this._objRef?.sheenRoughness;
    }
    set sheenRoughnessMap(value) {
        if (this._objRef) {
            this._objRef.sheenRoughnessMap = value;
        }
    }
    // @ts-ignore
    get sheenRoughnessMap() {
        return this._objRef?.sheenRoughnessMap;
    }
    set transmission(value) {
        if (this._objRef) {
            this._objRef.transmission = value;
        }
    }
    // @ts-ignore
    get transmission() {
        return this._objRef?.transmission;
    }
    set transmissionMap(value) {
        if (this._objRef) {
            this._objRef.transmissionMap = value;
        }
    }
    // @ts-ignore
    get transmissionMap() {
        return this._objRef?.transmissionMap;
    }
    set thickness(value) {
        if (this._objRef) {
            this._objRef.thickness = value;
        }
    }
    // @ts-ignore
    get thickness() {
        return this._objRef?.thickness;
    }
    set thicknessMap(value) {
        if (this._objRef) {
            this._objRef.thicknessMap = value;
        }
    }
    // @ts-ignore
    get thicknessMap() {
        return this._objRef?.thicknessMap;
    }
    set attenuationDistance(value) {
        if (this._objRef) {
            this._objRef.attenuationDistance = value;
        }
    }
    // @ts-ignore
    get attenuationDistance() {
        return this._objRef?.attenuationDistance;
    }
    set attenuationColor(value) {
        if (this._objRef) {
            this._objRef.attenuationColor = applyValue(this._objRef.attenuationColor, value);
        }
    }
    // @ts-ignore
    get attenuationColor() {
        return this._objRef?.attenuationColor;
    }
    set specularIntensity(value) {
        if (this._objRef) {
            this._objRef.specularIntensity = value;
        }
    }
    // @ts-ignore
    get specularIntensity() {
        return this._objRef?.specularIntensity;
    }
    set specularColor(value) {
        if (this._objRef) {
            this._objRef.specularColor = applyValue(this._objRef.specularColor, value);
        }
    }
    // @ts-ignore
    get specularColor() {
        return this._objRef?.specularColor;
    }
    set specularIntensityMap(value) {
        if (this._objRef) {
            this._objRef.specularIntensityMap = value;
        }
    }
    // @ts-ignore
    get specularIntensityMap() {
        return this._objRef?.specularIntensityMap;
    }
    set specularColorMap(value) {
        if (this._objRef) {
            this._objRef.specularColorMap = value;
        }
    }
    // @ts-ignore
    get specularColorMap() {
        return this._objRef?.specularColorMap;
    }
    set iridescenceMap(value) {
        if (this._objRef) {
            this._objRef.iridescenceMap = value;
        }
    }
    // @ts-ignore
    get iridescenceMap() {
        return this._objRef?.iridescenceMap;
    }
    set iridescenceIOR(value) {
        if (this._objRef) {
            this._objRef.iridescenceIOR = value;
        }
    }
    // @ts-ignore
    get iridescenceIOR() {
        return this._objRef?.iridescenceIOR;
    }
    set iridescence(value) {
        if (this._objRef) {
            this._objRef.iridescence = value;
        }
    }
    // @ts-ignore
    get iridescence() {
        return this._objRef?.iridescence;
    }
    set iridescenceThicknessRange(value) {
        if (this._objRef) {
            this._objRef.iridescenceThicknessRange = value;
        }
    }
    // @ts-ignore
    get iridescenceThicknessRange() {
        return this._objRef?.iridescenceThicknessRange;
    }
    set iridescenceThicknessMap(value) {
        if (this._objRef) {
            this._objRef.iridescenceThicknessMap = value;
        }
    }
    // @ts-ignore
    get iridescenceThicknessMap() {
        return this._objRef?.iridescenceThicknessMap;
    }
}
ThMeshPhysicalMaterial.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThMeshPhysicalMaterial, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThMeshPhysicalMaterial.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.1", type: ThMeshPhysicalMaterial, selector: "th-meshPhysicalMaterial", inputs: { type: "type", defines: "defines", clearcoat: "clearcoat", clearcoatMap: "clearcoatMap", clearcoatRoughness: "clearcoatRoughness", clearcoatRoughnessMap: "clearcoatRoughnessMap", clearcoatNormalScale: "clearcoatNormalScale", clearcoatNormalMap: "clearcoatNormalMap", reflectivity: "reflectivity", ior: "ior", sheen: "sheen", sheenColor: "sheenColor", sheenColorMap: "sheenColorMap", sheenRoughness: "sheenRoughness", sheenRoughnessMap: "sheenRoughnessMap", transmission: "transmission", transmissionMap: "transmissionMap", thickness: "thickness", thicknessMap: "thicknessMap", attenuationDistance: "attenuationDistance", attenuationColor: "attenuationColor", specularIntensity: "specularIntensity", specularColor: "specularColor", specularIntensityMap: "specularIntensityMap", specularColorMap: "specularColorMap", iridescenceMap: "iridescenceMap", iridescenceIOR: "iridescenceIOR", iridescence: "iridescence", iridescenceThicknessRange: "iridescenceThicknessRange", iridescenceThicknessMap: "iridescenceThicknessMap" }, providers: [
        {
            provide: ThMaterial,
            useExisting: forwardRef(() => ThMeshPhysicalMaterial)
        }
    ], usesInheritance: true, ngImport: i0, template: '<ng-content/>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThMeshPhysicalMaterial, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-meshPhysicalMaterial',
                    template: '<ng-content/>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThMaterial,
                            useExisting: forwardRef(() => ThMeshPhysicalMaterial)
                        }
                    ]
                }]
        }], propDecorators: { type: [{
                type: Input
            }], defines: [{
                type: Input
            }], clearcoat: [{
                type: Input
            }], clearcoatMap: [{
                type: Input
            }], clearcoatRoughness: [{
                type: Input
            }], clearcoatRoughnessMap: [{
                type: Input
            }], clearcoatNormalScale: [{
                type: Input
            }], clearcoatNormalMap: [{
                type: Input
            }], reflectivity: [{
                type: Input
            }], ior: [{
                type: Input
            }], sheen: [{
                type: Input
            }], sheenColor: [{
                type: Input
            }], sheenColorMap: [{
                type: Input
            }], sheenRoughness: [{
                type: Input
            }], sheenRoughnessMap: [{
                type: Input
            }], transmission: [{
                type: Input
            }], transmissionMap: [{
                type: Input
            }], thickness: [{
                type: Input
            }], thicknessMap: [{
                type: Input
            }], attenuationDistance: [{
                type: Input
            }], attenuationColor: [{
                type: Input
            }], specularIntensity: [{
                type: Input
            }], specularColor: [{
                type: Input
            }], specularIntensityMap: [{
                type: Input
            }], specularColorMap: [{
                type: Input
            }], iridescenceMap: [{
                type: Input
            }], iridescenceIOR: [{
                type: Input
            }], iridescence: [{
                type: Input
            }], iridescenceThicknessRange: [{
                type: Input
            }], iridescenceThicknessMap: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,