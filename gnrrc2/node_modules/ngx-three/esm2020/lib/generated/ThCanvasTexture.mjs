/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, forwardRef } from '@angular/core';
import { CanvasTexture } from 'three';
import { ThTextureBase } from '../ThTextureBase';
import { ThTexture } from './ThTexture';
import * as i0 from "@angular/core";
export class ThCanvasTexture extends ThTexture {
    getType() {
        return CanvasTexture;
    }
    // @ts-ignore
    get isCanvasTexture() {
        return this._objRef?.isCanvasTexture;
    }
}
ThCanvasTexture.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThCanvasTexture, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThCanvasTexture.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.1", type: ThCanvasTexture, selector: "th-canvasTexture", providers: [{ provide: ThTextureBase, useExisting: forwardRef(() => ThCanvasTexture) }], usesInheritance: true, ngImport: i0, template: '<ng-content/>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThCanvasTexture, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-canvasTexture',
                    template: '<ng-content/>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [{ provide: ThTextureBase, useExisting: forwardRef(() => ThCanvasTexture) }]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGhDYW52YXNUZXh0dXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXRocmVlL3NyYy9saWIvZ2VuZXJhdGVkL1RoQ2FudmFzVGV4dHVyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx5REFBeUQ7QUFDekQseUNBQXlDO0FBQ3pDLHFJQUFxSTtBQUNySSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBUSxNQUFNLGVBQWUsQ0FBQztBQUNyRixPQUFPLEVBQ0wsYUFBYSxFQVFkLE1BQU0sT0FBTyxDQUFDO0FBQ2YsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxhQUFhLENBQUM7O0FBUXhDLE1BQU0sT0FBTyxlQWFYLFNBQVEsU0FBbUI7SUFDcEIsT0FBTztRQUNaLE9BQU8sYUFBYSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxhQUFhO0lBQ2IsSUFBVyxlQUFlO1FBQ3hCLE9BQU8sSUFBSSxDQUFDLE9BQU8sRUFBRSxlQUFlLENBQUM7SUFDdkMsQ0FBQzs7NEdBckJVLGVBQWU7Z0dBQWYsZUFBZSwyQ0FGZixDQUFDLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsaURBRjdFLGVBQWU7MkZBSWQsZUFBZTtrQkFOM0IsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsa0JBQWtCO29CQUM1QixRQUFRLEVBQUUsZUFBZTtvQkFDekIsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07b0JBQy9DLFNBQVMsRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsQ0FBQyxFQUFFLENBQUM7aUJBQ3hGIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlcnNjb3JlLWRhbmdsZSAqL1xuLyogZXNsaW50LWRpc2FibGUgQGFuZ3VsYXItZXNsaW50L2NvbXBvbmVudC1zZWxlY3RvciwgQGFuZ3VsYXItZXNsaW50L2NvbXBvbmVudC1jbGFzcy1zdWZmaXgsIGpzZG9jL25vLXR5cGVzLCBpbXBvcnQvbm8tZGVwcmVjYXRlZCAqL1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgZm9yd2FyZFJlZiwgVHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgQ2FudmFzVGV4dHVyZSxcbiAgTWFnbmlmaWNhdGlvblRleHR1cmVGaWx0ZXIsXG4gIE1hcHBpbmcsXG4gIE1pbmlmaWNhdGlvblRleHR1cmVGaWx0ZXIsXG4gIE9mZnNjcmVlbkNhbnZhcyxcbiAgUGl4ZWxGb3JtYXQsXG4gIFRleHR1cmVEYXRhVHlwZSxcbiAgV3JhcHBpbmdcbn0gZnJvbSAndGhyZWUnO1xuaW1wb3J0IHsgVGhUZXh0dXJlQmFzZSB9IGZyb20gJy4uL1RoVGV4dHVyZUJhc2UnO1xuaW1wb3J0IHsgVGhUZXh0dXJlIH0gZnJvbSAnLi9UaFRleHR1cmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd0aC1jYW52YXNUZXh0dXJlJyxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudC8+JyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHByb3ZpZGVyczogW3sgcHJvdmlkZTogVGhUZXh0dXJlQmFzZSwgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gVGhDYW52YXNUZXh0dXJlKSB9XVxufSlcbmV4cG9ydCBjbGFzcyBUaENhbnZhc1RleHR1cmU8XG4gIFQgZXh0ZW5kcyBDYW52YXNUZXh0dXJlID0gQ2FudmFzVGV4dHVyZSxcbiAgVEFSR1MgPSBbXG4gICAgY2FudmFzOiBUZXhJbWFnZVNvdXJjZSB8IE9mZnNjcmVlbkNhbnZhcyxcbiAgICBtYXBwaW5nPzogTWFwcGluZyxcbiAgICB3cmFwUz86IFdyYXBwaW5nLFxuICAgIHdyYXBUPzogV3JhcHBpbmcsXG4gICAgbWFnRmlsdGVyPzogTWFnbmlmaWNhdGlvblRleHR1cmVGaWx0ZXIsXG4gICAgbWluRmlsdGVyPzogTWluaWZpY2F0aW9uVGV4dHVyZUZpbHRlcixcbiAgICBmb3JtYXQ/OiBQaXhlbEZvcm1hdCxcbiAgICB0eXBlPzogVGV4dHVyZURhdGFUeXBlLFxuICAgIGFuaXNvdHJvcHk/OiBudW1iZXJcbiAgXVxuPiBleHRlbmRzIFRoVGV4dHVyZTxULCBUQVJHUz4ge1xuICBwdWJsaWMgZ2V0VHlwZSgpOiBUeXBlPENhbnZhc1RleHR1cmU+IHtcbiAgICByZXR1cm4gQ2FudmFzVGV4dHVyZTtcbiAgfVxuXG4gIC8vIEB0cy1pZ25vcmVcbiAgcHVibGljIGdldCBpc0NhbnZhc1RleHR1cmUoKTogdHJ1ZSB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuX29ialJlZj8uaXNDYW52YXNUZXh0dXJlO1xuICB9XG59XG4iXX0=