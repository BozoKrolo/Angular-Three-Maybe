/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, Input, SkipSelf } from '@angular/core';
import { Object3D } from 'three';
import { ThObjectBase } from '../ThObjectBase';
import { applyValue } from '../util';
import * as i0 from "@angular/core";
export class ThObject3D extends ThObjectBase {
    getType() {
        return Object3D;
    }
    // @ts-ignore
    get isObject3D() {
        return this._objRef?.isObject3D;
    }
    // @ts-ignore
    get id() {
        return this._objRef?.id;
    }
    set uuid(value) {
        if (this._objRef) {
            this._objRef.uuid = value;
        }
    }
    // @ts-ignore
    get uuid() {
        return this._objRef?.uuid;
    }
    set name(value) {
        if (this._objRef) {
            this._objRef.name = value;
        }
    }
    // @ts-ignore
    get name() {
        return this._objRef?.name;
    }
    // @ts-ignore
    get type() {
        return this._objRef?.type;
    }
    set children(value) {
        if (this._objRef) {
            this._objRef.children = value;
        }
    }
    // @ts-ignore
    get children() {
        return this._objRef?.children;
    }
    set up(value) {
        if (this._objRef) {
            this._objRef.up = applyValue(this._objRef.up, value);
        }
    }
    // @ts-ignore
    get up() {
        return this._objRef?.up;
    }
    set position(value) {
        if (this._objRef) {
            applyValue(this._objRef.position, value);
        }
    }
    // @ts-ignore
    get position() {
        return this._objRef?.position;
    }
    set rotation(value) {
        if (this._objRef) {
            applyValue(this._objRef.rotation, value);
        }
    }
    // @ts-ignore
    get rotation() {
        return this._objRef?.rotation;
    }
    set quaternion(value) {
        if (this._objRef) {
            applyValue(this._objRef.quaternion, value);
        }
    }
    // @ts-ignore
    get quaternion() {
        return this._objRef?.quaternion;
    }
    set scale(value) {
        if (this._objRef) {
            applyValue(this._objRef.scale, value);
        }
    }
    // @ts-ignore
    get scale() {
        return this._objRef?.scale;
    }
    set modelViewMatrix(value) {
        if (this._objRef) {
            applyValue(this._objRef.modelViewMatrix, value);
        }
    }
    // @ts-ignore
    get modelViewMatrix() {
        return this._objRef?.modelViewMatrix;
    }
    set normalMatrix(value) {
        if (this._objRef) {
            applyValue(this._objRef.normalMatrix, value);
        }
    }
    // @ts-ignore
    get normalMatrix() {
        return this._objRef?.normalMatrix;
    }
    set matrix(value) {
        if (this._objRef) {
            this._objRef.matrix = applyValue(this._objRef.matrix, value);
        }
    }
    // @ts-ignore
    get matrix() {
        return this._objRef?.matrix;
    }
    set matrixWorld(value) {
        if (this._objRef) {
            this._objRef.matrixWorld = applyValue(this._objRef.matrixWorld, value);
        }
    }
    // @ts-ignore
    get matrixWorld() {
        return this._objRef?.matrixWorld;
    }
    set matrixAutoUpdate(value) {
        if (this._objRef) {
            this._objRef.matrixAutoUpdate = value;
        }
    }
    // @ts-ignore
    get matrixAutoUpdate() {
        return this._objRef?.matrixAutoUpdate;
    }
    set matrixWorldAutoUpdate(value) {
        if (this._objRef) {
            this._objRef.matrixWorldAutoUpdate = value;
        }
    }
    // @ts-ignore
    get matrixWorldAutoUpdate() {
        return this._objRef?.matrixWorldAutoUpdate;
    }
    set matrixWorldNeedsUpdate(value) {
        if (this._objRef) {
            this._objRef.matrixWorldNeedsUpdate = value;
        }
    }
    // @ts-ignore
    get matrixWorldNeedsUpdate() {
        return this._objRef?.matrixWorldNeedsUpdate;
    }
    set layers(value) {
        if (this._objRef) {
            this._objRef.layers = applyValue(this._objRef.layers, value);
        }
    }
    // @ts-ignore
    get layers() {
        return this._objRef?.layers;
    }
    set visible(value) {
        if (this._objRef) {
            this._objRef.visible = value;
        }
    }
    // @ts-ignore
    get visible() {
        return this._objRef?.visible;
    }
    set castShadow(value) {
        if (this._objRef) {
            this._objRef.castShadow = value;
        }
    }
    // @ts-ignore
    get castShadow() {
        return this._objRef?.castShadow;
    }
    set receiveShadow(value) {
        if (this._objRef) {
            this._objRef.receiveShadow = value;
        }
    }
    // @ts-ignore
    get receiveShadow() {
        return this._objRef?.receiveShadow;
    }
    set frustumCulled(value) {
        if (this._objRef) {
            this._objRef.frustumCulled = value;
        }
    }
    // @ts-ignore
    get frustumCulled() {
        return this._objRef?.frustumCulled;
    }
    set renderOrder(value) {
        if (this._objRef) {
            this._objRef.renderOrder = value;
        }
    }
    // @ts-ignore
    get renderOrder() {
        return this._objRef?.renderOrder;
    }
    set animations(value) {
        if (this._objRef) {
            this._objRef.animations = value;
        }
    }
    // @ts-ignore
    get animations() {
        return this._objRef?.animations;
    }
    set userData(value) {
        if (this._objRef) {
            this._objRef.userData = value;
        }
    }
    // @ts-ignore
    get userData() {
        return this._objRef?.userData;
    }
    set customDepthMaterial(value) {
        if (this._objRef) {
            this._objRef.customDepthMaterial = value;
        }
    }
    // @ts-ignore
    get customDepthMaterial() {
        return this._objRef?.customDepthMaterial;
    }
    set customDistanceMaterial(value) {
        if (this._objRef) {
            this._objRef.customDistanceMaterial = value;
        }
    }
    // @ts-ignore
    get customDistanceMaterial() {
        return this._objRef?.customDistanceMaterial;
    }
    set onBeforeRender(value) {
        if (this._objRef) {
            this._objRef.onBeforeRender = value;
        }
    }
    // @ts-ignore
    get onBeforeRender() {
        return this._objRef?.onBeforeRender;
    }
    set onAfterRender(value) {
        if (this._objRef) {
            this._objRef.onAfterRender = value;
        }
    }
    // @ts-ignore
    get onAfterRender() {
        return this._objRef?.onAfterRender;
    }
    constructor(parent) {
        super(parent);
    }
}
ThObject3D.DEFAULT_UP = Object3D.DEFAULT_UP;
ThObject3D.DEFAULT_MATRIX_AUTO_UPDATE = Object3D.DEFAULT_MATRIX_AUTO_UPDATE;
ThObject3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE;
ThObject3D.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThObject3D, deps: [{ token: ThObject3D, skipSelf: true }], target: i0.ɵɵFactoryTarget.Component });
ThObject3D.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.1", type: ThObject3D, selector: "th-object3D", inputs: { uuid: "uuid", name: "name", children: "children", up: "up", position: "position", rotation: "rotation", quaternion: "quaternion", scale: "scale", modelViewMatrix: "modelViewMatrix", normalMatrix: "normalMatrix", matrix: "matrix", matrixWorld: "matrixWorld", matrixAutoUpdate: "matrixAutoUpdate", matrixWorldAutoUpdate: "matrixWorldAutoUpdate", matrixWorldNeedsUpdate: "matrixWorldNeedsUpdate", layers: "layers", visible: "visible", castShadow: "castShadow", receiveShadow: "receiveShadow", frustumCulled: "frustumCulled", renderOrder: "renderOrder", animations: "animations", userData: "userData", customDepthMaterial: "customDepthMaterial", customDistanceMaterial: "customDistanceMaterial", onBeforeRender: "onBeforeRender", onAfterRender: "onAfterRender" }, providers: [], usesInheritance: true, ngImport: i0, template: '<ng-content/>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThObject3D, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-object3D',
                    template: '<ng-content/>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: []
                }]
        }], ctorParameters: function () { return [{ type: ThObject3D, decorators: [{
                    type: SkipSelf
                }] }]; }, propDecorators: { uuid: [{
                type: Input
            }], name: [{
                type: Input
            }], children: [{
                type: Input
            }], up: [{
                type: Input
            }], position: [{
                type: Input
            }], rotation: [{
                type: Input
            }], quaternion: [{
                type: Input
            }], scale: [{
                type: Input
            }], modelViewMatrix: [{
                type: Input
            }], normalMatrix: [{
                type: Input
            }], matrix: [{
                type: Input
            }], matrixWorld: [{
                type: Input
            }], matrixAutoUpdate: [{
                type: Input
            }], matrixWorldAutoUpdate: [{
                type: Input
            }], matrixWorldNeedsUpdate: [{
                type: Input
            }], layers: [{
                type: Input
            }], visible: [{
                type: Input
            }], castShadow: [{
                type: Input
            }], receiveShadow: [{
                type: Input
            }], frustumCulled: [{
                type: Input
            }], renderOrder: [{
                type: Input
            }], animations: [{
                type: Input
            }], userData: [{
                type: Input
            }], customDepthMaterial: [{
                type: Input
            }], customDistanceMaterial: [{
                type: Input
            }], onBeforeRender: [{
                type: Input
            }], onAfterRender: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,