/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, forwardRef, Input } from '@angular/core';
import { LOD } from 'three';
import { ThObject3D } from './ThObject3D';
import * as i0 from "@angular/core";
export class ThLOD extends ThObject3D {
    getType() {
        return LOD;
    }
    // @ts-ignore
    get isLOD() {
        return this._objRef?.isLOD;
    }
    // @ts-ignore
    get type() {
        return this._objRef?.type;
    }
    set levels(value) {
        if (this._objRef) {
            this._objRef.levels = value;
        }
    }
    // @ts-ignore
    get levels() {
        return this._objRef?.levels;
    }
    set autoUpdate(value) {
        if (this._objRef) {
            this._objRef.autoUpdate = value;
        }
    }
    // @ts-ignore
    get autoUpdate() {
        return this._objRef?.autoUpdate;
    }
}
ThLOD.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThLOD, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThLOD.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.1", type: ThLOD, selector: "th-lOD", inputs: { levels: "levels", autoUpdate: "autoUpdate" }, providers: [{ provide: ThObject3D, useExisting: forwardRef(() => ThLOD) }], usesInheritance: true, ngImport: i0, template: '<ng-content/>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThLOD, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-lOD',
                    template: '<ng-content/>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [{ provide: ThObject3D, useExisting: forwardRef(() => ThLOD) }]
                }]
        }], propDecorators: { levels: [{
                type: Input
            }], autoUpdate: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGhMT0QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtdGhyZWUvc3JjL2xpYi9nZW5lcmF0ZWQvVGhMT0QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEseURBQXlEO0FBQ3pELHlDQUF5QztBQUN6QyxxSUFBcUk7QUFDckksT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFRLE1BQU0sZUFBZSxDQUFDO0FBQzVGLE9BQU8sRUFBUyxHQUFHLEVBQVksTUFBTSxPQUFPLENBQUM7QUFDN0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGNBQWMsQ0FBQzs7QUFRMUMsTUFBTSxPQUFPLEtBQXVDLFNBQVEsVUFBMkI7SUFDOUUsT0FBTztRQUNaLE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQztJQUVELGFBQWE7SUFDYixJQUFXLEtBQUs7UUFDZCxPQUFPLElBQUksQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDO0lBQzdCLENBQUM7SUFDRCxhQUFhO0lBQ2IsSUFBVyxJQUFJO1FBQ2IsT0FBTyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQztJQUM1QixDQUFDO0lBQ0QsSUFDVyxNQUFNLENBQ2YsS0FPRTtRQUVGLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7U0FDN0I7SUFDSCxDQUFDO0lBRUQsYUFBYTtJQUNiLElBQVcsTUFBTTtRQVVmLE9BQU8sSUFBSSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUM7SUFDOUIsQ0FBQztJQUNELElBQ1csVUFBVSxDQUFDLEtBQWM7UUFDbEMsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztTQUNqQztJQUNILENBQUM7SUFFRCxhQUFhO0lBQ2IsSUFBVyxVQUFVO1FBQ25CLE9BQU8sSUFBSSxDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUM7SUFDbEMsQ0FBQzs7a0dBcERVLEtBQUs7c0ZBQUwsS0FBSyx5RkFGTCxDQUFDLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsaURBRmhFLGVBQWU7MkZBSWQsS0FBSztrQkFOakIsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsUUFBUTtvQkFDbEIsUUFBUSxFQUFFLGVBQWU7b0JBQ3pCLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLEVBQUUsQ0FBQztpQkFDM0U7OEJBZVksTUFBTTtzQkFEaEIsS0FBSztnQkE4QkssVUFBVTtzQkFEcEIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZXJzY29yZS1kYW5nbGUgKi9cbi8qIGVzbGludC1kaXNhYmxlIEBhbmd1bGFyLWVzbGludC9jb21wb25lbnQtc2VsZWN0b3IsIEBhbmd1bGFyLWVzbGludC9jb21wb25lbnQtY2xhc3Mtc3VmZml4LCBqc2RvYy9uby10eXBlcywgaW1wb3J0L25vLWRlcHJlY2F0ZWQgKi9cbmltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIGZvcndhcmRSZWYsIElucHV0LCBUeXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBFdmVudCwgTE9ELCBPYmplY3QzRCB9IGZyb20gJ3RocmVlJztcbmltcG9ydCB7IFRoT2JqZWN0M0QgfSBmcm9tICcuL1RoT2JqZWN0M0QnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd0aC1sT0QnLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50Lz4nLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgcHJvdmlkZXJzOiBbeyBwcm92aWRlOiBUaE9iamVjdDNELCB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBUaExPRCkgfV1cbn0pXG5leHBvcnQgY2xhc3MgVGhMT0Q8VCBleHRlbmRzIExPRCA9IExPRCwgVEFSR1MgPSBbXT4gZXh0ZW5kcyBUaE9iamVjdDNEPEV2ZW50LCBULCBUQVJHUz4ge1xuICBwdWJsaWMgZ2V0VHlwZSgpOiBUeXBlPExPRD4ge1xuICAgIHJldHVybiBMT0Q7XG4gIH1cblxuICAvLyBAdHMtaWdub3JlXG4gIHB1YmxpYyBnZXQgaXNMT0QoKTogdHJ1ZSB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuX29ialJlZj8uaXNMT0Q7XG4gIH1cbiAgLy8gQHRzLWlnbm9yZVxuICBwdWJsaWMgZ2V0IHR5cGUoKTogKHN0cmluZyB8ICdMT0QnKSB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuX29ialJlZj8udHlwZTtcbiAgfVxuICBASW5wdXQoKVxuICBwdWJsaWMgc2V0IGxldmVscyhcbiAgICB2YWx1ZTogQXJyYXk8e1xuICAgICAgLyoqIFRoZSBPYmplY3QzRCB0byBkaXNwbGF5IGF0IHRoaXMgbGV2ZWwuICovXG4gICAgICBvYmplY3Q6IE9iamVjdDNEO1xuICAgICAgLyoqIFRoZSBkaXN0YW5jZSBhdCB3aGljaCB0byBkaXNwbGF5IHRoaXMgbGV2ZWwgb2YgZGV0YWlsLiBFeHBlY3RzIGEgYEZsb2F0YC4gKi9cbiAgICAgIGRpc3RhbmNlOiBudW1iZXI7XG4gICAgICAvKiogVGhyZXNob2xkIHVzZWQgdG8gYXZvaWQgZmxpY2tlcmluZyBhdCBMT0QgYm91bmRhcmllcywgYXMgYSBmcmFjdGlvbiBvZiBkaXN0YW5jZS4gRXhwZWN0cyBhIGBGbG9hdGAuICovXG4gICAgICBoeXN0ZXJlc2lzOiBudW1iZXI7XG4gICAgfT5cbiAgKSB7XG4gICAgaWYgKHRoaXMuX29ialJlZikge1xuICAgICAgdGhpcy5fb2JqUmVmLmxldmVscyA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIC8vIEB0cy1pZ25vcmVcbiAgcHVibGljIGdldCBsZXZlbHMoKTpcbiAgICB8IEFycmF5PHtcbiAgICAgICAgLyoqIFRoZSBPYmplY3QzRCB0byBkaXNwbGF5IGF0IHRoaXMgbGV2ZWwuICovXG4gICAgICAgIG9iamVjdDogT2JqZWN0M0Q7XG4gICAgICAgIC8qKiBUaGUgZGlzdGFuY2UgYXQgd2hpY2ggdG8gZGlzcGxheSB0aGlzIGxldmVsIG9mIGRldGFpbC4gRXhwZWN0cyBhIGBGbG9hdGAuICovXG4gICAgICAgIGRpc3RhbmNlOiBudW1iZXI7XG4gICAgICAgIC8qKiBUaHJlc2hvbGQgdXNlZCB0byBhdm9pZCBmbGlja2VyaW5nIGF0IExPRCBib3VuZGFyaWVzLCBhcyBhIGZyYWN0aW9uIG9mIGRpc3RhbmNlLiBFeHBlY3RzIGEgYEZsb2F0YC4gKi9cbiAgICAgICAgaHlzdGVyZXNpczogbnVtYmVyO1xuICAgICAgfT5cbiAgICB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuX29ialJlZj8ubGV2ZWxzO1xuICB9XG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBzZXQgYXV0b1VwZGF0ZSh2YWx1ZTogYm9vbGVhbikge1xuICAgIGlmICh0aGlzLl9vYmpSZWYpIHtcbiAgICAgIHRoaXMuX29ialJlZi5hdXRvVXBkYXRlID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgLy8gQHRzLWlnbm9yZVxuICBwdWJsaWMgZ2V0IGF1dG9VcGRhdGUoKTogYm9vbGVhbiB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuX29ialJlZj8uYXV0b1VwZGF0ZTtcbiAgfVxufVxuIl19