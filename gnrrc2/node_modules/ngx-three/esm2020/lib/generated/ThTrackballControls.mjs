/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, forwardRef, Input } from '@angular/core';
import { TrackballControls } from 'three/examples/jsm/controls/TrackballControls';
import { ThControlBase } from '../ThControlBase';
import { applyValue } from '../util';
import * as i0 from "@angular/core";
export class ThTrackballControls extends ThControlBase {
    getType() {
        return TrackballControls;
    }
    set object(value) {
        if (this._objRef) {
            this._objRef.object = value;
        }
    }
    // @ts-ignore
    get object() {
        return this._objRef?.object;
    }
    set domElement(value) {
        if (this._objRef) {
            this._objRef.domElement = value;
        }
    }
    // @ts-ignore
    get domElement() {
        return this._objRef?.domElement;
    }
    set enabled(value) {
        if (this._objRef) {
            this._objRef.enabled = value;
        }
    }
    // @ts-ignore
    get enabled() {
        return this._objRef?.enabled;
    }
    set screen(value) {
        if (this._objRef) {
            this._objRef.screen = value;
        }
    }
    // @ts-ignore
    get screen() {
        return this._objRef?.screen;
    }
    set rotateSpeed(value) {
        if (this._objRef) {
            this._objRef.rotateSpeed = value;
        }
    }
    // @ts-ignore
    get rotateSpeed() {
        return this._objRef?.rotateSpeed;
    }
    set zoomSpeed(value) {
        if (this._objRef) {
            this._objRef.zoomSpeed = value;
        }
    }
    // @ts-ignore
    get zoomSpeed() {
        return this._objRef?.zoomSpeed;
    }
    set panSpeed(value) {
        if (this._objRef) {
            this._objRef.panSpeed = value;
        }
    }
    // @ts-ignore
    get panSpeed() {
        return this._objRef?.panSpeed;
    }
    set noRotate(value) {
        if (this._objRef) {
            this._objRef.noRotate = value;
        }
    }
    // @ts-ignore
    get noRotate() {
        return this._objRef?.noRotate;
    }
    set noZoom(value) {
        if (this._objRef) {
            this._objRef.noZoom = value;
        }
    }
    // @ts-ignore
    get noZoom() {
        return this._objRef?.noZoom;
    }
    set noPan(value) {
        if (this._objRef) {
            this._objRef.noPan = value;
        }
    }
    // @ts-ignore
    get noPan() {
        return this._objRef?.noPan;
    }
    set noRoll(value) {
        if (this._objRef) {
            this._objRef.noRoll = value;
        }
    }
    // @ts-ignore
    get noRoll() {
        return this._objRef?.noRoll;
    }
    set staticMoving(value) {
        if (this._objRef) {
            this._objRef.staticMoving = value;
        }
    }
    // @ts-ignore
    get staticMoving() {
        return this._objRef?.staticMoving;
    }
    set dynamicDampingFactor(value) {
        if (this._objRef) {
            this._objRef.dynamicDampingFactor = value;
        }
    }
    // @ts-ignore
    get dynamicDampingFactor() {
        return this._objRef?.dynamicDampingFactor;
    }
    set minDistance(value) {
        if (this._objRef) {
            this._objRef.minDistance = value;
        }
    }
    // @ts-ignore
    get minDistance() {
        return this._objRef?.minDistance;
    }
    set maxDistance(value) {
        if (this._objRef) {
            this._objRef.maxDistance = value;
        }
    }
    // @ts-ignore
    get maxDistance() {
        return this._objRef?.maxDistance;
    }
    set minZoom(value) {
        if (this._objRef) {
            this._objRef.minZoom = value;
        }
    }
    // @ts-ignore
    get minZoom() {
        return this._objRef?.minZoom;
    }
    set maxZoom(value) {
        if (this._objRef) {
            this._objRef.maxZoom = value;
        }
    }
    // @ts-ignore
    get maxZoom() {
        return this._objRef?.maxZoom;
    }
    set keys(value) {
        if (this._objRef) {
            this._objRef.keys = value;
        }
    }
    // @ts-ignore
    get keys() {
        return this._objRef?.keys;
    }
    set mouseButtons(value) {
        if (this._objRef) {
            this._objRef.mouseButtons = value;
        }
    }
    // @ts-ignore
    get mouseButtons() {
        return this._objRef?.mouseButtons;
    }
    set target(value) {
        if (this._objRef) {
            this._objRef.target = applyValue(this._objRef.target, value);
        }
    }
    // @ts-ignore
    get target() {
        return this._objRef?.target;
    }
    set position0(value) {
        if (this._objRef) {
            this._objRef.position0 = applyValue(this._objRef.position0, value);
        }
    }
    // @ts-ignore
    get position0() {
        return this._objRef?.position0;
    }
    set target0(value) {
        if (this._objRef) {
            this._objRef.target0 = applyValue(this._objRef.target0, value);
        }
    }
    // @ts-ignore
    get target0() {
        return this._objRef?.target0;
    }
    set up0(value) {
        if (this._objRef) {
            this._objRef.up0 = applyValue(this._objRef.up0, value);
        }
    }
    // @ts-ignore
    get up0() {
        return this._objRef?.up0;
    }
}
ThTrackballControls.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThTrackballControls, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThTrackballControls.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.1", type: ThTrackballControls, selector: "th-trackballControls", inputs: { object: "object", domElement: "domElement", enabled: "enabled", screen: "screen", rotateSpeed: "rotateSpeed", zoomSpeed: "zoomSpeed", panSpeed: "panSpeed", noRotate: "noRotate", noZoom: "noZoom", noPan: "noPan", noRoll: "noRoll", staticMoving: "staticMoving", dynamicDampingFactor: "dynamicDampingFactor", minDistance: "minDistance", maxDistance: "maxDistance", minZoom: "minZoom", maxZoom: "maxZoom", keys: "keys", mouseButtons: "mouseButtons", target: "target", position0: "position0", target0: "target0", up0: "up0" }, providers: [
        {
            provide: ThControlBase,
            useExisting: forwardRef(() => ThTrackballControls)
        }
    ], usesInheritance: true, ngImport: i0, template: '<ng-content/>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThTrackballControls, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-trackballControls',
                    template: '<ng-content/>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ThControlBase,
                            useExisting: forwardRef(() => ThTrackballControls)
                        }
                    ]
                }]
        }], propDecorators: { object: [{
                type: Input
            }], domElement: [{
                type: Input
            }], enabled: [{
                type: Input
            }], screen: [{
                type: Input
            }], rotateSpeed: [{
                type: Input
            }], zoomSpeed: [{
                type: Input
            }], panSpeed: [{
                type: Input
            }], noRotate: [{
                type: Input
            }], noZoom: [{
                type: Input
            }], noPan: [{
                type: Input
            }], noRoll: [{
                type: Input
            }], staticMoving: [{
                type: Input
            }], dynamicDampingFactor: [{
                type: Input
            }], minDistance: [{
                type: Input
            }], maxDistance: [{
                type: Input
            }], minZoom: [{
                type: Input
            }], maxZoom: [{
                type: Input
            }], keys: [{
                type: Input
            }], mouseButtons: [{
                type: Input
            }], target: [{
                type: Input
            }], position0: [{
                type: Input
            }], target0: [{
                type: Input
            }], up0: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,