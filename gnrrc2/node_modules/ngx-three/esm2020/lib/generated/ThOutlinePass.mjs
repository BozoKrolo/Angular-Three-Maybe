/* eslint-disable @typescript-eslint/ban-types */
/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @angular-eslint/component-selector, @angular-eslint/component-class-suffix, jsdoc/no-types, import/no-deprecated */
import { ChangeDetectionStrategy, Component, forwardRef, Input } from '@angular/core';
import { OutlinePass } from 'three/examples/jsm/postprocessing/OutlinePass';
import { ThPassBase } from '../ThPassBase';
import { applyValue } from '../util';
import { ThPass } from './ThPass';
import * as i0 from "@angular/core";
export class ThOutlinePass extends ThPass {
    getType() {
        return OutlinePass;
    }
    set renderScene(value) {
        if (this._objRef) {
            this._objRef.renderScene = value;
        }
    }
    // @ts-ignore
    get renderScene() {
        return this._objRef?.renderScene;
    }
    set renderCamera(value) {
        if (this._objRef) {
            this._objRef.renderCamera = value;
        }
    }
    // @ts-ignore
    get renderCamera() {
        return this._objRef?.renderCamera;
    }
    set selectedObjects(value) {
        if (this._objRef) {
            this._objRef.selectedObjects = value;
        }
    }
    // @ts-ignore
    get selectedObjects() {
        return this._objRef?.selectedObjects;
    }
    set visibleEdgeColor(value) {
        if (this._objRef) {
            this._objRef.visibleEdgeColor = applyValue(this._objRef.visibleEdgeColor, value);
        }
    }
    // @ts-ignore
    get visibleEdgeColor() {
        return this._objRef?.visibleEdgeColor;
    }
    set hiddenEdgeColor(value) {
        if (this._objRef) {
            this._objRef.hiddenEdgeColor = applyValue(this._objRef.hiddenEdgeColor, value);
        }
    }
    // @ts-ignore
    get hiddenEdgeColor() {
        return this._objRef?.hiddenEdgeColor;
    }
    set edgeGlow(value) {
        if (this._objRef) {
            this._objRef.edgeGlow = value;
        }
    }
    // @ts-ignore
    get edgeGlow() {
        return this._objRef?.edgeGlow;
    }
    set usePatternTexture(value) {
        if (this._objRef) {
            this._objRef.usePatternTexture = value;
        }
    }
    // @ts-ignore
    get usePatternTexture() {
        return this._objRef?.usePatternTexture;
    }
    set edgeThickness(value) {
        if (this._objRef) {
            this._objRef.edgeThickness = value;
        }
    }
    // @ts-ignore
    get edgeThickness() {
        return this._objRef?.edgeThickness;
    }
    set edgeStrength(value) {
        if (this._objRef) {
            this._objRef.edgeStrength = value;
        }
    }
    // @ts-ignore
    get edgeStrength() {
        return this._objRef?.edgeStrength;
    }
    set downSampleRatio(value) {
        if (this._objRef) {
            this._objRef.downSampleRatio = value;
        }
    }
    // @ts-ignore
    get downSampleRatio() {
        return this._objRef?.downSampleRatio;
    }
    set pulsePeriod(value) {
        if (this._objRef) {
            this._objRef.pulsePeriod = value;
        }
    }
    // @ts-ignore
    get pulsePeriod() {
        return this._objRef?.pulsePeriod;
    }
    set resolution(value) {
        if (this._objRef) {
            this._objRef.resolution = applyValue(this._objRef.resolution, value);
        }
    }
    // @ts-ignore
    get resolution() {
        return this._objRef?.resolution;
    }
    set patternTexture(value) {
        if (this._objRef) {
            this._objRef.patternTexture = value;
        }
    }
    // @ts-ignore
    get patternTexture() {
        return this._objRef?.patternTexture;
    }
    set maskBufferMaterial(value) {
        if (this._objRef) {
            this._objRef.maskBufferMaterial = value;
        }
    }
    // @ts-ignore
    get maskBufferMaterial() {
        return this._objRef?.maskBufferMaterial;
    }
    set renderTargetMaskBuffer(value) {
        if (this._objRef) {
            this._objRef.renderTargetMaskBuffer = value;
        }
    }
    // @ts-ignore
    get renderTargetMaskBuffer() {
        return this._objRef?.renderTargetMaskBuffer;
    }
    set depthMaterial(value) {
        if (this._objRef) {
            this._objRef.depthMaterial = value;
        }
    }
    // @ts-ignore
    get depthMaterial() {
        return this._objRef?.depthMaterial;
    }
    set prepareMaskMaterial(value) {
        if (this._objRef) {
            this._objRef.prepareMaskMaterial = value;
        }
    }
    // @ts-ignore
    get prepareMaskMaterial() {
        return this._objRef?.prepareMaskMaterial;
    }
    set renderTargetDepthBuffer(value) {
        if (this._objRef) {
            this._objRef.renderTargetDepthBuffer = value;
        }
    }
    // @ts-ignore
    get renderTargetDepthBuffer() {
        return this._objRef?.renderTargetDepthBuffer;
    }
    set renderTargetMaskDownSampleBuffer(value) {
        if (this._objRef) {
            this._objRef.renderTargetMaskDownSampleBuffer = value;
        }
    }
    // @ts-ignore
    get renderTargetMaskDownSampleBuffer() {
        return this._objRef?.renderTargetMaskDownSampleBuffer;
    }
    set renderTargetBlurBuffer1(value) {
        if (this._objRef) {
            this._objRef.renderTargetBlurBuffer1 = value;
        }
    }
    // @ts-ignore
    get renderTargetBlurBuffer1() {
        return this._objRef?.renderTargetBlurBuffer1;
    }
    set renderTargetBlurBuffer2(value) {
        if (this._objRef) {
            this._objRef.renderTargetBlurBuffer2 = value;
        }
    }
    // @ts-ignore
    get renderTargetBlurBuffer2() {
        return this._objRef?.renderTargetBlurBuffer2;
    }
    set edgeDetectionMaterial(value) {
        if (this._objRef) {
            this._objRef.edgeDetectionMaterial = value;
        }
    }
    // @ts-ignore
    get edgeDetectionMaterial() {
        return this._objRef?.edgeDetectionMaterial;
    }
    set renderTargetEdgeBuffer1(value) {
        if (this._objRef) {
            this._objRef.renderTargetEdgeBuffer1 = value;
        }
    }
    // @ts-ignore
    get renderTargetEdgeBuffer1() {
        return this._objRef?.renderTargetEdgeBuffer1;
    }
    set renderTargetEdgeBuffer2(value) {
        if (this._objRef) {
            this._objRef.renderTargetEdgeBuffer2 = value;
        }
    }
    // @ts-ignore
    get renderTargetEdgeBuffer2() {
        return this._objRef?.renderTargetEdgeBuffer2;
    }
    set separableBlurMaterial1(value) {
        if (this._objRef) {
            this._objRef.separableBlurMaterial1 = value;
        }
    }
    // @ts-ignore
    get separableBlurMaterial1() {
        return this._objRef?.separableBlurMaterial1;
    }
    set separableBlurMaterial2(value) {
        if (this._objRef) {
            this._objRef.separableBlurMaterial2 = value;
        }
    }
    // @ts-ignore
    get separableBlurMaterial2() {
        return this._objRef?.separableBlurMaterial2;
    }
    set overlayMaterial(value) {
        if (this._objRef) {
            this._objRef.overlayMaterial = value;
        }
    }
    // @ts-ignore
    get overlayMaterial() {
        return this._objRef?.overlayMaterial;
    }
    set copyUniforms(value) {
        if (this._objRef) {
            this._objRef.copyUniforms = value;
        }
    }
    // @ts-ignore
    get copyUniforms() {
        return this._objRef?.copyUniforms;
    }
    set materialCopy(value) {
        if (this._objRef) {
            this._objRef.materialCopy = value;
        }
    }
    // @ts-ignore
    get materialCopy() {
        return this._objRef?.materialCopy;
    }
    set oldClearColor(value) {
        if (this._objRef) {
            this._objRef.oldClearColor = applyValue(this._objRef.oldClearColor, value);
        }
    }
    // @ts-ignore
    get oldClearColor() {
        return this._objRef?.oldClearColor;
    }
    set oldClearAlpha(value) {
        if (this._objRef) {
            this._objRef.oldClearAlpha = value;
        }
    }
    // @ts-ignore
    get oldClearAlpha() {
        return this._objRef?.oldClearAlpha;
    }
    set fsQuad(value) {
        if (this._objRef) {
            this._objRef.fsQuad = value;
        }
    }
    // @ts-ignore
    get fsQuad() {
        return this._objRef?.fsQuad;
    }
    set tempPulseColor1(value) {
        if (this._objRef) {
            this._objRef.tempPulseColor1 = applyValue(this._objRef.tempPulseColor1, value);
        }
    }
    // @ts-ignore
    get tempPulseColor1() {
        return this._objRef?.tempPulseColor1;
    }
    set tempPulseColor2(value) {
        if (this._objRef) {
            this._objRef.tempPulseColor2 = applyValue(this._objRef.tempPulseColor2, value);
        }
    }
    // @ts-ignore
    get tempPulseColor2() {
        return this._objRef?.tempPulseColor2;
    }
    set textureMatrix(value) {
        if (this._objRef) {
            this._objRef.textureMatrix = applyValue(this._objRef.textureMatrix, value);
        }
    }
    // @ts-ignore
    get textureMatrix() {
        return this._objRef?.textureMatrix;
    }
}
ThOutlinePass.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThOutlinePass, deps: null, target: i0.ɵɵFactoryTarget.Component });
ThOutlinePass.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.1", type: ThOutlinePass, selector: "th-outlinePass", inputs: { renderScene: "renderScene", renderCamera: "renderCamera", selectedObjects: "selectedObjects", visibleEdgeColor: "visibleEdgeColor", hiddenEdgeColor: "hiddenEdgeColor", edgeGlow: "edgeGlow", usePatternTexture: "usePatternTexture", edgeThickness: "edgeThickness", edgeStrength: "edgeStrength", downSampleRatio: "downSampleRatio", pulsePeriod: "pulsePeriod", resolution: "resolution", patternTexture: "patternTexture", maskBufferMaterial: "maskBufferMaterial", renderTargetMaskBuffer: "renderTargetMaskBuffer", depthMaterial: "depthMaterial", prepareMaskMaterial: "prepareMaskMaterial", renderTargetDepthBuffer: "renderTargetDepthBuffer", renderTargetMaskDownSampleBuffer: "renderTargetMaskDownSampleBuffer", renderTargetBlurBuffer1: "renderTargetBlurBuffer1", renderTargetBlurBuffer2: "renderTargetBlurBuffer2", edgeDetectionMaterial: "edgeDetectionMaterial", renderTargetEdgeBuffer1: "renderTargetEdgeBuffer1", renderTargetEdgeBuffer2: "renderTargetEdgeBuffer2", separableBlurMaterial1: "separableBlurMaterial1", separableBlurMaterial2: "separableBlurMaterial2", overlayMaterial: "overlayMaterial", copyUniforms: "copyUniforms", materialCopy: "materialCopy", oldClearColor: "oldClearColor", oldClearAlpha: "oldClearAlpha", fsQuad: "fsQuad", tempPulseColor1: "tempPulseColor1", tempPulseColor2: "tempPulseColor2", textureMatrix: "textureMatrix" }, providers: [{ provide: ThPassBase, useExisting: forwardRef(() => ThOutlinePass) }], usesInheritance: true, ngImport: i0, template: '<ng-content/>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThOutlinePass, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-outlinePass',
                    template: '<ng-content/>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [{ provide: ThPassBase, useExisting: forwardRef(() => ThOutlinePass) }]
                }]
        }], propDecorators: { renderScene: [{
                type: Input
            }], renderCamera: [{
                type: Input
            }], selectedObjects: [{
                type: Input
            }], visibleEdgeColor: [{
                type: Input
            }], hiddenEdgeColor: [{
                type: Input
            }], edgeGlow: [{
                type: Input
            }], usePatternTexture: [{
                type: Input
            }], edgeThickness: [{
                type: Input
            }], edgeStrength: [{
                type: Input
            }], downSampleRatio: [{
                type: Input
            }], pulsePeriod: [{
                type: Input
            }], resolution: [{
                type: Input
            }], patternTexture: [{
                type: Input
            }], maskBufferMaterial: [{
                type: Input
            }], renderTargetMaskBuffer: [{
                type: Input
            }], depthMaterial: [{
                type: Input
            }], prepareMaskMaterial: [{
                type: Input
            }], renderTargetDepthBuffer: [{
                type: Input
            }], renderTargetMaskDownSampleBuffer: [{
                type: Input
            }], renderTargetBlurBuffer1: [{
                type: Input
            }], renderTargetBlurBuffer2: [{
                type: Input
            }], edgeDetectionMaterial: [{
                type: Input
            }], renderTargetEdgeBuffer1: [{
                type: Input
            }], renderTargetEdgeBuffer2: [{
                type: Input
            }], separableBlurMaterial1: [{
                type: Input
            }], separableBlurMaterial2: [{
                type: Input
            }], overlayMaterial: [{
                type: Input
            }], copyUniforms: [{
                type: Input
            }], materialCopy: [{
                type: Input
            }], oldClearColor: [{
                type: Input
            }], oldClearAlpha: [{
                type: Input
            }], fsQuad: [{
                type: Input
            }], tempPulseColor1: [{
                type: Input
            }], tempPulseColor2: [{
                type: Input
            }], textureMatrix: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,