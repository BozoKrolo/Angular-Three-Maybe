import { Injectable } from '@angular/core';
import { Subject, takeUntil } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "../ThEngine.service";
export class ThAnimationLoopService {
    constructor(engineService, ngZone) {
        this.engineService = engineService;
        this.ngZone = ngZone;
        this.active = true;
        this.destroyed$ = new Subject();
        this.beforeRender$ = this.engineService.beforeRender$;
        this.engineService.resize$.pipe(takeUntil(this.destroyed$)).subscribe(() => this.requestAnimationFrame());
    }
    ngOnDestroy() {
        this.stop();
        this.destroyed$.next();
        this.destroyed$.complete();
    }
    /**
     * start the loop
     */
    start() {
        if (!this.active) {
            this.active = true;
            this.requestAnimationFrame();
        }
    }
    /**
     * stop the loop
     */
    stop() {
        this.active = false;
        if (this.frameId !== undefined) {
            cancelAnimationFrame(this.frameId);
            this.frameId = undefined;
        }
    }
    /**
     *
     * @returns true if the render loop is active
     */
    isActive() {
        return this.active;
    }
    /**
     * trigger an animation frame request
     */
    requestAnimationFrame() {
        if (this.frameId === undefined) {
            this.ngZone.runOutsideAngular(() => (this.frameId = requestAnimationFrame(() => {
                this.frameId = undefined;
                this.engineService.render();
                if (this.active) {
                    this.requestAnimationFrame();
                }
            })));
        }
    }
}
ThAnimationLoopService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThAnimationLoopService, deps: [{ token: i1.ThEngineService }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });
ThAnimationLoopService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThAnimationLoopService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThAnimationLoopService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ThEngineService }, { type: i0.NgZone }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGgtYW5pbWF0aW9uLWxvb3Auc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC10aHJlZS9zcmMvbGliL3JlbmRlcmVyL3RoLWFuaW1hdGlvbi1sb29wLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBcUIsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFjLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxNQUFNLENBQUM7OztBQUl0RCxNQUFNLE9BQU8sc0JBQXNCO0lBT2pDLFlBQW9CLGFBQThCLEVBQVUsTUFBYztRQUF0RCxrQkFBYSxHQUFiLGFBQWEsQ0FBaUI7UUFBVSxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBTmxFLFdBQU0sR0FBRyxJQUFJLENBQUM7UUFJZCxlQUFVLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztRQUd2QyxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDO1FBQ3RELElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLENBQUM7SUFDNUcsQ0FBQztJQUNELFdBQVc7UUFDVCxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDWixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUVEOztPQUVHO0lBQ0ksS0FBSztRQUNWLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2hCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1lBQ25CLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO1NBQzlCO0lBQ0gsQ0FBQztJQUVEOztPQUVHO0lBQ0ksSUFBSTtRQUNULElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLElBQUksSUFBSSxDQUFDLE9BQU8sS0FBSyxTQUFTLEVBQUU7WUFDOUIsb0JBQW9CLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ25DLElBQUksQ0FBQyxPQUFPLEdBQUcsU0FBUyxDQUFDO1NBQzFCO0lBQ0gsQ0FBQztJQUVEOzs7T0FHRztJQUNJLFFBQVE7UUFDYixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQztJQUVEOztPQUVHO0lBQ0kscUJBQXFCO1FBQzFCLElBQUksSUFBSSxDQUFDLE9BQU8sS0FBSyxTQUFTLEVBQUU7WUFDOUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FDM0IsR0FBRyxFQUFFLENBQ0gsQ0FBQyxJQUFJLENBQUMsT0FBTyxHQUFHLHFCQUFxQixDQUFDLEdBQUcsRUFBRTtnQkFDekMsSUFBSSxDQUFDLE9BQU8sR0FBRyxTQUFTLENBQUM7Z0JBQ3pCLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLENBQUM7Z0JBQzVCLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtvQkFDZixJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQztpQkFDOUI7WUFDSCxDQUFDLENBQUMsQ0FBQyxDQUNOLENBQUM7U0FDSDtJQUNILENBQUM7O21IQTlEVSxzQkFBc0I7dUhBQXRCLHNCQUFzQjsyRkFBdEIsc0JBQXNCO2tCQURsQyxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgTmdab25lLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QsIHRha2VVbnRpbCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgUmVuZGVyU3RhdGUsIFRoRW5naW5lU2VydmljZSB9IGZyb20gJy4uL1RoRW5naW5lLnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVGhBbmltYXRpb25Mb29wU2VydmljZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gIHByaXZhdGUgYWN0aXZlID0gdHJ1ZTtcbiAgcHJpdmF0ZSBmcmFtZUlkPzogbnVtYmVyO1xuXG4gIHB1YmxpYyByZWFkb25seSBiZWZvcmVSZW5kZXIkOiBPYnNlcnZhYmxlPFJlbmRlclN0YXRlPjtcbiAgcHJpdmF0ZSBkZXN0cm95ZWQkID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVuZ2luZVNlcnZpY2U6IFRoRW5naW5lU2VydmljZSwgcHJpdmF0ZSBuZ1pvbmU6IE5nWm9uZSkge1xuICAgIHRoaXMuYmVmb3JlUmVuZGVyJCA9IHRoaXMuZW5naW5lU2VydmljZS5iZWZvcmVSZW5kZXIkO1xuICAgIHRoaXMuZW5naW5lU2VydmljZS5yZXNpemUkLnBpcGUodGFrZVVudGlsKHRoaXMuZGVzdHJveWVkJCkpLnN1YnNjcmliZSgoKSA9PiB0aGlzLnJlcXVlc3RBbmltYXRpb25GcmFtZSgpKTtcbiAgfVxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLnN0b3AoKTtcbiAgICB0aGlzLmRlc3Ryb3llZCQubmV4dCgpO1xuICAgIHRoaXMuZGVzdHJveWVkJC5jb21wbGV0ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIHN0YXJ0IHRoZSBsb29wXG4gICAqL1xuICBwdWJsaWMgc3RhcnQoKSB7XG4gICAgaWYgKCF0aGlzLmFjdGl2ZSkge1xuICAgICAgdGhpcy5hY3RpdmUgPSB0cnVlO1xuICAgICAgdGhpcy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogc3RvcCB0aGUgbG9vcFxuICAgKi9cbiAgcHVibGljIHN0b3AoKSB7XG4gICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgICBpZiAodGhpcy5mcmFtZUlkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuZnJhbWVJZCk7XG4gICAgICB0aGlzLmZyYW1lSWQgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEByZXR1cm5zIHRydWUgaWYgdGhlIHJlbmRlciBsb29wIGlzIGFjdGl2ZVxuICAgKi9cbiAgcHVibGljIGlzQWN0aXZlKCkge1xuICAgIHJldHVybiB0aGlzLmFjdGl2ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiB0cmlnZ2VyIGFuIGFuaW1hdGlvbiBmcmFtZSByZXF1ZXN0XG4gICAqL1xuICBwdWJsaWMgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCkge1xuICAgIGlmICh0aGlzLmZyYW1lSWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoXG4gICAgICAgICgpID0+XG4gICAgICAgICAgKHRoaXMuZnJhbWVJZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmZyYW1lSWQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB0aGlzLmVuZ2luZVNlcnZpY2UucmVuZGVyKCk7XG4gICAgICAgICAgICBpZiAodGhpcy5hY3RpdmUpIHtcbiAgICAgICAgICAgICAgdGhpcy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSlcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG4iXX0=