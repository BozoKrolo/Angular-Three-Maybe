import { Directive, Input, Output } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../ThEngine.service";
import * as i2 from "./th-animation-loop.service";
export class ThRenderDirective {
    constructor(engineService, animationLoopService) {
        this.engineService = engineService;
        this.animationLoopService = animationLoopService;
    }
    get beforeRender() {
        return this.engineService.beforeRender$;
    }
    get onResize() {
        return this.engineService.resize$;
    }
    set renderOnDemand(onDemand) {
        if (onDemand) {
            this.animationLoopService.stop();
        }
        else {
            this.animationLoopService.start();
        }
    }
    get renderOnDemand() {
        return !this.animationLoopService.isActive();
    }
}
ThRenderDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThRenderDirective, deps: [{ token: i1.ThEngineService }, { token: i2.ThAnimationLoopService }], target: i0.ɵɵFactoryTarget.Directive });
ThRenderDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.1.1", type: ThRenderDirective, selector: "[beforeRender], [onResize], [renderOnDemand]", inputs: { renderOnDemand: "renderOnDemand" }, outputs: { beforeRender: "beforeRender", onResize: "onResize" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThRenderDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[beforeRender], [onResize], [renderOnDemand]'
                }]
        }], ctorParameters: function () { return [{ type: i1.ThEngineService }, { type: i2.ThAnimationLoopService }]; }, propDecorators: { beforeRender: [{
                type: Output
            }], onResize: [{
                type: Output
            }], renderOnDemand: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGgtcmVuZGVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC10aHJlZS9zcmMvbGliL3JlbmRlcmVyL3RoLXJlbmRlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7O0FBT3pELE1BQU0sT0FBTyxpQkFBaUI7SUFDNUIsWUFBb0IsYUFBOEIsRUFBVSxvQkFBNEM7UUFBcEYsa0JBQWEsR0FBYixhQUFhLENBQWlCO1FBQVUseUJBQW9CLEdBQXBCLG9CQUFvQixDQUF3QjtJQUFHLENBQUM7SUFFNUcsSUFDVyxZQUFZO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUM7SUFDMUMsQ0FBQztJQUVELElBQ1csUUFBUTtRQUNqQixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDO0lBQ3BDLENBQUM7SUFFRCxJQUNXLGNBQWMsQ0FBQyxRQUFpQjtRQUN6QyxJQUFJLFFBQVEsRUFBRTtZQUNaLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUNsQzthQUFNO1lBQ0wsSUFBSSxDQUFDLG9CQUFvQixDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ25DO0lBQ0gsQ0FBQztJQUVELElBQVcsY0FBYztRQUN2QixPQUFPLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQy9DLENBQUM7OzhHQXhCVSxpQkFBaUI7a0dBQWpCLGlCQUFpQjsyRkFBakIsaUJBQWlCO2tCQUg3QixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSw4Q0FBOEM7aUJBQ3pEOzJJQUtZLFlBQVk7c0JBRHRCLE1BQU07Z0JBTUksUUFBUTtzQkFEbEIsTUFBTTtnQkFNSSxjQUFjO3NCQUR4QixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUaEVuZ2luZVNlcnZpY2UgfSBmcm9tICcuLi9UaEVuZ2luZS5zZXJ2aWNlJztcbmltcG9ydCB7IFRoQW5pbWF0aW9uTG9vcFNlcnZpY2UgfSBmcm9tICcuL3RoLWFuaW1hdGlvbi1sb29wLnNlcnZpY2UnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbYmVmb3JlUmVuZGVyXSwgW29uUmVzaXplXSwgW3JlbmRlck9uRGVtYW5kXSdcbn0pXG5leHBvcnQgY2xhc3MgVGhSZW5kZXJEaXJlY3RpdmUge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVuZ2luZVNlcnZpY2U6IFRoRW5naW5lU2VydmljZSwgcHJpdmF0ZSBhbmltYXRpb25Mb29wU2VydmljZTogVGhBbmltYXRpb25Mb29wU2VydmljZSkge31cblxuICBAT3V0cHV0KClcbiAgcHVibGljIGdldCBiZWZvcmVSZW5kZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuZW5naW5lU2VydmljZS5iZWZvcmVSZW5kZXIkO1xuICB9XG5cbiAgQE91dHB1dCgpXG4gIHB1YmxpYyBnZXQgb25SZXNpemUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZW5naW5lU2VydmljZS5yZXNpemUkO1xuICB9XG5cbiAgQElucHV0KClcbiAgcHVibGljIHNldCByZW5kZXJPbkRlbWFuZChvbkRlbWFuZDogYm9vbGVhbikge1xuICAgIGlmIChvbkRlbWFuZCkge1xuICAgICAgdGhpcy5hbmltYXRpb25Mb29wU2VydmljZS5zdG9wKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYW5pbWF0aW9uTG9vcFNlcnZpY2Uuc3RhcnQoKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZ2V0IHJlbmRlck9uRGVtYW5kKCkge1xuICAgIHJldHVybiAhdGhpcy5hbmltYXRpb25Mb29wU2VydmljZS5pc0FjdGl2ZSgpO1xuICB9XG59XG4iXX0=