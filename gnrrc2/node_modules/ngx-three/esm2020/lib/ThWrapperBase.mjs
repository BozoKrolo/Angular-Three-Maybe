import { Component, EventEmitter, Input, Output } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import { isLazyObject3dProxy } from './loaders/LazyObject3dProxy';
import { isDisposable } from './util';
import * as i0 from "@angular/core";
// eslint-disable-next-line @angular-eslint/component-class-suffix
export class ThWrapperBase {
    set objRef(ref) {
        this.applyObjRef(ref);
    }
    get objRef() {
        return this._objRef;
    }
    constructor() {
        this.autoAddToParent = true;
        this.autoDispose = true;
        // nothing to do
    }
    addToParent() {
        // nothing to do, implement it in a derived class
    }
    removeFromParent() {
        // nothing to do, implement it in a derived class
    }
    set threeEvents(eventMap) {
        this.removeEvents();
        this.eventListeners = eventMap;
        this.applyEvents();
    }
    get threeEvents() {
        return this.eventListeners;
    }
    get onUpdate() {
        if (!this.updateEmitter) {
            this.updateEmitter = new EventEmitter();
        }
        return this.updateEmitter;
    }
    /**
     * emits the last assigned object ref
     */
    get objRef$() {
        if (!this._objRef$) {
            this._objRef$ = new ReplaySubject(1);
        }
        return this._objRef$;
    }
    ngOnInit() {
        if (!this.objRef) {
            this.objRef = this.createThreeInstance(this.args);
        }
    }
    // Override this
    getType() {
        throw new Error('derive me');
    }
    createThreeInstance(args) {
        if (Array.isArray(args)) {
            return new (this.getType())(...args);
        }
        else {
            return new (this.getType())(args);
        }
    }
    ngOnChanges(changes) {
        // console.log('on changes');
        if (this.objRef && !isLazyObject3dProxy(this.objRef)) {
            // the object is already set and it is no proxy
            // emit the changes
            this.emitPropertyChanges(changes);
            // TODO: request animation frame
            return;
        }
        if (!this.objRef) {
            // no object and no proxy is set --> create an instance
            this.objRef = this.createThreeInstance(changes.args?.currentValue);
        }
        // eslint-disable-next-line guard-for-in
        for (const key in changes) {
            this[key] = changes[key].currentValue;
        }
        this.emitPropertyChanges(changes);
    }
    disposeObjRef() {
        if (isDisposable(this.objRef)) {
            this.objRef.dispose();
        }
    }
    ngOnDestroy() {
        this.removeEvents();
        this.removeFromParent();
        if (this.autoDispose) {
            this.disposeObjRef();
        }
    }
    applyObjRef(objRef) {
        if (this._objRef !== objRef) {
            this.removeFromParent();
            this._objRef = objRef;
            if (this.autoAddToParent) {
                this.addToParent();
            }
        }
        this.emitObjRefChange();
    }
    emitObjRefChange() {
        // only emit change if _objRef is no proxy,
        // and trigger emit over objRef event emitter
        if (this._objRef && !isLazyObject3dProxy(this._objRef)) {
            this._objRef.dispatchEvent?.({ type: 'loaded', object: this._objRef });
            if (this._objRef$) {
                this._objRef$.next(this._objRef);
            }
        }
    }
    emitPropertyChanges(changes) {
        if (this._objRef) {
            this._objRef.dispatchEvent?.({ type: 'changes', changes });
        }
        if (this.updateEmitter) {
            this.updateEmitter.next(changes);
        }
    }
    removeEvents() {
        if (this.eventListeners && this._objRef) {
            for (const entry of Object.entries(this.eventListeners)) {
                this._objRef.removeEventListener(entry[0], entry[1]);
            }
            this.eventListeners = undefined;
        }
    }
    applyEvents() {
        if (this.eventListeners && this._objRef) {
            for (const entry of Object.entries(this.eventListeners)) {
                this._objRef.addEventListener(entry[0], entry[1]);
            }
        }
    }
}
ThWrapperBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThWrapperBase, deps: [], target: i0.ɵɵFactoryTarget.Component });
ThWrapperBase.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.1", type: ThWrapperBase, selector: "th-abs-wrapper", inputs: { autoAddToParent: "autoAddToParent", autoDispose: "autoDispose", objRef: "objRef", args: "args", threeEvents: "threeEvents" }, outputs: { onUpdate: "onUpdate", objRef$: "objRef$" }, usesOnChanges: true, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThWrapperBase, decorators: [{
            type: Component,
            args: [{
                    selector: 'th-abs-wrapper',
                    template: ''
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { autoAddToParent: [{
                type: Input
            }], autoDispose: [{
                type: Input
            }], objRef: [{
                type: Input
            }], args: [{
                type: Input
            }], threeEvents: [{
                type: Input
            }], onUpdate: [{
                type: Output
            }], objRef$: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,