import { Directive, Input, Self, SkipSelf } from '@angular/core';
import { createLazyObject3DProxy, isLazyObject3dProxy } from '../loaders/LazyObject3dProxy';
import * as i0 from "@angular/core";
import * as i1 from "../generated";
export class RefByIdDirective {
    constructor(host, parent) {
        this.host = host;
        this.parent = parent;
        this.host.autoAddToParent = false;
        this.host.autoDispose = false;
        this.host.objRef = createLazyObject3DProxy();
    }
    set refById(id) {
        this.id = id;
        this.subscription?.unsubscribe();
        this.subscription = this.parent.objRef$.subscribe((obj) => {
            this.parentObj = obj;
            this.applyRef();
        });
    }
    applyRef() {
        if (!this.parentObj || this.id === undefined) {
            return;
        }
        const ref = this.findById(this.parentObj, this.id);
        if (ref) {
            this.setRef(this.host, ref);
        }
    }
    findById(parentObj, id) {
        if ((parentObj.name ?? parentObj.uuid) === id) {
            return parentObj;
        }
        for (const child of parentObj.children) {
            const object = this.findById(child, id);
            if (object !== undefined) {
                return object;
            }
        }
        return undefined;
    }
    setRef(host, ref) {
        const objRef = host.objRef;
        if (!objRef) {
            return;
        }
        if (isLazyObject3dProxy(objRef)) {
            objRef.objRef = ref;
            host.objRef = objRef;
        }
    }
    ngOnDestroy() {
        this.subscription?.unsubscribe();
    }
}
RefByIdDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: RefByIdDirective, deps: [{ token: i1.ThObject3D, self: true }, { token: i1.ThObject3D, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive });
RefByIdDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.1.1", type: RefByIdDirective, selector: "[refById]", inputs: { refById: "refById" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: RefByIdDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[refById]'
                }]
        }], ctorParameters: function () { return [{ type: i1.ThObject3D, decorators: [{
                    type: Self
                }] }, { type: i1.ThObject3D, decorators: [{
                    type: SkipSelf
                }] }]; }, propDecorators: { refById: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVmLWJ5LWlkLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC10aHJlZS9zcmMvbGliL2RpcmVjdGl2ZXMvcmVmLWJ5LWlkLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBYSxJQUFJLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBSTVFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDhCQUE4QixDQUFDOzs7QUFLNUYsTUFBTSxPQUFPLGdCQUFnQjtJQUkzQixZQUE0QixJQUFnQixFQUFzQixNQUFrQjtRQUF4RCxTQUFJLEdBQUosSUFBSSxDQUFZO1FBQXNCLFdBQU0sR0FBTixNQUFNLENBQVk7UUFDbEYsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztRQUM5QixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyx1QkFBdUIsRUFBRSxDQUFDO0lBQy9DLENBQUM7SUFFRCxJQUNJLE9BQU8sQ0FBQyxFQUFzQjtRQUNoQyxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxZQUFZLEVBQUUsV0FBVyxFQUFFLENBQUM7UUFDakMsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtZQUN4RCxJQUFJLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQztZQUNyQixJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDbEIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxFQUFFLEtBQUssU0FBUyxFQUFFO1lBQzVDLE9BQU87U0FDUjtRQUVELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkQsSUFBSSxHQUFHLEVBQUU7WUFDUCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7U0FDN0I7SUFDSCxDQUFDO0lBRVMsUUFBUSxDQUFDLFNBQW1CLEVBQUUsRUFBVTtRQUNoRCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFFO1lBQzdDLE9BQU8sU0FBUyxDQUFDO1NBQ2xCO1FBRUQsS0FBSyxNQUFNLEtBQUssSUFBSSxTQUFTLENBQUMsUUFBUSxFQUFFO1lBQ3RDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ3hDLElBQUksTUFBTSxLQUFLLFNBQVMsRUFBRTtnQkFDeEIsT0FBTyxNQUFNLENBQUM7YUFDZjtTQUNGO1FBQ0QsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztJQUVTLE1BQU0sQ0FBQyxJQUFnQixFQUFFLEdBQWE7UUFDOUMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUMzQixJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ1gsT0FBTztTQUNSO1FBQ0QsSUFBSSxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUMvQixNQUFNLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQztZQUNwQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztTQUN0QjtJQUNILENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLFlBQVksRUFBRSxXQUFXLEVBQUUsQ0FBQztJQUNuQyxDQUFDOzs2R0ExRFUsZ0JBQWdCO2lHQUFoQixnQkFBZ0I7MkZBQWhCLGdCQUFnQjtrQkFINUIsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsV0FBVztpQkFDdEI7OzBCQUtjLElBQUk7OzBCQUE4QixRQUFROzRDQU9uRCxPQUFPO3NCQURWLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBPbkRlc3Ryb3ksIFNlbGYsIFNraXBTZWxmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE9iamVjdDNEIH0gZnJvbSAndGhyZWUnO1xuaW1wb3J0IHsgVGhPYmplY3QzRCB9IGZyb20gJy4uL2dlbmVyYXRlZCc7XG5pbXBvcnQgeyBjcmVhdGVMYXp5T2JqZWN0M0RQcm94eSwgaXNMYXp5T2JqZWN0M2RQcm94eSB9IGZyb20gJy4uL2xvYWRlcnMvTGF6eU9iamVjdDNkUHJveHknO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbcmVmQnlJZF0nXG59KVxuZXhwb3J0IGNsYXNzIFJlZkJ5SWREaXJlY3RpdmUgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICBwcm90ZWN0ZWQgc3Vic2NyaXB0aW9uPzogU3Vic2NyaXB0aW9uO1xuICBwcm90ZWN0ZWQgcGFyZW50T2JqPzogT2JqZWN0M0Q7XG4gIHByb3RlY3RlZCBpZD86IHN0cmluZztcbiAgY29uc3RydWN0b3IoQFNlbGYoKSBwcml2YXRlIGhvc3Q6IFRoT2JqZWN0M0QsIEBTa2lwU2VsZigpIHByaXZhdGUgcGFyZW50OiBUaE9iamVjdDNEKSB7XG4gICAgdGhpcy5ob3N0LmF1dG9BZGRUb1BhcmVudCA9IGZhbHNlO1xuICAgIHRoaXMuaG9zdC5hdXRvRGlzcG9zZSA9IGZhbHNlO1xuICAgIHRoaXMuaG9zdC5vYmpSZWYgPSBjcmVhdGVMYXp5T2JqZWN0M0RQcm94eSgpO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IHJlZkJ5SWQoaWQ6IHN0cmluZyB8IHVuZGVmaW5lZCkge1xuICAgIHRoaXMuaWQgPSBpZDtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbj8udW5zdWJzY3JpYmUoKTtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IHRoaXMucGFyZW50Lm9ialJlZiQuc3Vic2NyaWJlKChvYmopID0+IHtcbiAgICAgIHRoaXMucGFyZW50T2JqID0gb2JqO1xuICAgICAgdGhpcy5hcHBseVJlZigpO1xuICAgIH0pO1xuICB9XG5cbiAgYXBwbHlSZWYoKSB7XG4gICAgaWYgKCF0aGlzLnBhcmVudE9iaiB8fCB0aGlzLmlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCByZWYgPSB0aGlzLmZpbmRCeUlkKHRoaXMucGFyZW50T2JqLCB0aGlzLmlkKTtcbiAgICBpZiAocmVmKSB7XG4gICAgICB0aGlzLnNldFJlZih0aGlzLmhvc3QsIHJlZik7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIGZpbmRCeUlkKHBhcmVudE9iajogT2JqZWN0M0QsIGlkOiBzdHJpbmcpOiBPYmplY3QzRCB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKChwYXJlbnRPYmoubmFtZSA/PyBwYXJlbnRPYmoudXVpZCkgPT09IGlkKSB7XG4gICAgICByZXR1cm4gcGFyZW50T2JqO1xuICAgIH1cblxuICAgIGZvciAoY29uc3QgY2hpbGQgb2YgcGFyZW50T2JqLmNoaWxkcmVuKSB7XG4gICAgICBjb25zdCBvYmplY3QgPSB0aGlzLmZpbmRCeUlkKGNoaWxkLCBpZCk7XG4gICAgICBpZiAob2JqZWN0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIHByb3RlY3RlZCBzZXRSZWYoaG9zdDogVGhPYmplY3QzRCwgcmVmOiBPYmplY3QzRCkge1xuICAgIGNvbnN0IG9ialJlZiA9IGhvc3Qub2JqUmVmO1xuICAgIGlmICghb2JqUmVmKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc0xhenlPYmplY3QzZFByb3h5KG9ialJlZikpIHtcbiAgICAgIG9ialJlZi5vYmpSZWYgPSByZWY7XG4gICAgICBob3N0Lm9ialJlZiA9IG9ialJlZjtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbj8udW5zdWJzY3JpYmUoKTtcbiAgfVxufVxuIl19