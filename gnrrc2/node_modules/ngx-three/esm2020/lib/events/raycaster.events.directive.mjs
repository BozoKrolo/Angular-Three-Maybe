import { Directive, EventEmitter, Host, Output } from '@angular/core';
import { RaycasterEvent } from './raycaster.service';
import * as i0 from "@angular/core";
import * as i1 from "../generated/ThObject3D";
import * as i2 from "./raycaster.service";
export class RaycasterEventDirective {
    get onMouseEnter() {
        if (!this.mouseEnter) {
            this.mouseEnter = new EventEmitter();
        }
        return this.mouseEnter;
    }
    get onMouseExit() {
        if (!this.mouseExit) {
            this.mouseExit = new EventEmitter();
        }
        return this.mouseExit;
    }
    get onClick() {
        if (!this.click) {
            this.click = new EventEmitter();
        }
        return this.click;
    }
    get onPointerDown() {
        if (!this.pointerDown) {
            this.pointerDown = new EventEmitter();
        }
        return this.pointerDown;
    }
    get onPointerUp() {
        if (!this.pointerUp) {
            this.pointerUp = new EventEmitter();
        }
        return this.pointerUp;
    }
    constructor(host, raycasterService) {
        this.host = host;
        this.raycasterService = raycasterService;
        this.emitOnMouseEnter = this.emitOnMouseEnter.bind(this);
        this.emitOnMouseExit = this.emitOnMouseExit.bind(this);
        this.emitOnClick = this.emitOnClick.bind(this);
    }
    ngAfterViewInit() {
        this.subscribeEvents();
    }
    subscribeEvents() {
        this.raycasterService.addEventTarget(this);
    }
    unSubscribeEvents() {
        this.raycasterService.removeEventTarget(this);
    }
    emitOnMouseExit() {
        this.mouseExit?.emit({
            component: this.host,
            type: RaycasterEvent.mouseExit
        });
    }
    emitOnMouseEnter(event) {
        // console.log('RaycasterGroupDirective.onMouseEnter', event);
        this.mouseEnter?.emit(event);
    }
    emitOnClick(event) {
        // console.log('onClick', event);
        this.click?.emit(event);
    }
    emitOnPointerDown(event) {
        // console.log('onClick', event);
        this.pointerDown?.emit(event);
    }
    emitOnPointerUp(event) {
        // console.log('onClick', event);
        this.pointerUp?.emit(event);
    }
    ngOnDestroy() {
        this.unSubscribeEvents();
    }
}
RaycasterEventDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: RaycasterEventDirective, deps: [{ token: i1.ThObject3D, host: true }, { token: i2.RaycasterService }], target: i0.ɵɵFactoryTarget.Directive });
RaycasterEventDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.1.1", type: RaycasterEventDirective, selector: "[onClick], [onMouseEnter], [onMouseExit], [onPointerDown], [onPointerUp]", outputs: { onMouseEnter: "onMouseEnter", onMouseExit: "onMouseExit", onClick: "onClick", onPointerDown: "onPointerDown", onPointerUp: "onPointerUp" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: RaycasterEventDirective, decorators: [{
            type: Directive,
            args: [{ selector: '[onClick], [onMouseEnter], [onMouseExit], [onPointerDown], [onPointerUp]' }]
        }], ctorParameters: function () { return [{ type: i1.ThObject3D, decorators: [{
                    type: Host
                }] }, { type: i2.RaycasterService }]; }, propDecorators: { onMouseEnter: [{
                type: Output
            }], onMouseExit: [{
                type: Output
            }], onClick: [{
                type: Output
            }], onPointerDown: [{
                type: Output
            }], onPointerUp: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmF5Y2FzdGVyLmV2ZW50cy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtdGhyZWUvc3JjL2xpYi9ldmVudHMvcmF5Y2FzdGVyLmV2ZW50cy5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFpQixTQUFTLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBYSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFJaEcsT0FBTyxFQUFFLGNBQWMsRUFBb0IsTUFBTSxxQkFBcUIsQ0FBQzs7OztBQVF2RSxNQUFNLE9BQU8sdUJBQXVCO0lBQ2xDLElBQWMsWUFBWTtRQUN4QixJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNwQixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksWUFBWSxFQUFzQixDQUFDO1NBQzFEO1FBQ0QsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQ3pCLENBQUM7SUFHRCxJQUFjLFdBQVc7UUFDdkIsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDbkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLFlBQVksRUFBbUQsQ0FBQztTQUN0RjtRQUNELE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUN4QixDQUFDO0lBR0QsSUFBYyxPQUFPO1FBQ25CLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ2YsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLFlBQVksRUFBc0IsQ0FBQztTQUNyRDtRQUNELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDO0lBR0QsSUFBYyxhQUFhO1FBQ3pCLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3JCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxZQUFZLEVBQXNCLENBQUM7U0FDM0Q7UUFDRCxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDMUIsQ0FBQztJQUdELElBQWMsV0FBVztRQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNuQixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksWUFBWSxFQUFzQixDQUFDO1NBQ3pEO1FBQ0QsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQ3hCLENBQUM7SUFHRCxZQUFvQyxJQUFnQixFQUFVLGdCQUFrQztRQUE1RCxTQUFJLEdBQUosSUFBSSxDQUFZO1FBQVUscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUM5RixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN6RCxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZELElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVELGVBQWU7UUFDYixJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDekIsQ0FBQztJQUVPLGVBQWU7UUFDckIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRU8saUJBQWlCO1FBQ3ZCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRU0sZUFBZTtRQUNwQixJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQztZQUNuQixTQUFTLEVBQUUsSUFBSSxDQUFDLElBQUk7WUFDcEIsSUFBSSxFQUFFLGNBQWMsQ0FBQyxTQUFTO1NBQy9CLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTSxnQkFBZ0IsQ0FBQyxLQUF5QjtRQUMvQyw4REFBOEQ7UUFDOUQsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVNLFdBQVcsQ0FBQyxLQUF5QjtRQUMxQyxpQ0FBaUM7UUFDakMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUVNLGlCQUFpQixDQUFDLEtBQXlCO1FBQ2hELGlDQUFpQztRQUNqQyxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRU0sZUFBZSxDQUFDLEtBQXlCO1FBQzlDLGlDQUFpQztRQUNqQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQzNCLENBQUM7O29IQXhGVSx1QkFBdUI7d0dBQXZCLHVCQUF1QjsyRkFBdkIsdUJBQXVCO2tCQURuQyxTQUFTO21CQUFDLEVBQUUsUUFBUSxFQUFFLDBFQUEwRSxFQUFFOzswQkEwQ3BGLElBQUk7MkVBeENILFlBQVk7c0JBQXpCLE1BQU07Z0JBUU8sV0FBVztzQkFBeEIsTUFBTTtnQkFRTyxPQUFPO3NCQUFwQixNQUFNO2dCQVFPLGFBQWE7c0JBQTFCLE1BQU07Z0JBUU8sV0FBVztzQkFBeEIsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIERpcmVjdGl2ZSwgRXZlbnRFbWl0dGVyLCBIb3N0LCBPbkRlc3Ryb3ksIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSW50ZXJzZWN0aW9uIH0gZnJvbSAndGhyZWUnO1xuaW1wb3J0IHsgVGhPYmplY3QzRCB9IGZyb20gJy4uL2dlbmVyYXRlZC9UaE9iamVjdDNEJztcblxuaW1wb3J0IHsgUmF5Y2FzdGVyRXZlbnQsIFJheWNhc3RlclNlcnZpY2UgfSBmcm9tICcuL3JheWNhc3Rlci5zZXJ2aWNlJztcblxuZXhwb3J0IGludGVyZmFjZSBSYXljYXN0ZXJFbWl0RXZlbnQgZXh0ZW5kcyBJbnRlcnNlY3Rpb24ge1xuICB0eXBlOiBSYXljYXN0ZXJFdmVudDtcbiAgY29tcG9uZW50OiBUaE9iamVjdDNEO1xufVxuXG5ARGlyZWN0aXZlKHsgc2VsZWN0b3I6ICdbb25DbGlja10sIFtvbk1vdXNlRW50ZXJdLCBbb25Nb3VzZUV4aXRdLCBbb25Qb2ludGVyRG93bl0sIFtvblBvaW50ZXJVcF0nIH0pXG5leHBvcnQgY2xhc3MgUmF5Y2FzdGVyRXZlbnREaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xuICBAT3V0cHV0KCkgZ2V0IG9uTW91c2VFbnRlcigpOiBFdmVudEVtaXR0ZXI8UmF5Y2FzdGVyRW1pdEV2ZW50PiB7XG4gICAgaWYgKCF0aGlzLm1vdXNlRW50ZXIpIHtcbiAgICAgIHRoaXMubW91c2VFbnRlciA9IG5ldyBFdmVudEVtaXR0ZXI8UmF5Y2FzdGVyRW1pdEV2ZW50PigpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5tb3VzZUVudGVyO1xuICB9XG4gIHByb3RlY3RlZCBtb3VzZUVudGVyPzogRXZlbnRFbWl0dGVyPFJheWNhc3RlckVtaXRFdmVudD47XG5cbiAgQE91dHB1dCgpIGdldCBvbk1vdXNlRXhpdCgpOiBFdmVudEVtaXR0ZXI8eyBjb21wb25lbnQ6IFRoT2JqZWN0M0Q7IHR5cGU6IFJheWNhc3RlckV2ZW50IH0+IHtcbiAgICBpZiAoIXRoaXMubW91c2VFeGl0KSB7XG4gICAgICB0aGlzLm1vdXNlRXhpdCA9IG5ldyBFdmVudEVtaXR0ZXI8eyBjb21wb25lbnQ6IFRoT2JqZWN0M0Q7IHR5cGU6IFJheWNhc3RlckV2ZW50IH0+KCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLm1vdXNlRXhpdDtcbiAgfVxuICBwcm90ZWN0ZWQgbW91c2VFeGl0PzogRXZlbnRFbWl0dGVyPHsgY29tcG9uZW50OiBUaE9iamVjdDNEOyB0eXBlOiBSYXljYXN0ZXJFdmVudCB9PjtcblxuICBAT3V0cHV0KCkgZ2V0IG9uQ2xpY2soKTogRXZlbnRFbWl0dGVyPFJheWNhc3RlckVtaXRFdmVudD4ge1xuICAgIGlmICghdGhpcy5jbGljaykge1xuICAgICAgdGhpcy5jbGljayA9IG5ldyBFdmVudEVtaXR0ZXI8UmF5Y2FzdGVyRW1pdEV2ZW50PigpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jbGljaztcbiAgfVxuICBwcm90ZWN0ZWQgY2xpY2s/OiBFdmVudEVtaXR0ZXI8UmF5Y2FzdGVyRW1pdEV2ZW50PjtcblxuICBAT3V0cHV0KCkgZ2V0IG9uUG9pbnRlckRvd24oKTogRXZlbnRFbWl0dGVyPFJheWNhc3RlckVtaXRFdmVudD4ge1xuICAgIGlmICghdGhpcy5wb2ludGVyRG93bikge1xuICAgICAgdGhpcy5wb2ludGVyRG93biA9IG5ldyBFdmVudEVtaXR0ZXI8UmF5Y2FzdGVyRW1pdEV2ZW50PigpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5wb2ludGVyRG93bjtcbiAgfVxuICBwcm90ZWN0ZWQgcG9pbnRlckRvd24/OiBFdmVudEVtaXR0ZXI8UmF5Y2FzdGVyRW1pdEV2ZW50PjtcblxuICBAT3V0cHV0KCkgZ2V0IG9uUG9pbnRlclVwKCk6IEV2ZW50RW1pdHRlcjxSYXljYXN0ZXJFbWl0RXZlbnQ+IHtcbiAgICBpZiAoIXRoaXMucG9pbnRlclVwKSB7XG4gICAgICB0aGlzLnBvaW50ZXJVcCA9IG5ldyBFdmVudEVtaXR0ZXI8UmF5Y2FzdGVyRW1pdEV2ZW50PigpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5wb2ludGVyVXA7XG4gIH1cbiAgcHJvdGVjdGVkIHBvaW50ZXJVcD86IEV2ZW50RW1pdHRlcjxSYXljYXN0ZXJFbWl0RXZlbnQ+O1xuXG4gIGNvbnN0cnVjdG9yKEBIb3N0KCkgcHVibGljIHJlYWRvbmx5IGhvc3Q6IFRoT2JqZWN0M0QsIHByaXZhdGUgcmF5Y2FzdGVyU2VydmljZTogUmF5Y2FzdGVyU2VydmljZSkge1xuICAgIHRoaXMuZW1pdE9uTW91c2VFbnRlciA9IHRoaXMuZW1pdE9uTW91c2VFbnRlci5iaW5kKHRoaXMpO1xuICAgIHRoaXMuZW1pdE9uTW91c2VFeGl0ID0gdGhpcy5lbWl0T25Nb3VzZUV4aXQuYmluZCh0aGlzKTtcbiAgICB0aGlzLmVtaXRPbkNsaWNrID0gdGhpcy5lbWl0T25DbGljay5iaW5kKHRoaXMpO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgIHRoaXMuc3Vic2NyaWJlRXZlbnRzKCk7XG4gIH1cblxuICBwcml2YXRlIHN1YnNjcmliZUV2ZW50cygpIHtcbiAgICB0aGlzLnJheWNhc3RlclNlcnZpY2UuYWRkRXZlbnRUYXJnZXQodGhpcyk7XG4gIH1cblxuICBwcml2YXRlIHVuU3Vic2NyaWJlRXZlbnRzKCkge1xuICAgIHRoaXMucmF5Y2FzdGVyU2VydmljZS5yZW1vdmVFdmVudFRhcmdldCh0aGlzKTtcbiAgfVxuXG4gIHB1YmxpYyBlbWl0T25Nb3VzZUV4aXQoKSB7XG4gICAgdGhpcy5tb3VzZUV4aXQ/LmVtaXQoe1xuICAgICAgY29tcG9uZW50OiB0aGlzLmhvc3QsXG4gICAgICB0eXBlOiBSYXljYXN0ZXJFdmVudC5tb3VzZUV4aXRcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBlbWl0T25Nb3VzZUVudGVyKGV2ZW50OiBSYXljYXN0ZXJFbWl0RXZlbnQpIHtcbiAgICAvLyBjb25zb2xlLmxvZygnUmF5Y2FzdGVyR3JvdXBEaXJlY3RpdmUub25Nb3VzZUVudGVyJywgZXZlbnQpO1xuICAgIHRoaXMubW91c2VFbnRlcj8uZW1pdChldmVudCk7XG4gIH1cblxuICBwdWJsaWMgZW1pdE9uQ2xpY2soZXZlbnQ6IFJheWNhc3RlckVtaXRFdmVudCkge1xuICAgIC8vIGNvbnNvbGUubG9nKCdvbkNsaWNrJywgZXZlbnQpO1xuICAgIHRoaXMuY2xpY2s/LmVtaXQoZXZlbnQpO1xuICB9XG5cbiAgcHVibGljIGVtaXRPblBvaW50ZXJEb3duKGV2ZW50OiBSYXljYXN0ZXJFbWl0RXZlbnQpIHtcbiAgICAvLyBjb25zb2xlLmxvZygnb25DbGljaycsIGV2ZW50KTtcbiAgICB0aGlzLnBvaW50ZXJEb3duPy5lbWl0KGV2ZW50KTtcbiAgfVxuXG4gIHB1YmxpYyBlbWl0T25Qb2ludGVyVXAoZXZlbnQ6IFJheWNhc3RlckVtaXRFdmVudCkge1xuICAgIC8vIGNvbnNvbGUubG9nKCdvbkNsaWNrJywgZXZlbnQpO1xuICAgIHRoaXMucG9pbnRlclVwPy5lbWl0KGV2ZW50KTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMudW5TdWJzY3JpYmVFdmVudHMoKTtcbiAgfVxufVxuIl19