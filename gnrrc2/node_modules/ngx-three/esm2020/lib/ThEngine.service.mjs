import { EventEmitter, Injectable } from '@angular/core';
import * as THREE from 'three';
import { Clock, Vector4 } from 'three';
import { isObserved } from './util';
import { Subject, takeUntil } from 'rxjs';
import * as i0 from "@angular/core";
const RENDERER_DEFAULTS = {
    alpha: true,
    antialias: true,
    preserveDrawingBuffer: true
};
export class ThEngineService {
    get canvas() {
        return this.rendererParameters?.domElement;
    }
    constructor(ngZone) {
        this.ngZone = ngZone;
        this.clock = new Clock();
        this.destroyed$ = new Subject();
        this.resizeEmitter = new EventEmitter();
        this.beforeRenderEmitter = new EventEmitter();
        this.views = [];
        this.beforeRender$ = this.beforeRenderEmitter.pipe(takeUntil(this.destroyed$));
        this.resize$ = this.resizeEmitter.pipe(takeUntil(this.destroyed$));
    }
    get renderer() {
        return this._renderer;
    }
    ngOnDestroy() {
        if (this.resizeObserver && this.canvas) {
            this.resizeObserver.unobserve(this.canvas);
        }
    }
    initResizeObserver() {
        // We have to run this outside angular zones,
        // because it could trigger heavy changeDetection cycles.
        this.ngZone.runOutsideAngular(() => {
            if (!this.canvas) {
                throw new Error('missing canvas element');
            }
            this.resize();
            if (!this.resizeObserver) {
                // @ts-ignore
                this.resizeObserver = new ResizeObserver(() => {
                    this.resize();
                });
            }
            this.resizeObserver.observe(this.canvas);
        });
    }
    initRenderer() {
        if (this._renderer) {
            return;
        }
        this._renderer = new THREE.WebGLRenderer({
            canvas: this.rendererParameters?.domElement,
            ...RENDERER_DEFAULTS
        });
        Object.assign(this._renderer, { ...RENDERER_DEFAULTS, ...this.rendererParameters });
        this.resize();
    }
    setRenderer(options) {
        this.rendererParameters = options;
        this.initRenderer();
        this.initResizeObserver();
    }
    addView(view) {
        this.views.push(view);
        const canvasDimensions = this.calcRendererSize();
        if (canvasDimensions) {
            this.adjustViewDimensions(view, canvasDimensions.width, canvasDimensions.height);
        }
    }
    render() {
        this.beforeRenderEmitter.emit({ engine: this, delta: this.clock.getDelta() });
        for (const view of this.views) {
            this.renderView(view);
        }
    }
    renderView(view) {
        if (!this._renderer) {
            return;
        }
        const camera = view.camera;
        const scene = view.scene;
        if (!camera || !scene || !camera.objRef || !scene.objRef) {
            return;
        }
        const renderer = this._renderer;
        if (isObserved(view.onRender)) {
            this.ngZone.run(() => view.onRender.emit({
                renderer,
                scene,
                camera
            }));
        }
        this.applyRendererParametersFromView(view);
        if (view.effectComposer) {
            view.effectComposer.render();
        }
        else {
            this._renderer.render(scene.objRef, camera.objRef);
        }
    }
    applyRendererParametersFromView(view) {
        if (!this._renderer) {
            return;
        }
        if (view.viewPort) {
            if (view.viewPort instanceof Vector4) {
                this._renderer.setViewport(view.viewPort);
            }
            else {
                this._renderer.setViewport(view.viewPort.x, view.viewPort.y, view.viewPort.width, view.viewPort.height);
            }
        }
        if (view.scissor) {
            if (view.scissor instanceof Vector4) {
                this._renderer.setScissor(view.scissor);
            }
            else {
                this._renderer.setScissor(view.scissor.x, view.scissor.y, view.scissor.width, view.scissor.height);
            }
        }
        if (view.scissorTest !== undefined) {
            this._renderer.setScissorTest(view.scissorTest);
        }
        if (view.clearColor) {
            this._renderer.setClearColor(view.clearColor);
        }
        if (view.clearAlpha !== undefined) {
            this._renderer.setClearAlpha(view.clearAlpha);
        }
        if (view.shadow !== undefined) {
            this._renderer.shadowMap.enabled = true;
        }
    }
    resize() {
        if (!this._renderer || !this.canvas) {
            return false;
        }
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        const { width, height } = this.calcRendererSize();
        this._renderer.setSize(width, height, false);
        for (const view of this.views) {
            this.adjustViewDimensions(view, width, height);
        }
        this.resizeEmitter.emit({ width, height });
        return true;
    }
    calcRendererSize() {
        if (!this._renderer || !this.canvas) {
            return;
        }
        const pixelRatio = window.devicePixelRatio;
        return {
            width: (this.canvas.clientWidth ?? 0) * pixelRatio,
            height: (this.canvas.clientHeight ?? 0) * pixelRatio
        };
    }
    adjustViewDimensions(view, width, height) {
        if (!view.viewPort) {
            if (view.camera && view.camera.objRef.aspect) {
                view.camera.objRef.aspect = width / height;
                view.camera.objRef.updateProjectionMatrix();
            }
            view.effectComposer?.setSize(width, height);
        }
    }
}
ThEngineService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThEngineService, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });
ThEngineService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThEngineService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: ThEngineService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i0.NgZone }]; } });
//# sourceMappingURL=data:application/json;base64,