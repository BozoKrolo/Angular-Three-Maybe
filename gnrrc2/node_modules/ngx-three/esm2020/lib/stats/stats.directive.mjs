import { Directive, Input } from '@angular/core';
import Stats from 'three/examples/jsm/libs/stats.module';
import * as i0 from "@angular/core";
import * as i1 from "../ThEngine.service";
export class StatsDirective {
    constructor(engineService) {
        this.engineService = engineService;
        this.stats = new Stats();
    }
    ngOnDestroy() {
        if (this.renderSubscription) {
            this.renderSubscription.unsubscribe();
        }
    }
    ngOnInit() {
        if (!this.engineService.canvas) {
            throw new Error('No canvas present');
        }
        const parentElement = this.engineService.canvas.parentElement;
        if (parentElement) {
            parentElement.style.position = 'relative';
            this.stats.dom.style.position = 'absolute';
            this.stats.showPanel(0);
            this.engineService.canvas.parentElement?.appendChild(this.stats.dom);
            this.renderSubscription = this.engineService.beforeRender$.subscribe(() => {
                this.stats.update();
            });
        }
    }
    set thStats(enabled) {
        if (!enabled) {
            this.stats.dom.style.visibility = 'hidden';
        }
        else {
            this.stats.dom.style.visibility = 'visible';
        }
    }
}
StatsDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: StatsDirective, deps: [{ token: i1.ThEngineService }], target: i0.ɵɵFactoryTarget.Directive });
StatsDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.1.1", type: StatsDirective, selector: "[thStats]", inputs: { thStats: "thStats" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.1", ngImport: i0, type: StatsDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[thStats]'
                }]
        }], ctorParameters: function () { return [{ type: i1.ThEngineService }]; }, propDecorators: { thStats: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdHMuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXRocmVlL3NyYy9saWIvc3RhdHMvc3RhdHMuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFxQixNQUFNLGVBQWUsQ0FBQztBQUVwRSxPQUFPLEtBQUssTUFBTSxzQ0FBc0MsQ0FBQzs7O0FBTXpELE1BQU0sT0FBTyxjQUFjO0lBR3pCLFlBQW9CLGFBQThCO1FBQTlCLGtCQUFhLEdBQWIsYUFBYSxDQUFpQjtRQUNoRCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksS0FBSyxFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUNELFdBQVc7UUFDVCxJQUFJLElBQUksQ0FBQyxrQkFBa0IsRUFBRTtZQUMzQixJQUFJLENBQUMsa0JBQWtCLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDdkM7SUFDSCxDQUFDO0lBQ0QsUUFBUTtRQUNOLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRTtZQUM5QixNQUFNLElBQUksS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUM7U0FDdEM7UUFFRCxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7UUFDOUQsSUFBSSxhQUFhLEVBQUU7WUFDakIsYUFBYSxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDO1lBQzFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDO1lBQzNDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3hCLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBRSxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNyRSxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRTtnQkFDeEUsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUN0QixDQUFDLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQztJQUVELElBQ1csT0FBTyxDQUFDLE9BQWdCO1FBQ2pDLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDWixJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLFFBQVEsQ0FBQztTQUM1QzthQUFNO1lBQ0wsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUM7U0FDN0M7SUFDSCxDQUFDOzsyR0FuQ1UsY0FBYzsrRkFBZCxjQUFjOzJGQUFkLGNBQWM7a0JBSDFCLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLFdBQVc7aUJBQ3RCO3NHQThCWSxPQUFPO3NCQURqQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgT25EZXN0cm95LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRoRW5naW5lU2VydmljZSB9IGZyb20gJy4uL1RoRW5naW5lLnNlcnZpY2UnO1xuaW1wb3J0IFN0YXRzIGZyb20gJ3RocmVlL2V4YW1wbGVzL2pzbS9saWJzL3N0YXRzLm1vZHVsZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW3RoU3RhdHNdJ1xufSlcbmV4cG9ydCBjbGFzcyBTdGF0c0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgcHJpdmF0ZSBzdGF0czogU3RhdHM7XG4gIHByaXZhdGUgcmVuZGVyU3Vic2NyaXB0aW9uPzogU3Vic2NyaXB0aW9uO1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVuZ2luZVNlcnZpY2U6IFRoRW5naW5lU2VydmljZSkge1xuICAgIHRoaXMuc3RhdHMgPSBuZXcgU3RhdHMoKTtcbiAgfVxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5yZW5kZXJTdWJzY3JpcHRpb24pIHtcbiAgICAgIHRoaXMucmVuZGVyU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxuICB9XG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5lbmdpbmVTZXJ2aWNlLmNhbnZhcykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBjYW52YXMgcHJlc2VudCcpO1xuICAgIH1cblxuICAgIGNvbnN0IHBhcmVudEVsZW1lbnQgPSB0aGlzLmVuZ2luZVNlcnZpY2UuY2FudmFzLnBhcmVudEVsZW1lbnQ7XG4gICAgaWYgKHBhcmVudEVsZW1lbnQpIHtcbiAgICAgIHBhcmVudEVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnO1xuICAgICAgdGhpcy5zdGF0cy5kb20uc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgdGhpcy5zdGF0cy5zaG93UGFuZWwoMCk7XG4gICAgICB0aGlzLmVuZ2luZVNlcnZpY2UuY2FudmFzLnBhcmVudEVsZW1lbnQ/LmFwcGVuZENoaWxkKHRoaXMuc3RhdHMuZG9tKTtcbiAgICAgIHRoaXMucmVuZGVyU3Vic2NyaXB0aW9uID0gdGhpcy5lbmdpbmVTZXJ2aWNlLmJlZm9yZVJlbmRlciQuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgdGhpcy5zdGF0cy51cGRhdGUoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBzZXQgdGhTdGF0cyhlbmFibGVkOiBib29sZWFuKSB7XG4gICAgaWYgKCFlbmFibGVkKSB7XG4gICAgICB0aGlzLnN0YXRzLmRvbS5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc3RhdHMuZG9tLnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XG4gICAgfVxuICB9XG59XG4iXX0=