import { EventEmitter, NgZone, OnInit, PipeTransform } from '@angular/core';
import { Loader } from 'three';
import { ThLoader } from './ThLoaderBase';
import * as i0 from "@angular/core";
interface CallBackLoader extends Loader {
    load(url: string | string[], onLoad?: (...args: any) => void, onProgress?: (event: ProgressEvent) => void, onError?: (event: ErrorEvent) => void): any;
}
export declare abstract class ThCallbackLoaderService<T extends CallBackLoader> extends ThLoader<T> {
    load(...args: Parameters<T['load']>): ReturnType<T['load']>;
}
export declare abstract class ThCallbackLoaderBasePipe<T extends CallBackLoader> implements PipeTransform {
    protected abstract service: ThCallbackLoaderService<T>;
    transform(...args: Parameters<T['load']>): ReturnType<T["load"]>;
}
export declare abstract class ThCallbackLoaderBaseDirective<T extends CallBackLoader> implements OnInit {
    protected host: {
        objRef: any;
    };
    protected zone: NgZone;
    protected abstract service: ThCallbackLoaderService<T>;
    private initialized;
    private _url?;
    protected onLoaded$?: EventEmitter<ReturnType<T['load']>>;
    protected onProgress$?: EventEmitter<ProgressEvent>;
    set url(url: Parameters<T['load']>[0] | undefined);
    get url(): Parameters<T['load']>[0] | undefined;
    get onLoaded(): EventEmitter<ReturnType<T["load"]>>;
    get onProgress(): EventEmitter<ProgressEvent<EventTarget>>;
    constructor(host: {
        objRef: any;
    }, zone: NgZone);
    ngOnInit(): void;
    protected load(): Promise<void>;
    static ɵfac: i0.ɵɵFactoryDeclaration<ThCallbackLoaderBaseDirective<any>, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ThCallbackLoaderBaseDirective<any>, never, never, { "url": "url"; }, { "onLoaded": "onLoaded"; "onProgress": "onProgress"; }, never, never, false, never>;
}
export {};
