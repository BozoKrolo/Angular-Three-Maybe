/**
 * The following code is ported from pmndrs/drei and adapted to work with Angular and ngx-three
 * Many thanks to pmndrs/drei at its contributors!
 */
import { AfterViewInit, EventEmitter, OnChanges, OnDestroy, OnInit } from '@angular/core';
import { Camera, Group, Object3D } from 'three';
import { ThGroup, ThObject3D } from '../../generated';
import { ThCanvas } from '../../ThCanvas';
import { ThView } from '../../ThView';
import { NgChanges } from '../../util';
import * as i0 from "@angular/core";
declare function defaultCalculatePosition(el: Object3D, camera: Camera, size: {
    width: number;
    height: number;
}): number[];
export type CalculatePosition = typeof defaultCalculatePosition;
type PointerEventsProperties = 'auto' | 'none' | 'visiblePainted' | 'visibleFill' | 'visibleStroke' | 'visible' | 'painted' | 'fill' | 'stroke' | 'all' | 'inherit';
/**
 * A port of the pmndrs/drei Html component
 *
 * Add Html content to any three.js object3d node
 */
export declare class HtmlComponent extends ThGroup<Group> implements OnInit, OnDestroy, OnChanges, AfterViewInit {
    private view;
    private canvas;
    prepend: boolean;
    center: boolean;
    fullscreen: boolean;
    eps: number;
    portal?: HTMLElement;
    distanceFactor?: number;
    sprite: boolean;
    transform: boolean;
    zIndexRange: [number, number];
    style?: Partial<CSSStyleDeclaration>;
    className?: string;
    /**
     * Can be true or a Object3D>[]|ThObject3D[], true occludes the entire scene (default: undefined)
     */
    occlude?: Object3D[] | ThObject3D[] | boolean;
    onOcclude: EventEmitter<boolean>;
    /**
     * Override default positioning function. [ignored in transform mode]
     */
    calculatePosition: CalculatePosition;
    as: string;
    wrapperClass?: string;
    pointerEvents: PointerEventsProperties;
    protected transformInnerStyles: {
        position: string;
        pointerEvents: PointerEventsProperties;
    };
    protected styles: Record<string, any> | null;
    private oldZoom;
    private oldPosition;
    private notOccluded;
    private transformOuterRef?;
    private transformInnerRef?;
    private el?;
    private target?;
    private frameSubscription?;
    private raycaster;
    constructor(view: ThView, canvas: ThCanvas, parent: ThObject3D);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    protected onResize(): void;
    ngOnChanges(changes: NgChanges<HtmlComponent>): void;
    private appendElement;
    onFrame(): void;
    ngOnDestroy(): void;
    private computeStyles;
    private computeInnerStyles;
    private getSize;
    static ɵfac: i0.ɵɵFactoryDeclaration<HtmlComponent, [null, null, { skipSelf: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<HtmlComponent, "th-html", never, { "prepend": "prepend"; "center": "center"; "fullscreen": "fullscreen"; "portal": "portal"; "distanceFactor": "distanceFactor"; "sprite": "sprite"; "transform": "transform"; "zIndexRange": "zIndexRange"; "style": "style"; "className": "className"; "occlude": "occlude"; "calculatePosition": "calculatePosition"; "as": "as"; "wrapperClass": "wrapperClass"; "pointerEvents": "pointerEvents"; }, { "onOcclude": "onOcclude"; }, never, ["*"], false, never>;
}
export {};
