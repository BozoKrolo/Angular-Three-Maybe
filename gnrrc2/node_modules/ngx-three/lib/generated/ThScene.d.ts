import { Type } from '@angular/core';
import { Color, ColorRepresentation, CubeTexture, Event, FogBase, Material, Scene, Texture } from 'three';
import { ThObject3D } from './ThObject3D';
import * as i0 from "@angular/core";
export declare class ThScene<T extends Scene = Scene, TARGS = []> extends ThObject3D<Event, T, TARGS> {
    getType(): Type<Scene>;
    get isScene(): true | undefined;
    set type(value: 'Scene');
    get type(): 'Scene' | undefined;
    set fog(value: FogBase | null);
    get fog(): (FogBase | null) | undefined;
    set backgroundBlurriness(value: number);
    get backgroundBlurriness(): number | undefined;
    set backgroundIntensity(value: number);
    get backgroundIntensity(): number | undefined;
    set overrideMaterial(value: Material | null);
    get overrideMaterial(): (Material | null) | undefined;
    set background(value: Color | Texture | CubeTexture | null | [color: ColorRepresentation]);
    get background(): (Color | Texture | CubeTexture | null) | undefined;
    set environment(value: Texture | null);
    get environment(): (Texture | null) | undefined;
    static ɵfac: i0.ɵɵFactoryDeclaration<ThScene<any, any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ThScene<any, any>, "th-scene", never, { "type": "type"; "fog": "fog"; "backgroundBlurriness": "backgroundBlurriness"; "backgroundIntensity": "backgroundIntensity"; "overrideMaterial": "overrideMaterial"; "background": "background"; "environment": "environment"; }, {}, never, ["*"], false, never>;
}
