import { Type } from '@angular/core';
import { Camera, MOUSE, Vector3 } from 'three';
import { TrackballControls } from 'three/examples/jsm/controls/TrackballControls';
import { ThControlBase } from '../ThControlBase';
import * as i0 from "@angular/core";
export declare class ThTrackballControls<T extends TrackballControls = TrackballControls, TARGS = [object: Camera, domElement?: HTMLElement]> extends ThControlBase<T, TARGS> {
    getType(): Type<TrackballControls>;
    set object(value: Camera);
    get object(): Camera | undefined;
    set domElement(value: HTMLElement);
    get domElement(): HTMLElement | undefined;
    set enabled(value: boolean);
    get enabled(): boolean | undefined;
    set screen(value: {
        left: number;
        top: number;
        width: number;
        height: number;
    });
    get screen(): {
        left: number;
        top: number;
        width: number;
        height: number;
    } | undefined;
    set rotateSpeed(value: number);
    get rotateSpeed(): number | undefined;
    set zoomSpeed(value: number);
    get zoomSpeed(): number | undefined;
    set panSpeed(value: number);
    get panSpeed(): number | undefined;
    set noRotate(value: boolean);
    get noRotate(): boolean | undefined;
    set noZoom(value: boolean);
    get noZoom(): boolean | undefined;
    set noPan(value: boolean);
    get noPan(): boolean | undefined;
    set noRoll(value: boolean);
    get noRoll(): boolean | undefined;
    set staticMoving(value: boolean);
    get staticMoving(): boolean | undefined;
    set dynamicDampingFactor(value: number);
    get dynamicDampingFactor(): number | undefined;
    set minDistance(value: number);
    get minDistance(): number | undefined;
    set maxDistance(value: number);
    get maxDistance(): number | undefined;
    set minZoom(value: number);
    get minZoom(): number | undefined;
    set maxZoom(value: number);
    get maxZoom(): number | undefined;
    set keys(value: string[]);
    get keys(): string[] | undefined;
    set mouseButtons(value: {
        LEFT: MOUSE;
        MIDDLE: MOUSE;
        RIGHT: MOUSE;
    });
    get mouseButtons(): {
        LEFT: MOUSE;
        MIDDLE: MOUSE;
        RIGHT: MOUSE;
    } | undefined;
    set target(value: Vector3 | [x: number, y: number, z: number]);
    get target(): Vector3 | undefined;
    set position0(value: Vector3 | [x: number, y: number, z: number]);
    get position0(): Vector3 | undefined;
    set target0(value: Vector3 | [x: number, y: number, z: number]);
    get target0(): Vector3 | undefined;
    set up0(value: Vector3 | [x: number, y: number, z: number]);
    get up0(): Vector3 | undefined;
    static ɵfac: i0.ɵɵFactoryDeclaration<ThTrackballControls<any, any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ThTrackballControls<any, any>, "th-trackballControls", never, { "object": "object"; "domElement": "domElement"; "enabled": "enabled"; "screen": "screen"; "rotateSpeed": "rotateSpeed"; "zoomSpeed": "zoomSpeed"; "panSpeed": "panSpeed"; "noRotate": "noRotate"; "noZoom": "noZoom"; "noPan": "noPan"; "noRoll": "noRoll"; "staticMoving": "staticMoving"; "dynamicDampingFactor": "dynamicDampingFactor"; "minDistance": "minDistance"; "maxDistance": "maxDistance"; "minZoom": "minZoom"; "maxZoom": "maxZoom"; "keys": "keys"; "mouseButtons": "mouseButtons"; "target": "target"; "position0": "position0"; "target0": "target0"; "up0": "up0"; }, {}, never, ["*"], false, never>;
}
