import { Type } from '@angular/core';
import { Clock, WebGLRenderer, WebGLRenderTarget } from 'three';
import { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';
import { Pass } from 'three/examples/jsm/postprocessing/Pass';
import { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass';
import { ThWrapperBase } from '../ThWrapperBase';
import * as i0 from "@angular/core";
export declare class ThEffectComposerGen<T extends EffectComposer = EffectComposer, TARGS = [renderer: WebGLRenderer, renderTarget?: WebGLRenderTarget]> extends ThWrapperBase<T, TARGS> {
    getType(): Type<EffectComposer>;
    set renderer(value: WebGLRenderer);
    get renderer(): WebGLRenderer | undefined;
    set renderTarget1(value: WebGLRenderTarget);
    get renderTarget1(): WebGLRenderTarget | undefined;
    set renderTarget2(value: WebGLRenderTarget);
    get renderTarget2(): WebGLRenderTarget | undefined;
    set writeBuffer(value: WebGLRenderTarget);
    get writeBuffer(): WebGLRenderTarget | undefined;
    set readBuffer(value: WebGLRenderTarget);
    get readBuffer(): WebGLRenderTarget | undefined;
    set passes(value: Pass[]);
    get passes(): Pass[] | undefined;
    set copyPass(value: ShaderPass);
    get copyPass(): ShaderPass | undefined;
    set clock(value: Clock);
    get clock(): Clock | undefined;
    set renderToScreen(value: boolean);
    get renderToScreen(): boolean | undefined;
    static ɵfac: i0.ɵɵFactoryDeclaration<ThEffectComposerGen<any, any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ThEffectComposerGen<any, any>, "th-effectComposerGen", never, { "renderer": "renderer"; "renderTarget1": "renderTarget1"; "renderTarget2": "renderTarget2"; "writeBuffer": "writeBuffer"; "readBuffer": "readBuffer"; "passes": "passes"; "copyPass": "copyPass"; "clock": "clock"; "renderToScreen": "renderToScreen"; }, {}, never, ["*"], false, never>;
}
