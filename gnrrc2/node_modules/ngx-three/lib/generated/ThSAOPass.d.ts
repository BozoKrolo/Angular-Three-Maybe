import { Type } from '@angular/core';
import { Camera, Color, ColorRepresentation, MeshDepthMaterial, MeshNormalMaterial, Scene, ShaderMaterial, Vector2, WebGLRenderTarget } from 'three';
import { FullScreenQuad } from 'three/examples/jsm/postprocessing/Pass';
import { SAOPass, SAOPassParams } from 'three/examples/jsm/postprocessing/SAOPass';
import { ThPass } from './ThPass';
import * as i0 from "@angular/core";
export declare class ThSAOPass<T extends SAOPass = SAOPass, TARGS = [scene: Scene, camera: Camera, depthTexture?: boolean, useNormals?: boolean, resolution?: Vector2]> extends ThPass<T, TARGS> {
    getType(): Type<SAOPass>;
    set scene(value: Scene);
    get scene(): Scene | undefined;
    set camera(value: Camera);
    get camera(): Camera | undefined;
    set supportsDepthTextureExtension(value: boolean);
    get supportsDepthTextureExtension(): boolean | undefined;
    set supportsNormalTexture(value: boolean);
    get supportsNormalTexture(): boolean | undefined;
    set originalClearColor(value: Color | [color: ColorRepresentation]);
    get originalClearColor(): Color | undefined;
    set oldClearColor(value: Color | [color: ColorRepresentation]);
    get oldClearColor(): Color | undefined;
    set oldClearAlpha(value: number);
    get oldClearAlpha(): number | undefined;
    set resolution(value: Vector2 | [x: number, y: number]);
    get resolution(): Vector2 | undefined;
    set saoRenderTarget(value: WebGLRenderTarget);
    get saoRenderTarget(): WebGLRenderTarget | undefined;
    set blurIntermediateRenderTarget(value: WebGLRenderTarget);
    get blurIntermediateRenderTarget(): WebGLRenderTarget | undefined;
    set beautyRenderTarget(value: WebGLRenderTarget);
    get beautyRenderTarget(): WebGLRenderTarget | undefined;
    set normalRenderTarget(value: WebGLRenderTarget);
    get normalRenderTarget(): WebGLRenderTarget | undefined;
    set depthRenderTarget(value: WebGLRenderTarget);
    get depthRenderTarget(): WebGLRenderTarget | undefined;
    set depthMaterial(value: MeshDepthMaterial);
    get depthMaterial(): MeshDepthMaterial | undefined;
    set normalMaterial(value: MeshNormalMaterial);
    get normalMaterial(): MeshNormalMaterial | undefined;
    set saoMaterial(value: ShaderMaterial);
    get saoMaterial(): ShaderMaterial | undefined;
    set vBlurMaterial(value: ShaderMaterial);
    get vBlurMaterial(): ShaderMaterial | undefined;
    set hBlurMaterial(value: ShaderMaterial);
    get hBlurMaterial(): ShaderMaterial | undefined;
    set materialCopy(value: ShaderMaterial);
    get materialCopy(): ShaderMaterial | undefined;
    set depthCopy(value: ShaderMaterial);
    get depthCopy(): ShaderMaterial | undefined;
    set fsQuad(value: FullScreenQuad);
    get fsQuad(): FullScreenQuad | undefined;
    set params(value: SAOPassParams);
    get params(): SAOPassParams | undefined;
    static readonly OUTPUT: typeof import("three/examples/jsm/postprocessing/SAOPass").OUTPUT;
    static ɵfac: i0.ɵɵFactoryDeclaration<ThSAOPass<any, any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ThSAOPass<any, any>, "th-sAOPass", never, { "scene": "scene"; "camera": "camera"; "supportsDepthTextureExtension": "supportsDepthTextureExtension"; "supportsNormalTexture": "supportsNormalTexture"; "originalClearColor": "originalClearColor"; "oldClearColor": "oldClearColor"; "oldClearAlpha": "oldClearAlpha"; "resolution": "resolution"; "saoRenderTarget": "saoRenderTarget"; "blurIntermediateRenderTarget": "blurIntermediateRenderTarget"; "beautyRenderTarget": "beautyRenderTarget"; "normalRenderTarget": "normalRenderTarget"; "depthRenderTarget": "depthRenderTarget"; "depthMaterial": "depthMaterial"; "normalMaterial": "normalMaterial"; "saoMaterial": "saoMaterial"; "vBlurMaterial": "vBlurMaterial"; "hBlurMaterial": "hBlurMaterial"; "materialCopy": "materialCopy"; "depthCopy": "depthCopy"; "fsQuad": "fsQuad"; "params": "params"; }, {}, never, ["*"], false, never>;
}
