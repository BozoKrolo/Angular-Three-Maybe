import { Type } from '@angular/core';
import { Audio, AudioListener, Event } from 'three';
import { ThObject3D } from './ThObject3D';
import * as i0 from "@angular/core";
export declare class ThAudio<NodeType extends AudioNode = GainNode, T extends Audio<NodeType> = Audio<NodeType>, TARGS = AudioListener> extends ThObject3D<Event, T, TARGS> {
    getType(): Type<Audio<NodeType>>;
    get type(): (string | 'Audio') | undefined;
    set listener(value: AudioListener);
    get listener(): AudioListener | undefined;
    set context(value: AudioContext);
    get context(): AudioContext | undefined;
    set gain(value: GainNode);
    get gain(): GainNode | undefined;
    set autoplay(value: boolean);
    get autoplay(): boolean | undefined;
    set buffer(value: AudioBuffer | null);
    get buffer(): (AudioBuffer | null) | undefined;
    set detune(value: number);
    get detune(): number | undefined;
    set loop(value: boolean);
    get loop(): boolean | undefined;
    set loopStart(value: number);
    get loopStart(): number | undefined;
    set loopEnd(value: number);
    get loopEnd(): number | undefined;
    set offset(value: number);
    get offset(): number | undefined;
    set duration(value: number | undefined);
    get duration(): (number | undefined) | undefined;
    set playbackRate(value: number);
    get playbackRate(): number | undefined;
    set isPlaying(value: boolean);
    get isPlaying(): boolean | undefined;
    set hasPlaybackControl(value: boolean);
    get hasPlaybackControl(): boolean | undefined;
    set sourceType(value: string);
    get sourceType(): string | undefined;
    set source(value: AudioBufferSourceNode | null);
    get source(): (AudioBufferSourceNode | null) | undefined;
    set filters(value: AudioNode[]);
    get filters(): AudioNode[] | undefined;
    static ɵfac: i0.ɵɵFactoryDeclaration<ThAudio<any, any, any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ThAudio<any, any, any>, "th-audio", never, { "listener": "listener"; "context": "context"; "gain": "gain"; "autoplay": "autoplay"; "buffer": "buffer"; "detune": "detune"; "loop": "loop"; "loopStart": "loopStart"; "loopEnd": "loopEnd"; "offset": "offset"; "duration": "duration"; "playbackRate": "playbackRate"; "isPlaying": "isPlaying"; "hasPlaybackControl": "hasPlaybackControl"; "sourceType": "sourceType"; "source": "source"; "filters": "filters"; }, {}, never, ["*"], false, never>;
}
