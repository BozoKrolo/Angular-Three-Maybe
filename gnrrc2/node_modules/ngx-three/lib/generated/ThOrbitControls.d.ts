import { Type } from '@angular/core';
import { Camera, MOUSE, TOUCH, Vector3 } from 'three';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';
import { ThControlBase } from '../ThControlBase';
import * as i0 from "@angular/core";
export declare class ThOrbitControls<T extends OrbitControls = OrbitControls, TARGS = [object: Camera, domElement?: HTMLElement]> extends ThControlBase<T, TARGS> {
    getType(): Type<OrbitControls>;
    set object(value: Camera);
    get object(): Camera | undefined;
    set domElement(value: HTMLElement | Document);
    get domElement(): (HTMLElement | Document) | undefined;
    set enabled(value: boolean);
    get enabled(): boolean | undefined;
    set target(value: Vector3 | [x: number, y: number, z: number]);
    get target(): Vector3 | undefined;
    set center(value: Vector3 | [x: number, y: number, z: number]);
    get center(): Vector3 | undefined;
    set minDistance(value: number);
    get minDistance(): number | undefined;
    set maxDistance(value: number);
    get maxDistance(): number | undefined;
    set minZoom(value: number);
    get minZoom(): number | undefined;
    set maxZoom(value: number);
    get maxZoom(): number | undefined;
    set minPolarAngle(value: number);
    get minPolarAngle(): number | undefined;
    set maxPolarAngle(value: number);
    get maxPolarAngle(): number | undefined;
    set minAzimuthAngle(value: number);
    get minAzimuthAngle(): number | undefined;
    set maxAzimuthAngle(value: number);
    get maxAzimuthAngle(): number | undefined;
    set enableDamping(value: boolean);
    get enableDamping(): boolean | undefined;
    set dampingFactor(value: number);
    get dampingFactor(): number | undefined;
    set enableZoom(value: boolean);
    get enableZoom(): boolean | undefined;
    set zoomSpeed(value: number);
    get zoomSpeed(): number | undefined;
    set enableRotate(value: boolean);
    get enableRotate(): boolean | undefined;
    set rotateSpeed(value: number);
    get rotateSpeed(): number | undefined;
    set enablePan(value: boolean);
    get enablePan(): boolean | undefined;
    set panSpeed(value: number);
    get panSpeed(): number | undefined;
    set screenSpacePanning(value: boolean);
    get screenSpacePanning(): boolean | undefined;
    set keyPanSpeed(value: number);
    get keyPanSpeed(): number | undefined;
    set autoRotate(value: boolean);
    get autoRotate(): boolean | undefined;
    set autoRotateSpeed(value: number);
    get autoRotateSpeed(): number | undefined;
    set keys(value: {
        LEFT: string;
        UP: string;
        RIGHT: string;
        BOTTOM: string;
    });
    get keys(): {
        LEFT: string;
        UP: string;
        RIGHT: string;
        BOTTOM: string;
    } | undefined;
    set mouseButtons(value: Partial<{
        LEFT: MOUSE;
        MIDDLE: MOUSE;
        RIGHT: MOUSE;
    }>);
    get mouseButtons(): Partial<{
        LEFT: MOUSE;
        MIDDLE: MOUSE;
        RIGHT: MOUSE;
    }> | undefined;
    set touches(value: Partial<{
        ONE: TOUCH;
        TWO: TOUCH;
    }>);
    get touches(): Partial<{
        ONE: TOUCH;
        TWO: TOUCH;
    }> | undefined;
    set target0(value: Vector3 | [x: number, y: number, z: number]);
    get target0(): Vector3 | undefined;
    set position0(value: Vector3 | [x: number, y: number, z: number]);
    get position0(): Vector3 | undefined;
    set zoom0(value: number);
    get zoom0(): number | undefined;
    static ɵfac: i0.ɵɵFactoryDeclaration<ThOrbitControls<any, any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ThOrbitControls<any, any>, "th-orbitControls", never, { "object": "object"; "domElement": "domElement"; "enabled": "enabled"; "target": "target"; "center": "center"; "minDistance": "minDistance"; "maxDistance": "maxDistance"; "minZoom": "minZoom"; "maxZoom": "maxZoom"; "minPolarAngle": "minPolarAngle"; "maxPolarAngle": "maxPolarAngle"; "minAzimuthAngle": "minAzimuthAngle"; "maxAzimuthAngle": "maxAzimuthAngle"; "enableDamping": "enableDamping"; "dampingFactor": "dampingFactor"; "enableZoom": "enableZoom"; "zoomSpeed": "zoomSpeed"; "enableRotate": "enableRotate"; "rotateSpeed": "rotateSpeed"; "enablePan": "enablePan"; "panSpeed": "panSpeed"; "screenSpacePanning": "screenSpacePanning"; "keyPanSpeed": "keyPanSpeed"; "autoRotate": "autoRotate"; "autoRotateSpeed": "autoRotateSpeed"; "keys": "keys"; "mouseButtons": "mouseButtons"; "touches": "touches"; "target0": "target0"; "position0": "position0"; "zoom0": "zoom0"; }, {}, never, ["*"], false, never>;
}
