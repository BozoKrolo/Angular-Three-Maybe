import { Type } from '@angular/core';
import { AnyMapping, AnyPixelFormat, MagnificationTextureFilter, Mapping, Matrix3, MinificationTextureFilter, OffscreenCanvas, PixelFormat, PixelFormatGPU, Source, Texture, TextureDataType, TextureEncoding, Vector2, Wrapping } from 'three';
import { ThTextureBase } from '../ThTextureBase';
import * as i0 from "@angular/core";
export declare class ThTexture<T extends Texture = Texture, TARGS = [
    image?: TexImageSource | OffscreenCanvas,
    mapping?: Mapping,
    wrapS?: Wrapping,
    wrapT?: Wrapping,
    magFilter?: MagnificationTextureFilter,
    minFilter?: MinificationTextureFilter,
    format?: PixelFormat,
    type?: TextureDataType,
    anisotropy?: number,
    encoding?: TextureEncoding
]> extends ThTextureBase<T, TARGS> {
    getType(): Type<Texture>;
    get isTexture(): true | undefined;
    get id(): number | undefined;
    set uuid(value: string);
    get uuid(): string | undefined;
    set name(value: string);
    get name(): string | undefined;
    set source(value: Source);
    get source(): Source | undefined;
    set mipmaps(value: any[]);
    get mipmaps(): any[] | undefined;
    set mapping(value: AnyMapping);
    get mapping(): AnyMapping | undefined;
    set channel(value: number);
    get channel(): number | undefined;
    set wrapS(value: Wrapping);
    get wrapS(): Wrapping | undefined;
    set wrapT(value: Wrapping);
    get wrapT(): Wrapping | undefined;
    set magFilter(value: MagnificationTextureFilter);
    get magFilter(): MagnificationTextureFilter | undefined;
    set minFilter(value: MinificationTextureFilter);
    get minFilter(): MinificationTextureFilter | undefined;
    set anisotropy(value: number);
    get anisotropy(): number | undefined;
    set format(value: AnyPixelFormat);
    get format(): AnyPixelFormat | undefined;
    set type(value: TextureDataType);
    get type(): TextureDataType | undefined;
    set internalFormat(value: PixelFormatGPU | null);
    get internalFormat(): (PixelFormatGPU | null) | undefined;
    set matrix(value: Matrix3 | [
        n11: number,
        n12: number,
        n13: number,
        n21: number,
        n22: number,
        n23: number,
        n31: number,
        n32: number,
        n33: number
    ]);
    get matrix(): Matrix3 | undefined;
    set matrixAutoUpdate(value: boolean);
    get matrixAutoUpdate(): boolean | undefined;
    set offset(value: Vector2 | [x: number, y: number]);
    get offset(): Vector2 | undefined;
    set repeat(value: Vector2 | [x: number, y: number]);
    get repeat(): Vector2 | undefined;
    set center(value: Vector2 | [x: number, y: number]);
    get center(): Vector2 | undefined;
    set rotation(value: number);
    get rotation(): number | undefined;
    set generateMipmaps(value: boolean);
    get generateMipmaps(): boolean | undefined;
    set premultiplyAlpha(value: boolean);
    get premultiplyAlpha(): boolean | undefined;
    set flipY(value: boolean);
    get flipY(): boolean | undefined;
    set unpackAlignment(value: number);
    get unpackAlignment(): number | undefined;
    set encoding(value: TextureEncoding);
    get encoding(): TextureEncoding | undefined;
    set isRenderTargetTexture(value: boolean);
    get isRenderTargetTexture(): boolean | undefined;
    set needsPMREMUpdate(value: boolean);
    get needsPMREMUpdate(): boolean | undefined;
    set userData(value: any);
    get userData(): any | undefined;
    set version(value: number);
    get version(): number | undefined;
    static readonly DEFAULT_ANISOTROPY: number;
    static readonly DEFAULT_IMAGE: any;
    static readonly DEFAULT_MAPPING: Mapping;
    static ɵfac: i0.ɵɵFactoryDeclaration<ThTexture<any, any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ThTexture<any, any>, "th-texture", never, { "uuid": "uuid"; "name": "name"; "source": "source"; "mipmaps": "mipmaps"; "mapping": "mapping"; "channel": "channel"; "wrapS": "wrapS"; "wrapT": "wrapT"; "magFilter": "magFilter"; "minFilter": "minFilter"; "anisotropy": "anisotropy"; "format": "format"; "type": "type"; "internalFormat": "internalFormat"; "matrix": "matrix"; "matrixAutoUpdate": "matrixAutoUpdate"; "offset": "offset"; "repeat": "repeat"; "center": "center"; "rotation": "rotation"; "generateMipmaps": "generateMipmaps"; "premultiplyAlpha": "premultiplyAlpha"; "flipY": "flipY"; "unpackAlignment": "unpackAlignment"; "encoding": "encoding"; "isRenderTargetTexture": "isRenderTargetTexture"; "needsPMREMUpdate": "needsPMREMUpdate"; "userData": "userData"; "version": "version"; }, {}, never, ["*"], false, never>;
}
