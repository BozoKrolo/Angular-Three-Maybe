import { Type } from '@angular/core';
import { DeepTexturePixelFormat, DepthTexture, MagnificationTextureFilter, Mapping, MinificationTextureFilter, TextureDataType, Wrapping } from 'three';
import { ThTexture } from './ThTexture';
import * as i0 from "@angular/core";
export declare class ThDepthTexture<T extends DepthTexture = DepthTexture, TARGS = [
    width: number,
    height: number,
    type?: TextureDataType,
    mapping?: Mapping,
    wrapS?: Wrapping,
    wrapT?: Wrapping,
    magFilter?: MagnificationTextureFilter,
    minFilter?: MinificationTextureFilter,
    anisotropy?: number,
    format?: DeepTexturePixelFormat
]> extends ThTexture<T, TARGS> {
    getType(): Type<DepthTexture>;
    get isDepthTexture(): true | undefined;
    set flipY(value: boolean);
    get flipY(): boolean | undefined;
    set magFilter(value: MagnificationTextureFilter);
    get magFilter(): MagnificationTextureFilter | undefined;
    set minFilter(value: MinificationTextureFilter);
    get minFilter(): MinificationTextureFilter | undefined;
    set generateMipmaps(value: boolean);
    get generateMipmaps(): boolean | undefined;
    set format(value: DeepTexturePixelFormat);
    get format(): DeepTexturePixelFormat | undefined;
    set type(value: TextureDataType);
    get type(): TextureDataType | undefined;
    static ɵfac: i0.ɵɵFactoryDeclaration<ThDepthTexture<any, any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ThDepthTexture<any, any>, "th-depthTexture", never, { "flipY": "flipY"; "magFilter": "magFilter"; "minFilter": "minFilter"; "generateMipmaps": "generateMipmaps"; "format": "format"; "type": "type"; }, {}, never, ["*"], false, never>;
}
