import { Type } from '@angular/core';
import { Camera, Color, ColorRepresentation, DataTexture, MeshNormalMaterial, Scene, ShaderMaterial, Vector3, WebGLRenderTarget } from 'three';
import { FullScreenQuad } from 'three/examples/jsm/postprocessing/Pass';
import { SSAOPass, SSAOPassOUTPUT } from 'three/examples/jsm/postprocessing/SSAOPass';
import { ThPass } from './ThPass';
import * as i0 from "@angular/core";
export declare class ThSSAOPass<T extends SSAOPass = SSAOPass, TARGS = [scene: Scene, camera: Camera, width?: number, height?: number]> extends ThPass<T, TARGS> {
    getType(): Type<SSAOPass>;
    set scene(value: Scene);
    get scene(): Scene | undefined;
    set camera(value: Camera);
    get camera(): Camera | undefined;
    set width(value: number);
    get width(): number | undefined;
    set height(value: boolean);
    get height(): boolean | undefined;
    set clear(value: boolean);
    get clear(): boolean | undefined;
    set kernelRadius(value: number);
    get kernelRadius(): number | undefined;
    set kernelSize(value: number);
    get kernelSize(): number | undefined;
    set kernel(value: Vector3[]);
    get kernel(): Vector3[] | undefined;
    set noiseTexture(value: DataTexture);
    get noiseTexture(): DataTexture | undefined;
    set output(value: SSAOPassOUTPUT);
    get output(): SSAOPassOUTPUT | undefined;
    set minDistance(value: number);
    get minDistance(): number | undefined;
    set maxDistance(value: number);
    get maxDistance(): number | undefined;
    set beautyRenderTarget(value: WebGLRenderTarget);
    get beautyRenderTarget(): WebGLRenderTarget | undefined;
    set normalRenderTarget(value: WebGLRenderTarget);
    get normalRenderTarget(): WebGLRenderTarget | undefined;
    set ssaoRenderTarget(value: WebGLRenderTarget);
    get ssaoRenderTarget(): WebGLRenderTarget | undefined;
    set blurRenderTarget(value: WebGLRenderTarget);
    get blurRenderTarget(): WebGLRenderTarget | undefined;
    set ssaoMaterial(value: ShaderMaterial);
    get ssaoMaterial(): ShaderMaterial | undefined;
    set normalMaterial(value: MeshNormalMaterial);
    get normalMaterial(): MeshNormalMaterial | undefined;
    set blurMaterial(value: ShaderMaterial);
    get blurMaterial(): ShaderMaterial | undefined;
    set depthRenderMaterial(value: ShaderMaterial);
    get depthRenderMaterial(): ShaderMaterial | undefined;
    set copyMaterial(value: ShaderMaterial);
    get copyMaterial(): ShaderMaterial | undefined;
    set fsQuad(value: FullScreenQuad);
    get fsQuad(): FullScreenQuad | undefined;
    set originalClearColor(value: Color | [color: ColorRepresentation]);
    get originalClearColor(): Color | undefined;
    static readonly OUTPUT: SSAOPassOUTPUT;
    static ɵfac: i0.ɵɵFactoryDeclaration<ThSSAOPass<any, any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ThSSAOPass<any, any>, "th-sSAOPass", never, { "scene": "scene"; "camera": "camera"; "width": "width"; "height": "height"; "clear": "clear"; "kernelRadius": "kernelRadius"; "kernelSize": "kernelSize"; "kernel": "kernel"; "noiseTexture": "noiseTexture"; "output": "output"; "minDistance": "minDistance"; "maxDistance": "maxDistance"; "beautyRenderTarget": "beautyRenderTarget"; "normalRenderTarget": "normalRenderTarget"; "ssaoRenderTarget": "ssaoRenderTarget"; "blurRenderTarget": "blurRenderTarget"; "ssaoMaterial": "ssaoMaterial"; "normalMaterial": "normalMaterial"; "blurMaterial": "blurMaterial"; "depthRenderMaterial": "depthRenderMaterial"; "copyMaterial": "copyMaterial"; "fsQuad": "fsQuad"; "originalClearColor": "originalClearColor"; }, {}, never, ["*"], false, never>;
}
