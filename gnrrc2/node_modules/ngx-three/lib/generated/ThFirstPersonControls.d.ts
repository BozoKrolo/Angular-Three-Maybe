import { Type } from '@angular/core';
import { Camera } from 'three';
import { FirstPersonControls } from 'three/examples/jsm/controls/FirstPersonControls';
import { ThControlBase } from '../ThControlBase';
import * as i0 from "@angular/core";
export declare class ThFirstPersonControls<T extends FirstPersonControls = FirstPersonControls, TARGS = [object: Camera, domElement?: HTMLElement]> extends ThControlBase<T, TARGS> {
    getType(): Type<FirstPersonControls>;
    set object(value: Camera);
    get object(): Camera | undefined;
    set domElement(value: HTMLElement | Document);
    get domElement(): (HTMLElement | Document) | undefined;
    set enabled(value: boolean);
    get enabled(): boolean | undefined;
    set movementSpeed(value: number);
    get movementSpeed(): number | undefined;
    set lookSpeed(value: number);
    get lookSpeed(): number | undefined;
    set lookVertical(value: boolean);
    get lookVertical(): boolean | undefined;
    set autoForward(value: boolean);
    get autoForward(): boolean | undefined;
    set activeLook(value: boolean);
    get activeLook(): boolean | undefined;
    set heightSpeed(value: boolean);
    get heightSpeed(): boolean | undefined;
    set heightCoef(value: number);
    get heightCoef(): number | undefined;
    set heightMin(value: number);
    get heightMin(): number | undefined;
    set heightMax(value: number);
    get heightMax(): number | undefined;
    set constrainVertical(value: boolean);
    get constrainVertical(): boolean | undefined;
    set verticalMin(value: number);
    get verticalMin(): number | undefined;
    set verticalMax(value: number);
    get verticalMax(): number | undefined;
    set mouseDragOn(value: boolean);
    get mouseDragOn(): boolean | undefined;
    static ɵfac: i0.ɵɵFactoryDeclaration<ThFirstPersonControls<any, any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ThFirstPersonControls<any, any>, "th-firstPersonControls", never, { "object": "object"; "domElement": "domElement"; "enabled": "enabled"; "movementSpeed": "movementSpeed"; "lookSpeed": "lookSpeed"; "lookVertical": "lookVertical"; "autoForward": "autoForward"; "activeLook": "activeLook"; "heightSpeed": "heightSpeed"; "heightCoef": "heightCoef"; "heightMin": "heightMin"; "heightMax": "heightMax"; "constrainVertical": "constrainVertical"; "verticalMin": "verticalMin"; "verticalMax": "verticalMax"; "mouseDragOn": "mouseDragOn"; }, {}, never, ["*"], false, never>;
}
