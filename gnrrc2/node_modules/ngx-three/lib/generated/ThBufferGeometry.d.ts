import { Type } from '@angular/core';
import { Box3, BufferAttribute, BufferGeometry, GLBufferAttribute, InterleavedBufferAttribute, Sphere, Vector3 } from 'three';
import { ThGeometryBase } from '../ThGeometryBase';
import { ThObject3D } from './ThObject3D';
import * as i0 from "@angular/core";
export declare class ThBufferGeometry<T extends BufferGeometry = BufferGeometry, TARGS = []> extends ThGeometryBase<T, TARGS> {
    getType(): Type<BufferGeometry>;
    set id(value: number);
    get id(): number | undefined;
    set uuid(value: string);
    get uuid(): string | undefined;
    set name(value: string);
    get name(): string | undefined;
    get type(): (string | 'BufferGeometry') | undefined;
    set index(value: BufferAttribute | null | [value: ArrayLike<number> | ArrayBufferView, offset?: number]);
    get index(): (BufferAttribute | null) | undefined;
    set attributes(value: {
        [name: string]: BufferAttribute | InterleavedBufferAttribute | GLBufferAttribute;
    });
    get attributes(): {
        [name: string]: BufferAttribute | InterleavedBufferAttribute | GLBufferAttribute;
    } | undefined;
    set morphAttributes(value: {
        [name: string]: Array<BufferAttribute | InterleavedBufferAttribute>;
    });
    get morphAttributes(): {
        [name: string]: Array<BufferAttribute | InterleavedBufferAttribute>;
    } | undefined;
    set morphTargetsRelative(value: boolean);
    get morphTargetsRelative(): boolean | undefined;
    set groups(value: Array<{
        /**
         * Specifies the first element in this draw call – the first vertex for non-indexed geometry, otherwise the first triangle index.
         *
         * @remarks Expects a `Integer`
         */
        start: number;
        /**
         * Specifies how many vertices (or indices) are included.
         *
         * @remarks Expects a `Integer`
         */
        count: number;
        /**
         * Specifies the material array index to use.
         *
         * @remarks Expects a `Integer`
         */
        materialIndex?: number | undefined;
    }>);
    get groups(): Array<{
        /**
         * Specifies the first element in this draw call – the first vertex for non-indexed geometry, otherwise the first triangle index.
         *
         * @remarks Expects a `Integer`
         */
        start: number;
        /**
         * Specifies how many vertices (or indices) are included.
         *
         * @remarks Expects a `Integer`
         */
        count: number;
        /**
         * Specifies the material array index to use.
         *
         * @remarks Expects a `Integer`
         */
        materialIndex?: number | undefined;
    }> | undefined;
    set boundingBox(value: Box3 | null | [min: Vector3, max: Vector3]);
    get boundingBox(): (Box3 | null) | undefined;
    set boundingSphere(value: Sphere | null | [center: Vector3, radius: number]);
    get boundingSphere(): (Sphere | null) | undefined;
    set drawRange(value: {
        start: number;
        count: number;
    });
    get drawRange(): {
        start: number;
        count: number;
    } | undefined;
    set userData(value: {
        [key: string]: any;
    });
    get userData(): {
        [key: string]: any;
    } | undefined;
    get isBufferGeometry(): true | undefined;
    constructor(hostObject: ThObject3D);
    static ɵfac: i0.ɵɵFactoryDeclaration<ThBufferGeometry<any, any>, [{ skipSelf: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ThBufferGeometry<any, any>, "th-bufferGeometry", never, { "id": "id"; "uuid": "uuid"; "name": "name"; "index": "index"; "attributes": "attributes"; "morphAttributes": "morphAttributes"; "morphTargetsRelative": "morphTargetsRelative"; "groups": "groups"; "boundingBox": "boundingBox"; "boundingSphere": "boundingSphere"; "drawRange": "drawRange"; "userData": "userData"; }, {}, never, ["*"], false, never>;
}
