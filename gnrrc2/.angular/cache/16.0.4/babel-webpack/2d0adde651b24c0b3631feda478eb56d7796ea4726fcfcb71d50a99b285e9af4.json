{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/bozok/Desktop/AngularProject/gnrrc2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**\n * Loader for KTX 2.0 GPU Texture containers.\n *\n * KTX 2.0 is a container format for various GPU texture formats. The loader\n * supports Basis Universal GPU textures, which can be quickly transcoded to\n * a wide variety of GPU texture compression formats, as well as some\n * uncompressed DataTexture and Data3DTexture formats.\n *\n * References:\n * - KTX: http://github.khronos.org/KTX-Specification/\n * - DFD: https://www.khronos.org/registry/DataFormat/specs/1.3/dataformat.1.3.html#basicdescriptor\n */\n\nimport { CompressedTexture, CompressedArrayTexture, Data3DTexture, DataTexture, FileLoader, FloatType, HalfFloatType, NoColorSpace, LinearFilter, LinearMipmapLinearFilter, Loader, RedFormat, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format, RGBA_ASTC_4x4_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT5_Format, RGBAFormat, RGFormat, SRGBColorSpace, UnsignedByteType } from 'three';\nimport { WorkerPool } from '../utils/WorkerPool.js';\nimport { read, KHR_DF_FLAG_ALPHA_PREMULTIPLIED, KHR_DF_TRANSFER_SRGB, KHR_SUPERCOMPRESSION_NONE, KHR_SUPERCOMPRESSION_ZSTD, VK_FORMAT_UNDEFINED, VK_FORMAT_R16_SFLOAT, VK_FORMAT_R16G16_SFLOAT, VK_FORMAT_R16G16B16A16_SFLOAT, VK_FORMAT_R32_SFLOAT, VK_FORMAT_R32G32_SFLOAT, VK_FORMAT_R32G32B32A32_SFLOAT, VK_FORMAT_R8_SRGB, VK_FORMAT_R8_UNORM, VK_FORMAT_R8G8_SRGB, VK_FORMAT_R8G8_UNORM, VK_FORMAT_R8G8B8A8_SRGB, VK_FORMAT_R8G8B8A8_UNORM } from '../libs/ktx-parse.module.js';\nimport { ZSTDDecoder } from '../libs/zstddec.module.js';\nconst _taskCache = new WeakMap();\nlet _activeLoaders = 0;\nlet _zstd;\nclass KTX2Loader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.transcoderPath = '';\n    this.transcoderBinary = null;\n    this.transcoderPending = null;\n    this.workerPool = new WorkerPool();\n    this.workerSourceURL = '';\n    this.workerConfig = null;\n    if (typeof MSC_TRANSCODER !== 'undefined') {\n      console.warn('THREE.KTX2Loader: Please update to latest \"basis_transcoder\".' + ' \"msc_basis_transcoder\" is no longer supported in three.js r125+.');\n    }\n  }\n  setTranscoderPath(path) {\n    this.transcoderPath = path;\n    return this;\n  }\n  setWorkerLimit(num) {\n    this.workerPool.setWorkerLimit(num);\n    return this;\n  }\n  detectSupport(renderer) {\n    if (renderer.isWebGPURenderer === true) {\n      this.workerConfig = {\n        astcSupported: renderer.hasFeature('texture-compression-astc'),\n        etc1Supported: false,\n        etc2Supported: renderer.hasFeature('texture-compression-etc2'),\n        dxtSupported: renderer.hasFeature('texture-compression-bc'),\n        bptcSupported: false,\n        pvrtcSupported: false\n      };\n    } else {\n      this.workerConfig = {\n        astcSupported: renderer.extensions.has('WEBGL_compressed_texture_astc'),\n        etc1Supported: renderer.extensions.has('WEBGL_compressed_texture_etc1'),\n        etc2Supported: renderer.extensions.has('WEBGL_compressed_texture_etc'),\n        dxtSupported: renderer.extensions.has('WEBGL_compressed_texture_s3tc'),\n        bptcSupported: renderer.extensions.has('EXT_texture_compression_bptc'),\n        pvrtcSupported: renderer.extensions.has('WEBGL_compressed_texture_pvrtc') || renderer.extensions.has('WEBKIT_WEBGL_compressed_texture_pvrtc')\n      };\n      if (renderer.capabilities.isWebGL2) {\n        // https://github.com/mrdoob/three.js/pull/22928\n        this.workerConfig.etc1Supported = false;\n      }\n    }\n    return this;\n  }\n  init() {\n    if (!this.transcoderPending) {\n      // Load transcoder wrapper.\n      const jsLoader = new FileLoader(this.manager);\n      jsLoader.setPath(this.transcoderPath);\n      jsLoader.setWithCredentials(this.withCredentials);\n      const jsContent = jsLoader.loadAsync('basis_transcoder.js');\n\n      // Load transcoder WASM binary.\n      const binaryLoader = new FileLoader(this.manager);\n      binaryLoader.setPath(this.transcoderPath);\n      binaryLoader.setResponseType('arraybuffer');\n      binaryLoader.setWithCredentials(this.withCredentials);\n      const binaryContent = binaryLoader.loadAsync('basis_transcoder.wasm');\n      this.transcoderPending = Promise.all([jsContent, binaryContent]).then(([jsContent, binaryContent]) => {\n        const fn = KTX2Loader.BasisWorker.toString();\n        const body = ['/* constants */', 'let _EngineFormat = ' + JSON.stringify(KTX2Loader.EngineFormat), 'let _TranscoderFormat = ' + JSON.stringify(KTX2Loader.TranscoderFormat), 'let _BasisFormat = ' + JSON.stringify(KTX2Loader.BasisFormat), '/* basis_transcoder.js */', jsContent, '/* worker */', fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))].join('\\n');\n        this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n        this.transcoderBinary = binaryContent;\n        this.workerPool.setWorkerCreator(() => {\n          const worker = new Worker(this.workerSourceURL);\n          const transcoderBinary = this.transcoderBinary.slice(0);\n          worker.postMessage({\n            type: 'init',\n            config: this.workerConfig,\n            transcoderBinary\n          }, [transcoderBinary]);\n          return worker;\n        });\n      });\n      if (_activeLoaders > 0) {\n        // Each instance loads a transcoder and allocates workers, increasing network and memory cost.\n\n        console.warn('THREE.KTX2Loader: Multiple active KTX2 loaders may cause performance issues.' + ' Use a single KTX2Loader instance, or call .dispose() on old instances.');\n      }\n      _activeLoaders++;\n    }\n    return this.transcoderPending;\n  }\n  load(url, onLoad, onProgress, onError) {\n    if (this.workerConfig === null) {\n      throw new Error('THREE.KTX2Loader: Missing initialization with `.detectSupport( renderer )`.');\n    }\n    const loader = new FileLoader(this.manager);\n    loader.setResponseType('arraybuffer');\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, buffer => {\n      // Check for an existing task using this buffer. A transferred buffer cannot be transferred\n      // again from this thread.\n      if (_taskCache.has(buffer)) {\n        const cachedTask = _taskCache.get(buffer);\n        return cachedTask.promise.then(onLoad).catch(onError);\n      }\n      this._createTexture(buffer).then(texture => onLoad ? onLoad(texture) : null).catch(onError);\n    }, onProgress, onError);\n  }\n  _createTextureFrom(transcodeResult, container) {\n    const {\n      faces,\n      width,\n      height,\n      format,\n      type,\n      error,\n      dfdTransferFn,\n      dfdFlags\n    } = transcodeResult;\n    if (type === 'error') return Promise.reject(error);\n    let texture;\n    if (container.faceCount === 6) {\n      texture = new CompressedTexture();\n      texture.image = faces;\n      texture.format = format;\n      texture.type = UnsignedByteType;\n    } else {\n      const mipmaps = faces[0].mipmaps;\n      texture = container.layerCount > 1 ? new CompressedArrayTexture(mipmaps, width, height, container.layerCount, format, UnsignedByteType) : new CompressedTexture(mipmaps, width, height, format, UnsignedByteType);\n    }\n    texture.minFilter = faces[0].mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n    texture.magFilter = LinearFilter;\n    texture.generateMipmaps = false;\n    texture.needsUpdate = true;\n    // TODO: Detect NoColorSpace vs. LinearSRGBColorSpace based on primaries.\n    texture.colorSpace = dfdTransferFn === KHR_DF_TRANSFER_SRGB ? SRGBColorSpace : NoColorSpace;\n    texture.premultiplyAlpha = !!(dfdFlags & KHR_DF_FLAG_ALPHA_PREMULTIPLIED);\n    return texture;\n  }\n\n  /**\n   * @param {ArrayBuffer} buffer\n   * @param {object?} config\n   * @return {Promise<CompressedTexture|CompressedArrayTexture|DataTexture|Data3DTexture>}\n   */\n  _createTexture(buffer, config = {}) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const container = read(new Uint8Array(buffer));\n      if (container.vkFormat !== VK_FORMAT_UNDEFINED) {\n        const mipmaps = [];\n        const pendings = [];\n        for (let levelIndex = 0; levelIndex < container.levels.length; levelIndex++) {\n          pendings.push(createDataTexture(container, levelIndex).then(function (dataTexture) {\n            mipmaps[levelIndex] = dataTexture;\n          }));\n        }\n        yield Promise.all(pendings);\n        const texture = mipmaps[0];\n        texture.mipmaps = mipmaps.map(dt => {\n          return {\n            data: dt.source.data,\n            width: dt.source.data.width,\n            height: dt.source.data.height,\n            depth: dt.source.data.depth\n          };\n        });\n        return texture;\n      }\n\n      //\n      const taskConfig = config;\n      const texturePending = _this.init().then(() => {\n        return _this.workerPool.postMessage({\n          type: 'transcode',\n          buffer,\n          taskConfig: taskConfig\n        }, [buffer]);\n      }).then(e => _this._createTextureFrom(e.data, container));\n\n      // Cache the task result.\n      _taskCache.set(buffer, {\n        promise: texturePending\n      });\n      return texturePending;\n    })();\n  }\n  dispose() {\n    this.workerPool.dispose();\n    if (this.workerSourceURL) URL.revokeObjectURL(this.workerSourceURL);\n    _activeLoaders--;\n    return this;\n  }\n}\n\n/* CONSTANTS */\n\nKTX2Loader.BasisFormat = {\n  ETC1S: 0,\n  UASTC_4x4: 1\n};\nKTX2Loader.TranscoderFormat = {\n  ETC1: 0,\n  ETC2: 1,\n  BC1: 2,\n  BC3: 3,\n  BC4: 4,\n  BC5: 5,\n  BC7_M6_OPAQUE_ONLY: 6,\n  BC7_M5: 7,\n  PVRTC1_4_RGB: 8,\n  PVRTC1_4_RGBA: 9,\n  ASTC_4x4: 10,\n  ATC_RGB: 11,\n  ATC_RGBA_INTERPOLATED_ALPHA: 12,\n  RGBA32: 13,\n  RGB565: 14,\n  BGR565: 15,\n  RGBA4444: 16\n};\nKTX2Loader.EngineFormat = {\n  RGBAFormat: RGBAFormat,\n  RGBA_ASTC_4x4_Format: RGBA_ASTC_4x4_Format,\n  RGBA_BPTC_Format: RGBA_BPTC_Format,\n  RGBA_ETC2_EAC_Format: RGBA_ETC2_EAC_Format,\n  RGBA_PVRTC_4BPPV1_Format: RGBA_PVRTC_4BPPV1_Format,\n  RGBA_S3TC_DXT5_Format: RGBA_S3TC_DXT5_Format,\n  RGB_ETC1_Format: RGB_ETC1_Format,\n  RGB_ETC2_Format: RGB_ETC2_Format,\n  RGB_PVRTC_4BPPV1_Format: RGB_PVRTC_4BPPV1_Format,\n  RGB_S3TC_DXT1_Format: RGB_S3TC_DXT1_Format\n};\n\n/* WEB WORKER */\n\nKTX2Loader.BasisWorker = function () {\n  let config;\n  let transcoderPending;\n  let BasisModule;\n  const EngineFormat = _EngineFormat; // eslint-disable-line no-undef\n  const TranscoderFormat = _TranscoderFormat; // eslint-disable-line no-undef\n  const BasisFormat = _BasisFormat; // eslint-disable-line no-undef\n\n  self.addEventListener('message', function (e) {\n    const message = e.data;\n    switch (message.type) {\n      case 'init':\n        config = message.config;\n        init(message.transcoderBinary);\n        break;\n      case 'transcode':\n        transcoderPending.then(() => {\n          try {\n            const {\n              faces,\n              buffers,\n              width,\n              height,\n              hasAlpha,\n              format,\n              dfdTransferFn,\n              dfdFlags\n            } = transcode(message.buffer);\n            self.postMessage({\n              type: 'transcode',\n              id: message.id,\n              faces,\n              width,\n              height,\n              hasAlpha,\n              format,\n              dfdTransferFn,\n              dfdFlags\n            }, buffers);\n          } catch (error) {\n            console.error(error);\n            self.postMessage({\n              type: 'error',\n              id: message.id,\n              error: error.message\n            });\n          }\n        });\n        break;\n    }\n  });\n  function init(wasmBinary) {\n    transcoderPending = new Promise(resolve => {\n      BasisModule = {\n        wasmBinary,\n        onRuntimeInitialized: resolve\n      };\n      BASIS(BasisModule); // eslint-disable-line no-undef\n    }).then(() => {\n      BasisModule.initializeBasis();\n      if (BasisModule.KTX2File === undefined) {\n        console.warn('THREE.KTX2Loader: Please update Basis Universal transcoder.');\n      }\n    });\n  }\n  function transcode(buffer) {\n    const ktx2File = new BasisModule.KTX2File(new Uint8Array(buffer));\n    function cleanup() {\n      ktx2File.close();\n      ktx2File.delete();\n    }\n    if (!ktx2File.isValid()) {\n      cleanup();\n      throw new Error('THREE.KTX2Loader:\tInvalid or unsupported .ktx2 file');\n    }\n    const basisFormat = ktx2File.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S;\n    const width = ktx2File.getWidth();\n    const height = ktx2File.getHeight();\n    const layerCount = ktx2File.getLayers() || 1;\n    const levelCount = ktx2File.getLevels();\n    const faceCount = ktx2File.getFaces();\n    const hasAlpha = ktx2File.getHasAlpha();\n    const dfdTransferFn = ktx2File.getDFDTransferFunc();\n    const dfdFlags = ktx2File.getDFDFlags();\n    const {\n      transcoderFormat,\n      engineFormat\n    } = getTranscoderFormat(basisFormat, width, height, hasAlpha);\n    if (!width || !height || !levelCount) {\n      cleanup();\n      throw new Error('THREE.KTX2Loader:\tInvalid texture');\n    }\n    if (!ktx2File.startTranscoding()) {\n      cleanup();\n      throw new Error('THREE.KTX2Loader: .startTranscoding failed');\n    }\n    const faces = [];\n    const buffers = [];\n    for (let face = 0; face < faceCount; face++) {\n      const mipmaps = [];\n      for (let mip = 0; mip < levelCount; mip++) {\n        const layerMips = [];\n        let mipWidth, mipHeight;\n        for (let layer = 0; layer < layerCount; layer++) {\n          const levelInfo = ktx2File.getImageLevelInfo(mip, layer, face);\n          if (face === 0 && mip === 0 && layer === 0 && (levelInfo.origWidth % 4 !== 0 || levelInfo.origHeight % 4 !== 0)) {\n            console.warn('THREE.KTX2Loader: ETC1S and UASTC textures should use multiple-of-four dimensions.');\n          }\n          if (levelCount > 1) {\n            mipWidth = levelInfo.origWidth;\n            mipHeight = levelInfo.origHeight;\n          } else {\n            // Handles non-multiple-of-four dimensions in textures without mipmaps. Textures with\n            // mipmaps must use multiple-of-four dimensions, for some texture formats and APIs.\n            // See mrdoob/three.js#25908.\n            mipWidth = levelInfo.width;\n            mipHeight = levelInfo.height;\n          }\n          const dst = new Uint8Array(ktx2File.getImageTranscodedSizeInBytes(mip, layer, 0, transcoderFormat));\n          const status = ktx2File.transcodeImage(dst, mip, layer, face, transcoderFormat, 0, -1, -1);\n          if (!status) {\n            cleanup();\n            throw new Error('THREE.KTX2Loader: .transcodeImage failed.');\n          }\n          layerMips.push(dst);\n        }\n        const mipData = concat(layerMips);\n        mipmaps.push({\n          data: mipData,\n          width: mipWidth,\n          height: mipHeight\n        });\n        buffers.push(mipData.buffer);\n      }\n      faces.push({\n        mipmaps,\n        width,\n        height,\n        format: engineFormat\n      });\n    }\n    cleanup();\n    return {\n      faces,\n      buffers,\n      width,\n      height,\n      hasAlpha,\n      format: engineFormat,\n      dfdTransferFn,\n      dfdFlags\n    };\n  }\n\n  //\n\n  // Optimal choice of a transcoder target format depends on the Basis format (ETC1S or UASTC),\n  // device capabilities, and texture dimensions. The list below ranks the formats separately\n  // for ETC1S and UASTC.\n  //\n  // In some cases, transcoding UASTC to RGBA32 might be preferred for higher quality (at\n  // significant memory cost) compared to ETC1/2, BC1/3, and PVRTC. The transcoder currently\n  // chooses RGBA32 only as a last resort and does not expose that option to the caller.\n  const FORMAT_OPTIONS = [{\n    if: 'astcSupported',\n    basisFormat: [BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4],\n    engineFormat: [EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format],\n    priorityETC1S: Infinity,\n    priorityUASTC: 1,\n    needsPowerOfTwo: false\n  }, {\n    if: 'bptcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5],\n    engineFormat: [EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format],\n    priorityETC1S: 3,\n    priorityUASTC: 2,\n    needsPowerOfTwo: false\n  }, {\n    if: 'dxtSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC1, TranscoderFormat.BC3],\n    engineFormat: [EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format],\n    priorityETC1S: 4,\n    priorityUASTC: 5,\n    needsPowerOfTwo: false\n  }, {\n    if: 'etc2Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC2],\n    engineFormat: [EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format],\n    priorityETC1S: 1,\n    priorityUASTC: 3,\n    needsPowerOfTwo: false\n  }, {\n    if: 'etc1Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1],\n    engineFormat: [EngineFormat.RGB_ETC1_Format],\n    priorityETC1S: 2,\n    priorityUASTC: 4,\n    needsPowerOfTwo: false\n  }, {\n    if: 'pvrtcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA],\n    engineFormat: [EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format],\n    priorityETC1S: 5,\n    priorityUASTC: 6,\n    needsPowerOfTwo: true\n  }];\n  const ETC1S_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityETC1S - b.priorityETC1S;\n  });\n  const UASTC_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityUASTC - b.priorityUASTC;\n  });\n  function getTranscoderFormat(basisFormat, width, height, hasAlpha) {\n    let transcoderFormat;\n    let engineFormat;\n    const options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS;\n    for (let i = 0; i < options.length; i++) {\n      const opt = options[i];\n      if (!config[opt.if]) continue;\n      if (!opt.basisFormat.includes(basisFormat)) continue;\n      if (hasAlpha && opt.transcoderFormat.length < 2) continue;\n      if (opt.needsPowerOfTwo && !(isPowerOfTwo(width) && isPowerOfTwo(height))) continue;\n      transcoderFormat = opt.transcoderFormat[hasAlpha ? 1 : 0];\n      engineFormat = opt.engineFormat[hasAlpha ? 1 : 0];\n      return {\n        transcoderFormat,\n        engineFormat\n      };\n    }\n    console.warn('THREE.KTX2Loader: No suitable compressed texture format found. Decoding to RGBA32.');\n    transcoderFormat = TranscoderFormat.RGBA32;\n    engineFormat = EngineFormat.RGBAFormat;\n    return {\n      transcoderFormat,\n      engineFormat\n    };\n  }\n  function isPowerOfTwo(value) {\n    if (value <= 2) return true;\n    return (value & value - 1) === 0 && value !== 0;\n  }\n\n  /** Concatenates N byte arrays. */\n  function concat(arrays) {\n    if (arrays.length === 1) return arrays[0];\n    let totalByteLength = 0;\n    for (let i = 0; i < arrays.length; i++) {\n      const array = arrays[i];\n      totalByteLength += array.byteLength;\n    }\n    const result = new Uint8Array(totalByteLength);\n    let byteOffset = 0;\n    for (let i = 0; i < arrays.length; i++) {\n      const array = arrays[i];\n      result.set(array, byteOffset);\n      byteOffset += array.byteLength;\n    }\n    return result;\n  }\n};\n\n//\n// DataTexture and Data3DTexture parsing.\n\nconst FORMAT_MAP = {\n  [VK_FORMAT_R32G32B32A32_SFLOAT]: RGBAFormat,\n  [VK_FORMAT_R16G16B16A16_SFLOAT]: RGBAFormat,\n  [VK_FORMAT_R8G8B8A8_UNORM]: RGBAFormat,\n  [VK_FORMAT_R8G8B8A8_SRGB]: RGBAFormat,\n  [VK_FORMAT_R32G32_SFLOAT]: RGFormat,\n  [VK_FORMAT_R16G16_SFLOAT]: RGFormat,\n  [VK_FORMAT_R8G8_UNORM]: RGFormat,\n  [VK_FORMAT_R8G8_SRGB]: RGFormat,\n  [VK_FORMAT_R32_SFLOAT]: RedFormat,\n  [VK_FORMAT_R16_SFLOAT]: RedFormat,\n  [VK_FORMAT_R8_SRGB]: RedFormat,\n  [VK_FORMAT_R8_UNORM]: RedFormat\n};\nconst TYPE_MAP = {\n  [VK_FORMAT_R32G32B32A32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16G16B16A16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8G8B8A8_UNORM]: UnsignedByteType,\n  [VK_FORMAT_R8G8B8A8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R32G32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16G16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8G8_UNORM]: UnsignedByteType,\n  [VK_FORMAT_R8G8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R8_UNORM]: UnsignedByteType\n};\nconst COLOR_SPACE_MAP = {\n  [VK_FORMAT_R8G8B8A8_SRGB]: SRGBColorSpace,\n  [VK_FORMAT_R8G8_SRGB]: SRGBColorSpace,\n  [VK_FORMAT_R8_SRGB]: SRGBColorSpace\n};\nfunction createDataTexture(_x) {\n  return _createDataTexture.apply(this, arguments);\n}\nfunction _createDataTexture() {\n  _createDataTexture = _asyncToGenerator(function* (container, levelIndex = 0) {\n    const {\n      vkFormat\n    } = container;\n    const pixelWidth = Math.max(1, container.pixelWidth >> levelIndex);\n    const pixelHeight = Math.max(1, container.pixelHeight >> levelIndex);\n    const pixelDepth = Math.max(1, container.pixelDepth >> levelIndex);\n    if (FORMAT_MAP[vkFormat] === undefined) {\n      throw new Error('THREE.KTX2Loader: Unsupported vkFormat.');\n    }\n    const level = container.levels[levelIndex];\n    let levelData;\n    let view;\n    if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_NONE) {\n      levelData = level.levelData;\n    } else if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_ZSTD) {\n      if (!_zstd) {\n        _zstd = new Promise( /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (resolve) {\n            const zstd = new ZSTDDecoder();\n            yield zstd.init();\n            resolve(zstd);\n          });\n          return function (_x2) {\n            return _ref.apply(this, arguments);\n          };\n        }());\n      }\n      levelData = (yield _zstd).decode(level.levelData, level.uncompressedByteLength);\n    } else {\n      throw new Error('THREE.KTX2Loader: Unsupported supercompressionScheme.');\n    }\n    if (TYPE_MAP[vkFormat] === FloatType) {\n      view = new Float32Array(levelData.buffer, levelData.byteOffset, levelData.byteLength / Float32Array.BYTES_PER_ELEMENT);\n    } else if (TYPE_MAP[vkFormat] === HalfFloatType) {\n      view = new Uint16Array(levelData.buffer, levelData.byteOffset, levelData.byteLength / Uint16Array.BYTES_PER_ELEMENT);\n    } else {\n      view = levelData;\n    }\n    //\n\n    const texture = pixelDepth === 0 ? new DataTexture(view, pixelWidth, pixelHeight) : new Data3DTexture(view, pixelWidth, pixelHeight, pixelDepth);\n    texture.type = TYPE_MAP[vkFormat];\n    texture.format = FORMAT_MAP[vkFormat];\n    texture.colorSpace = COLOR_SPACE_MAP[vkFormat] || NoColorSpace;\n    texture.needsUpdate = true;\n\n    //\n\n    return Promise.resolve(texture);\n  });\n  return _createDataTexture.apply(this, arguments);\n}\nexport { KTX2Loader };","map":{"version":3,"names":["CompressedTexture","CompressedArrayTexture","Data3DTexture","DataTexture","FileLoader","FloatType","HalfFloatType","NoColorSpace","LinearFilter","LinearMipmapLinearFilter","Loader","RedFormat","RGB_ETC1_Format","RGB_ETC2_Format","RGB_PVRTC_4BPPV1_Format","RGB_S3TC_DXT1_Format","RGBA_ASTC_4x4_Format","RGBA_BPTC_Format","RGBA_ETC2_EAC_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_S3TC_DXT5_Format","RGBAFormat","RGFormat","SRGBColorSpace","UnsignedByteType","WorkerPool","read","KHR_DF_FLAG_ALPHA_PREMULTIPLIED","KHR_DF_TRANSFER_SRGB","KHR_SUPERCOMPRESSION_NONE","KHR_SUPERCOMPRESSION_ZSTD","VK_FORMAT_UNDEFINED","VK_FORMAT_R16_SFLOAT","VK_FORMAT_R16G16_SFLOAT","VK_FORMAT_R16G16B16A16_SFLOAT","VK_FORMAT_R32_SFLOAT","VK_FORMAT_R32G32_SFLOAT","VK_FORMAT_R32G32B32A32_SFLOAT","VK_FORMAT_R8_SRGB","VK_FORMAT_R8_UNORM","VK_FORMAT_R8G8_SRGB","VK_FORMAT_R8G8_UNORM","VK_FORMAT_R8G8B8A8_SRGB","VK_FORMAT_R8G8B8A8_UNORM","ZSTDDecoder","_taskCache","WeakMap","_activeLoaders","_zstd","KTX2Loader","constructor","manager","transcoderPath","transcoderBinary","transcoderPending","workerPool","workerSourceURL","workerConfig","MSC_TRANSCODER","console","warn","setTranscoderPath","path","setWorkerLimit","num","detectSupport","renderer","isWebGPURenderer","astcSupported","hasFeature","etc1Supported","etc2Supported","dxtSupported","bptcSupported","pvrtcSupported","extensions","has","capabilities","isWebGL2","init","jsLoader","setPath","setWithCredentials","withCredentials","jsContent","loadAsync","binaryLoader","setResponseType","binaryContent","Promise","all","then","fn","BasisWorker","toString","body","JSON","stringify","EngineFormat","TranscoderFormat","BasisFormat","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","setWorkerCreator","worker","Worker","slice","postMessage","type","config","load","url","onLoad","onProgress","onError","Error","loader","buffer","cachedTask","get","promise","catch","_createTexture","texture","_createTextureFrom","transcodeResult","container","faces","width","height","format","error","dfdTransferFn","dfdFlags","reject","faceCount","image","mipmaps","layerCount","minFilter","length","magFilter","generateMipmaps","needsUpdate","colorSpace","premultiplyAlpha","_this","_asyncToGenerator","Uint8Array","vkFormat","pendings","levelIndex","levels","push","createDataTexture","dataTexture","map","dt","data","source","depth","taskConfig","texturePending","e","set","dispose","revokeObjectURL","ETC1S","UASTC_4x4","ETC1","ETC2","BC1","BC3","BC4","BC5","BC7_M6_OPAQUE_ONLY","BC7_M5","PVRTC1_4_RGB","PVRTC1_4_RGBA","ASTC_4x4","ATC_RGB","ATC_RGBA_INTERPOLATED_ALPHA","RGBA32","RGB565","BGR565","RGBA4444","BasisModule","_EngineFormat","_TranscoderFormat","_BasisFormat","self","addEventListener","message","buffers","hasAlpha","transcode","id","wasmBinary","resolve","onRuntimeInitialized","BASIS","initializeBasis","KTX2File","undefined","ktx2File","cleanup","close","delete","isValid","basisFormat","isUASTC","getWidth","getHeight","getLayers","levelCount","getLevels","getFaces","getHasAlpha","getDFDTransferFunc","getDFDFlags","transcoderFormat","engineFormat","getTranscoderFormat","startTranscoding","face","mip","layerMips","mipWidth","mipHeight","layer","levelInfo","getImageLevelInfo","origWidth","origHeight","dst","getImageTranscodedSizeInBytes","status","transcodeImage","mipData","concat","FORMAT_OPTIONS","if","priorityETC1S","Infinity","priorityUASTC","needsPowerOfTwo","ETC1S_OPTIONS","sort","a","b","UASTC_OPTIONS","options","i","opt","includes","isPowerOfTwo","value","arrays","totalByteLength","array","byteLength","result","byteOffset","FORMAT_MAP","TYPE_MAP","COLOR_SPACE_MAP","_x","_createDataTexture","apply","arguments","pixelWidth","Math","max","pixelHeight","pixelDepth","level","levelData","view","supercompressionScheme","_ref","zstd","_x2","decode","uncompressedByteLength","Float32Array","BYTES_PER_ELEMENT","Uint16Array"],"sources":["C:/Users/bozok/Desktop/AngularProject/gnrrc2/node_modules/three/examples/jsm/loaders/KTX2Loader.js"],"sourcesContent":["/**\n * Loader for KTX 2.0 GPU Texture containers.\n *\n * KTX 2.0 is a container format for various GPU texture formats. The loader\n * supports Basis Universal GPU textures, which can be quickly transcoded to\n * a wide variety of GPU texture compression formats, as well as some\n * uncompressed DataTexture and Data3DTexture formats.\n *\n * References:\n * - KTX: http://github.khronos.org/KTX-Specification/\n * - DFD: https://www.khronos.org/registry/DataFormat/specs/1.3/dataformat.1.3.html#basicdescriptor\n */\n\nimport {\n\tCompressedTexture,\n\tCompressedArrayTexture,\n\tData3DTexture,\n\tDataTexture,\n\tFileLoader,\n\tFloatType,\n\tHalfFloatType,\n\tNoColorSpace,\n\tLinearFilter,\n\tLinearMipmapLinearFilter,\n\tLoader,\n\tRedFormat,\n\tRGB_ETC1_Format,\n\tRGB_ETC2_Format,\n\tRGB_PVRTC_4BPPV1_Format,\n\tRGB_S3TC_DXT1_Format,\n\tRGBA_ASTC_4x4_Format,\n\tRGBA_BPTC_Format,\n\tRGBA_ETC2_EAC_Format,\n\tRGBA_PVRTC_4BPPV1_Format,\n\tRGBA_S3TC_DXT5_Format,\n\tRGBAFormat,\n\tRGFormat,\n\tSRGBColorSpace,\n\tUnsignedByteType,\n} from 'three';\nimport { WorkerPool } from '../utils/WorkerPool.js';\nimport {\n\tread,\n\tKHR_DF_FLAG_ALPHA_PREMULTIPLIED,\n\tKHR_DF_TRANSFER_SRGB,\n\tKHR_SUPERCOMPRESSION_NONE,\n\tKHR_SUPERCOMPRESSION_ZSTD,\n\tVK_FORMAT_UNDEFINED,\n\tVK_FORMAT_R16_SFLOAT,\n\tVK_FORMAT_R16G16_SFLOAT,\n\tVK_FORMAT_R16G16B16A16_SFLOAT,\n\tVK_FORMAT_R32_SFLOAT,\n\tVK_FORMAT_R32G32_SFLOAT,\n\tVK_FORMAT_R32G32B32A32_SFLOAT,\n\tVK_FORMAT_R8_SRGB,\n\tVK_FORMAT_R8_UNORM,\n\tVK_FORMAT_R8G8_SRGB,\n\tVK_FORMAT_R8G8_UNORM,\n\tVK_FORMAT_R8G8B8A8_SRGB,\n\tVK_FORMAT_R8G8B8A8_UNORM,\n} from '../libs/ktx-parse.module.js';\nimport { ZSTDDecoder } from '../libs/zstddec.module.js';\n\nconst _taskCache = new WeakMap();\n\nlet _activeLoaders = 0;\n\nlet _zstd;\n\nclass KTX2Loader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tthis.transcoderPath = '';\n\t\tthis.transcoderBinary = null;\n\t\tthis.transcoderPending = null;\n\n\t\tthis.workerPool = new WorkerPool();\n\t\tthis.workerSourceURL = '';\n\t\tthis.workerConfig = null;\n\n\t\tif ( typeof MSC_TRANSCODER !== 'undefined' ) {\n\n\t\t\tconsole.warn(\n\n\t\t\t\t'THREE.KTX2Loader: Please update to latest \"basis_transcoder\".'\n\t\t\t\t+ ' \"msc_basis_transcoder\" is no longer supported in three.js r125+.'\n\n\t\t\t);\n\n\t\t}\n\n\t}\n\n\tsetTranscoderPath( path ) {\n\n\t\tthis.transcoderPath = path;\n\n\t\treturn this;\n\n\t}\n\n\tsetWorkerLimit( num ) {\n\n\t\tthis.workerPool.setWorkerLimit( num );\n\n\t\treturn this;\n\n\t}\n\n\tdetectSupport( renderer ) {\n\n\t\tif ( renderer.isWebGPURenderer === true ) {\n\n\t\t\tthis.workerConfig = {\n\t\t\t\tastcSupported: renderer.hasFeature( 'texture-compression-astc' ),\n\t\t\t\tetc1Supported: false,\n\t\t\t\tetc2Supported: renderer.hasFeature( 'texture-compression-etc2' ),\n\t\t\t\tdxtSupported: renderer.hasFeature( 'texture-compression-bc' ),\n\t\t\t\tbptcSupported: false,\n\t\t\t\tpvrtcSupported: false\n\t\t\t};\n\n\t\t} else {\n\n\t\t\tthis.workerConfig = {\n\t\t\t\tastcSupported: renderer.extensions.has( 'WEBGL_compressed_texture_astc' ),\n\t\t\t\tetc1Supported: renderer.extensions.has( 'WEBGL_compressed_texture_etc1' ),\n\t\t\t\tetc2Supported: renderer.extensions.has( 'WEBGL_compressed_texture_etc' ),\n\t\t\t\tdxtSupported: renderer.extensions.has( 'WEBGL_compressed_texture_s3tc' ),\n\t\t\t\tbptcSupported: renderer.extensions.has( 'EXT_texture_compression_bptc' ),\n\t\t\t\tpvrtcSupported: renderer.extensions.has( 'WEBGL_compressed_texture_pvrtc' )\n\t\t\t\t\t|| renderer.extensions.has( 'WEBKIT_WEBGL_compressed_texture_pvrtc' )\n\t\t\t};\n\n\t\t\tif ( renderer.capabilities.isWebGL2 ) {\n\n\t\t\t\t// https://github.com/mrdoob/three.js/pull/22928\n\t\t\t\tthis.workerConfig.etc1Supported = false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tinit() {\n\n\t\tif ( ! this.transcoderPending ) {\n\n\t\t\t// Load transcoder wrapper.\n\t\t\tconst jsLoader = new FileLoader( this.manager );\n\t\t\tjsLoader.setPath( this.transcoderPath );\n\t\t\tjsLoader.setWithCredentials( this.withCredentials );\n\t\t\tconst jsContent = jsLoader.loadAsync( 'basis_transcoder.js' );\n\n\t\t\t// Load transcoder WASM binary.\n\t\t\tconst binaryLoader = new FileLoader( this.manager );\n\t\t\tbinaryLoader.setPath( this.transcoderPath );\n\t\t\tbinaryLoader.setResponseType( 'arraybuffer' );\n\t\t\tbinaryLoader.setWithCredentials( this.withCredentials );\n\t\t\tconst binaryContent = binaryLoader.loadAsync( 'basis_transcoder.wasm' );\n\n\t\t\tthis.transcoderPending = Promise.all( [ jsContent, binaryContent ] )\n\t\t\t\t.then( ( [ jsContent, binaryContent ] ) => {\n\n\t\t\t\t\tconst fn = KTX2Loader.BasisWorker.toString();\n\n\t\t\t\t\tconst body = [\n\t\t\t\t\t\t'/* constants */',\n\t\t\t\t\t\t'let _EngineFormat = ' + JSON.stringify( KTX2Loader.EngineFormat ),\n\t\t\t\t\t\t'let _TranscoderFormat = ' + JSON.stringify( KTX2Loader.TranscoderFormat ),\n\t\t\t\t\t\t'let _BasisFormat = ' + JSON.stringify( KTX2Loader.BasisFormat ),\n\t\t\t\t\t\t'/* basis_transcoder.js */',\n\t\t\t\t\t\tjsContent,\n\t\t\t\t\t\t'/* worker */',\n\t\t\t\t\t\tfn.substring( fn.indexOf( '{' ) + 1, fn.lastIndexOf( '}' ) )\n\t\t\t\t\t].join( '\\n' );\n\n\t\t\t\t\tthis.workerSourceURL = URL.createObjectURL( new Blob( [ body ] ) );\n\t\t\t\t\tthis.transcoderBinary = binaryContent;\n\n\t\t\t\t\tthis.workerPool.setWorkerCreator( () => {\n\n\t\t\t\t\t\tconst worker = new Worker( this.workerSourceURL );\n\t\t\t\t\t\tconst transcoderBinary = this.transcoderBinary.slice( 0 );\n\n\t\t\t\t\t\tworker.postMessage( { type: 'init', config: this.workerConfig, transcoderBinary }, [ transcoderBinary ] );\n\n\t\t\t\t\t\treturn worker;\n\n\t\t\t\t\t} );\n\n\t\t\t\t} );\n\n\t\t\tif ( _activeLoaders > 0 ) {\n\n\t\t\t\t// Each instance loads a transcoder and allocates workers, increasing network and memory cost.\n\n\t\t\t\tconsole.warn(\n\n\t\t\t\t\t'THREE.KTX2Loader: Multiple active KTX2 loaders may cause performance issues.'\n\t\t\t\t\t+ ' Use a single KTX2Loader instance, or call .dispose() on old instances.'\n\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\t_activeLoaders ++;\n\n\t\t}\n\n\t\treturn this.transcoderPending;\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tif ( this.workerConfig === null ) {\n\n\t\t\tthrow new Error( 'THREE.KTX2Loader: Missing initialization with `.detectSupport( renderer )`.' );\n\n\t\t}\n\n\t\tconst loader = new FileLoader( this.manager );\n\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setWithCredentials( this.withCredentials );\n\n\t\tloader.load( url, ( buffer ) => {\n\n\t\t\t// Check for an existing task using this buffer. A transferred buffer cannot be transferred\n\t\t\t// again from this thread.\n\t\t\tif ( _taskCache.has( buffer ) ) {\n\n\t\t\t\tconst cachedTask = _taskCache.get( buffer );\n\n\t\t\t\treturn cachedTask.promise.then( onLoad ).catch( onError );\n\n\t\t\t}\n\n\t\t\tthis._createTexture( buffer )\n\t\t\t\t.then( ( texture ) => onLoad ? onLoad( texture ) : null )\n\t\t\t\t.catch( onError );\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\t_createTextureFrom( transcodeResult, container ) {\n\n\t\tconst { faces, width, height, format, type, error, dfdTransferFn, dfdFlags } = transcodeResult;\n\n\t\tif ( type === 'error' ) return Promise.reject( error );\n\n\t\tlet texture;\n\n\t\tif ( container.faceCount === 6 ) {\n\n\t\t\ttexture = new CompressedTexture();\n\t\t\ttexture.image = faces;\n\t\t\ttexture.format = format;\n\t\t\ttexture.type = UnsignedByteType;\n\n\t\t} else {\n\n\t\t\tconst mipmaps = faces[ 0 ].mipmaps;\n\n\t\t\ttexture = container.layerCount > 1\n\t\t\t\t? new CompressedArrayTexture( mipmaps, width, height, container.layerCount, format, UnsignedByteType )\n\t\t\t\t: new CompressedTexture( mipmaps, width, height, format, UnsignedByteType );\n\n\t\t}\n\n\t\ttexture.minFilter = faces[ 0 ].mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n\t\ttexture.magFilter = LinearFilter;\n\t\ttexture.generateMipmaps = false;\n\n\t\ttexture.needsUpdate = true;\n\t\t// TODO: Detect NoColorSpace vs. LinearSRGBColorSpace based on primaries.\n\t\ttexture.colorSpace = dfdTransferFn === KHR_DF_TRANSFER_SRGB ? SRGBColorSpace : NoColorSpace;\n\t\ttexture.premultiplyAlpha = !! ( dfdFlags & KHR_DF_FLAG_ALPHA_PREMULTIPLIED );\n\n\t\treturn texture;\n\n\t}\n\n\t/**\n\t * @param {ArrayBuffer} buffer\n\t * @param {object?} config\n\t * @return {Promise<CompressedTexture|CompressedArrayTexture|DataTexture|Data3DTexture>}\n\t */\n\tasync _createTexture( buffer, config = {} ) {\n\n\t\tconst container = read( new Uint8Array( buffer ) );\n\n\t\tif ( container.vkFormat !== VK_FORMAT_UNDEFINED ) {\n\n\t\t\tconst mipmaps = [];\n\t\t\tconst pendings = [];\n\n\t\t\tfor ( let levelIndex = 0; levelIndex < container.levels.length; levelIndex ++ ) {\n\n\t\t\t\tpendings.push( createDataTexture( container, levelIndex ).then( function ( dataTexture ) {\n\n\t\t\t\t\tmipmaps[ levelIndex ] = dataTexture;\n\n\t\t\t\t} ) );\n\n\t\t\t}\n\n\t\t\tawait Promise.all( pendings );\n\n\t\t\tconst texture = mipmaps[ 0 ];\n\t\t\ttexture.mipmaps = mipmaps.map( dt => {\n\t\t\t\treturn {\n\t\t\t\t\tdata: dt.source.data,\n\t\t\t\t\twidth: dt.source.data.width,\n\t\t\t\t\theight: dt.source.data.height,\n\t\t\t\t\tdepth: dt.source.data.depth\n\t\t\t\t};\n\t\t\t} );\n\t\t\treturn texture;\n\n\t\t}\n\n\t\t//\n\t\tconst taskConfig = config;\n\t\tconst texturePending = this.init().then( () => {\n\n\t\t\treturn this.workerPool.postMessage( { type: 'transcode', buffer, taskConfig: taskConfig }, [ buffer ] );\n\n\t\t} ).then( ( e ) => this._createTextureFrom( e.data, container ) );\n\n\t\t// Cache the task result.\n\t\t_taskCache.set( buffer, { promise: texturePending } );\n\n\t\treturn texturePending;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.workerPool.dispose();\n\t\tif ( this.workerSourceURL ) URL.revokeObjectURL( this.workerSourceURL );\n\n\t\t_activeLoaders --;\n\n\t\treturn this;\n\n\t}\n\n}\n\n\n/* CONSTANTS */\n\nKTX2Loader.BasisFormat = {\n\tETC1S: 0,\n\tUASTC_4x4: 1,\n};\n\nKTX2Loader.TranscoderFormat = {\n\tETC1: 0,\n\tETC2: 1,\n\tBC1: 2,\n\tBC3: 3,\n\tBC4: 4,\n\tBC5: 5,\n\tBC7_M6_OPAQUE_ONLY: 6,\n\tBC7_M5: 7,\n\tPVRTC1_4_RGB: 8,\n\tPVRTC1_4_RGBA: 9,\n\tASTC_4x4: 10,\n\tATC_RGB: 11,\n\tATC_RGBA_INTERPOLATED_ALPHA: 12,\n\tRGBA32: 13,\n\tRGB565: 14,\n\tBGR565: 15,\n\tRGBA4444: 16,\n};\n\nKTX2Loader.EngineFormat = {\n\tRGBAFormat: RGBAFormat,\n\tRGBA_ASTC_4x4_Format: RGBA_ASTC_4x4_Format,\n\tRGBA_BPTC_Format: RGBA_BPTC_Format,\n\tRGBA_ETC2_EAC_Format: RGBA_ETC2_EAC_Format,\n\tRGBA_PVRTC_4BPPV1_Format: RGBA_PVRTC_4BPPV1_Format,\n\tRGBA_S3TC_DXT5_Format: RGBA_S3TC_DXT5_Format,\n\tRGB_ETC1_Format: RGB_ETC1_Format,\n\tRGB_ETC2_Format: RGB_ETC2_Format,\n\tRGB_PVRTC_4BPPV1_Format: RGB_PVRTC_4BPPV1_Format,\n\tRGB_S3TC_DXT1_Format: RGB_S3TC_DXT1_Format,\n};\n\n\n/* WEB WORKER */\n\nKTX2Loader.BasisWorker = function () {\n\n\tlet config;\n\tlet transcoderPending;\n\tlet BasisModule;\n\n\tconst EngineFormat = _EngineFormat; // eslint-disable-line no-undef\n\tconst TranscoderFormat = _TranscoderFormat; // eslint-disable-line no-undef\n\tconst BasisFormat = _BasisFormat; // eslint-disable-line no-undef\n\n\tself.addEventListener( 'message', function ( e ) {\n\n\t\tconst message = e.data;\n\n\t\tswitch ( message.type ) {\n\n\t\t\tcase 'init':\n\t\t\t\tconfig = message.config;\n\t\t\t\tinit( message.transcoderBinary );\n\t\t\t\tbreak;\n\n\t\t\tcase 'transcode':\n\t\t\t\ttranscoderPending.then( () => {\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tconst { faces, buffers, width, height, hasAlpha, format, dfdTransferFn, dfdFlags } = transcode( message.buffer );\n\n\t\t\t\t\t\tself.postMessage( { type: 'transcode', id: message.id, faces, width, height, hasAlpha, format, dfdTransferFn, dfdFlags }, buffers );\n\n\t\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t\tconsole.error( error );\n\n\t\t\t\t\t\tself.postMessage( { type: 'error', id: message.id, error: error.message } );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t} );\n\n\tfunction init( wasmBinary ) {\n\n\t\ttranscoderPending = new Promise( ( resolve ) => {\n\n\t\t\tBasisModule = { wasmBinary, onRuntimeInitialized: resolve };\n\t\t\tBASIS( BasisModule ); // eslint-disable-line no-undef\n\n\t\t} ).then( () => {\n\n\t\t\tBasisModule.initializeBasis();\n\n\t\t\tif ( BasisModule.KTX2File === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.KTX2Loader: Please update Basis Universal transcoder.' );\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\tfunction transcode( buffer ) {\n\n\t\tconst ktx2File = new BasisModule.KTX2File( new Uint8Array( buffer ) );\n\n\t\tfunction cleanup() {\n\n\t\t\tktx2File.close();\n\t\t\tktx2File.delete();\n\n\t\t}\n\n\t\tif ( ! ktx2File.isValid() ) {\n\n\t\t\tcleanup();\n\t\t\tthrow new Error( 'THREE.KTX2Loader:\tInvalid or unsupported .ktx2 file' );\n\n\t\t}\n\n\t\tconst basisFormat = ktx2File.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S;\n\t\tconst width = ktx2File.getWidth();\n\t\tconst height = ktx2File.getHeight();\n\t\tconst layerCount = ktx2File.getLayers() || 1;\n\t\tconst levelCount = ktx2File.getLevels();\n\t\tconst faceCount = ktx2File.getFaces();\n\t\tconst hasAlpha = ktx2File.getHasAlpha();\n\t\tconst dfdTransferFn = ktx2File.getDFDTransferFunc();\n\t\tconst dfdFlags = ktx2File.getDFDFlags();\n\n\t\tconst { transcoderFormat, engineFormat } = getTranscoderFormat( basisFormat, width, height, hasAlpha );\n\n\t\tif ( ! width || ! height || ! levelCount ) {\n\n\t\t\tcleanup();\n\t\t\tthrow new Error( 'THREE.KTX2Loader:\tInvalid texture' );\n\n\t\t}\n\n\t\tif ( ! ktx2File.startTranscoding() ) {\n\n\t\t\tcleanup();\n\t\t\tthrow new Error( 'THREE.KTX2Loader: .startTranscoding failed' );\n\n\t\t}\n\n\t\tconst faces = [];\n\t\tconst buffers = [];\n\n\t\tfor ( let face = 0; face < faceCount; face ++ ) {\n\n\t\t\tconst mipmaps = [];\n\n\t\t\tfor ( let mip = 0; mip < levelCount; mip ++ ) {\n\n\t\t\t\tconst layerMips = [];\n\n\t\t\t\tlet mipWidth, mipHeight;\n\n\t\t\t\tfor ( let layer = 0; layer < layerCount; layer ++ ) {\n\n\t\t\t\t\tconst levelInfo = ktx2File.getImageLevelInfo( mip, layer, face );\n\n\t\t\t\t\tif ( face === 0 && mip === 0 && layer === 0 && ( levelInfo.origWidth % 4 !== 0 || levelInfo.origHeight % 4 !== 0 ) ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.KTX2Loader: ETC1S and UASTC textures should use multiple-of-four dimensions.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( levelCount > 1 ) {\n\n\t\t\t\t\t\tmipWidth = levelInfo.origWidth;\n\t\t\t\t\t\tmipHeight = levelInfo.origHeight;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Handles non-multiple-of-four dimensions in textures without mipmaps. Textures with\n\t\t\t\t\t\t// mipmaps must use multiple-of-four dimensions, for some texture formats and APIs.\n\t\t\t\t\t\t// See mrdoob/three.js#25908.\n\t\t\t\t\t\tmipWidth = levelInfo.width;\n\t\t\t\t\t\tmipHeight = levelInfo.height;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst dst = new Uint8Array( ktx2File.getImageTranscodedSizeInBytes( mip, layer, 0, transcoderFormat ) );\n\t\t\t\t\tconst status = ktx2File.transcodeImage( dst, mip, layer, face, transcoderFormat, 0, - 1, - 1 );\n\n\t\t\t\t\tif ( ! status ) {\n\n\t\t\t\t\t\tcleanup();\n\t\t\t\t\t\tthrow new Error( 'THREE.KTX2Loader: .transcodeImage failed.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlayerMips.push( dst );\n\n\t\t\t\t}\n\n\t\t\t\tconst mipData = concat( layerMips );\n\n\t\t\t\tmipmaps.push( { data: mipData, width: mipWidth, height: mipHeight } );\n\t\t\t\tbuffers.push( mipData.buffer );\n\n\t\t\t}\n\n\t\t\tfaces.push( { mipmaps, width, height, format: engineFormat } );\n\n\t\t}\n\n\t\tcleanup();\n\n\t\treturn { faces, buffers, width, height, hasAlpha, format: engineFormat, dfdTransferFn, dfdFlags };\n\n\t}\n\n\t//\n\n\t// Optimal choice of a transcoder target format depends on the Basis format (ETC1S or UASTC),\n\t// device capabilities, and texture dimensions. The list below ranks the formats separately\n\t// for ETC1S and UASTC.\n\t//\n\t// In some cases, transcoding UASTC to RGBA32 might be preferred for higher quality (at\n\t// significant memory cost) compared to ETC1/2, BC1/3, and PVRTC. The transcoder currently\n\t// chooses RGBA32 only as a last resort and does not expose that option to the caller.\n\tconst FORMAT_OPTIONS = [\n\t\t{\n\t\t\tif: 'astcSupported',\n\t\t\tbasisFormat: [ BasisFormat.UASTC_4x4 ],\n\t\t\ttranscoderFormat: [ TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4 ],\n\t\t\tengineFormat: [ EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format ],\n\t\t\tpriorityETC1S: Infinity,\n\t\t\tpriorityUASTC: 1,\n\t\t\tneedsPowerOfTwo: false,\n\t\t},\n\t\t{\n\t\t\tif: 'bptcSupported',\n\t\t\tbasisFormat: [ BasisFormat.ETC1S, BasisFormat.UASTC_4x4 ],\n\t\t\ttranscoderFormat: [ TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5 ],\n\t\t\tengineFormat: [ EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format ],\n\t\t\tpriorityETC1S: 3,\n\t\t\tpriorityUASTC: 2,\n\t\t\tneedsPowerOfTwo: false,\n\t\t},\n\t\t{\n\t\t\tif: 'dxtSupported',\n\t\t\tbasisFormat: [ BasisFormat.ETC1S, BasisFormat.UASTC_4x4 ],\n\t\t\ttranscoderFormat: [ TranscoderFormat.BC1, TranscoderFormat.BC3 ],\n\t\t\tengineFormat: [ EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format ],\n\t\t\tpriorityETC1S: 4,\n\t\t\tpriorityUASTC: 5,\n\t\t\tneedsPowerOfTwo: false,\n\t\t},\n\t\t{\n\t\t\tif: 'etc2Supported',\n\t\t\tbasisFormat: [ BasisFormat.ETC1S, BasisFormat.UASTC_4x4 ],\n\t\t\ttranscoderFormat: [ TranscoderFormat.ETC1, TranscoderFormat.ETC2 ],\n\t\t\tengineFormat: [ EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format ],\n\t\t\tpriorityETC1S: 1,\n\t\t\tpriorityUASTC: 3,\n\t\t\tneedsPowerOfTwo: false,\n\t\t},\n\t\t{\n\t\t\tif: 'etc1Supported',\n\t\t\tbasisFormat: [ BasisFormat.ETC1S, BasisFormat.UASTC_4x4 ],\n\t\t\ttranscoderFormat: [ TranscoderFormat.ETC1 ],\n\t\t\tengineFormat: [ EngineFormat.RGB_ETC1_Format ],\n\t\t\tpriorityETC1S: 2,\n\t\t\tpriorityUASTC: 4,\n\t\t\tneedsPowerOfTwo: false,\n\t\t},\n\t\t{\n\t\t\tif: 'pvrtcSupported',\n\t\t\tbasisFormat: [ BasisFormat.ETC1S, BasisFormat.UASTC_4x4 ],\n\t\t\ttranscoderFormat: [ TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA ],\n\t\t\tengineFormat: [ EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format ],\n\t\t\tpriorityETC1S: 5,\n\t\t\tpriorityUASTC: 6,\n\t\t\tneedsPowerOfTwo: true,\n\t\t},\n\t];\n\n\tconst ETC1S_OPTIONS = FORMAT_OPTIONS.sort( function ( a, b ) {\n\n\t\treturn a.priorityETC1S - b.priorityETC1S;\n\n\t} );\n\tconst UASTC_OPTIONS = FORMAT_OPTIONS.sort( function ( a, b ) {\n\n\t\treturn a.priorityUASTC - b.priorityUASTC;\n\n\t} );\n\n\tfunction getTranscoderFormat( basisFormat, width, height, hasAlpha ) {\n\n\t\tlet transcoderFormat;\n\t\tlet engineFormat;\n\n\t\tconst options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS;\n\n\t\tfor ( let i = 0; i < options.length; i ++ ) {\n\n\t\t\tconst opt = options[ i ];\n\n\t\t\tif ( ! config[ opt.if ] ) continue;\n\t\t\tif ( ! opt.basisFormat.includes( basisFormat ) ) continue;\n\t\t\tif ( hasAlpha && opt.transcoderFormat.length < 2 ) continue;\n\t\t\tif ( opt.needsPowerOfTwo && ! ( isPowerOfTwo( width ) && isPowerOfTwo( height ) ) ) continue;\n\n\t\t\ttranscoderFormat = opt.transcoderFormat[ hasAlpha ? 1 : 0 ];\n\t\t\tengineFormat = opt.engineFormat[ hasAlpha ? 1 : 0 ];\n\n\t\t\treturn { transcoderFormat, engineFormat };\n\n\t\t}\n\n\t\tconsole.warn( 'THREE.KTX2Loader: No suitable compressed texture format found. Decoding to RGBA32.' );\n\n\t\ttranscoderFormat = TranscoderFormat.RGBA32;\n\t\tengineFormat = EngineFormat.RGBAFormat;\n\n\t\treturn { transcoderFormat, engineFormat };\n\n\t}\n\n\tfunction isPowerOfTwo( value ) {\n\n\t\tif ( value <= 2 ) return true;\n\n\t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n\t}\n\n\t/** Concatenates N byte arrays. */\n\tfunction concat( arrays ) {\n\n\t\tif ( arrays.length === 1 ) return arrays[ 0 ];\n\n\t\tlet totalByteLength = 0;\n\n\t\tfor ( let i = 0; i < arrays.length; i ++ ) {\n\n\t\t\tconst array = arrays[ i ];\n\t\t\ttotalByteLength += array.byteLength;\n\n\t\t}\n\n\t\tconst result = new Uint8Array( totalByteLength );\n\n\t\tlet byteOffset = 0;\n\n\t\tfor ( let i = 0; i < arrays.length; i ++ ) {\n\n\t\t\tconst array = arrays[ i ];\n\t\t\tresult.set( array, byteOffset );\n\n\t\t\tbyteOffset += array.byteLength;\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n};\n\n//\n// DataTexture and Data3DTexture parsing.\n\nconst FORMAT_MAP = {\n\n\t[ VK_FORMAT_R32G32B32A32_SFLOAT ]: RGBAFormat,\n\t[ VK_FORMAT_R16G16B16A16_SFLOAT ]: RGBAFormat,\n\t[ VK_FORMAT_R8G8B8A8_UNORM ]: RGBAFormat,\n\t[ VK_FORMAT_R8G8B8A8_SRGB ]: RGBAFormat,\n\n\t[ VK_FORMAT_R32G32_SFLOAT ]: RGFormat,\n\t[ VK_FORMAT_R16G16_SFLOAT ]: RGFormat,\n\t[ VK_FORMAT_R8G8_UNORM ]: RGFormat,\n\t[ VK_FORMAT_R8G8_SRGB ]: RGFormat,\n\n\t[ VK_FORMAT_R32_SFLOAT ]: RedFormat,\n\t[ VK_FORMAT_R16_SFLOAT ]: RedFormat,\n\t[ VK_FORMAT_R8_SRGB ]: RedFormat,\n\t[ VK_FORMAT_R8_UNORM ]: RedFormat,\n\n};\n\nconst TYPE_MAP = {\n\n\t[ VK_FORMAT_R32G32B32A32_SFLOAT ]: FloatType,\n\t[ VK_FORMAT_R16G16B16A16_SFLOAT ]: HalfFloatType,\n\t[ VK_FORMAT_R8G8B8A8_UNORM ]: UnsignedByteType,\n\t[ VK_FORMAT_R8G8B8A8_SRGB ]: UnsignedByteType,\n\n\t[ VK_FORMAT_R32G32_SFLOAT ]: FloatType,\n\t[ VK_FORMAT_R16G16_SFLOAT ]: HalfFloatType,\n\t[ VK_FORMAT_R8G8_UNORM ]: UnsignedByteType,\n\t[ VK_FORMAT_R8G8_SRGB ]: UnsignedByteType,\n\n\t[ VK_FORMAT_R32_SFLOAT ]: FloatType,\n\t[ VK_FORMAT_R16_SFLOAT ]: HalfFloatType,\n\t[ VK_FORMAT_R8_SRGB ]: UnsignedByteType,\n\t[ VK_FORMAT_R8_UNORM ]: UnsignedByteType,\n\n};\n\nconst COLOR_SPACE_MAP = {\n\n\t[ VK_FORMAT_R8G8B8A8_SRGB ]: SRGBColorSpace,\n\t[ VK_FORMAT_R8G8_SRGB ]: SRGBColorSpace,\n\t[ VK_FORMAT_R8_SRGB ]: SRGBColorSpace,\n\n};\n\nasync function createDataTexture( container, levelIndex = 0 ) {\n\n\tconst { vkFormat } = container;\n\tconst pixelWidth = Math.max( 1, container.pixelWidth >> levelIndex );\n\tconst pixelHeight = Math.max( 1, container.pixelHeight >> levelIndex );\n\tconst pixelDepth = Math.max( 1, container.pixelDepth >> levelIndex );\n\n\tif ( FORMAT_MAP[ vkFormat ] === undefined ) {\n\n\t\tthrow new Error( 'THREE.KTX2Loader: Unsupported vkFormat.' );\n\n\t}\n\n\tconst level = container.levels[ levelIndex ];\n\n\tlet levelData;\n\tlet view;\n\n\tif ( container.supercompressionScheme === KHR_SUPERCOMPRESSION_NONE ) {\n\n\t\tlevelData = level.levelData;\n\n\t} else if ( container.supercompressionScheme === KHR_SUPERCOMPRESSION_ZSTD ) {\n\n\t\tif ( ! _zstd ) {\n\n\t\t\t_zstd = new Promise( async ( resolve ) => {\n\n\t\t\t\tconst zstd = new ZSTDDecoder();\n\t\t\t\tawait zstd.init();\n\t\t\t\tresolve( zstd );\n\n\t\t\t} );\n\n\t\t}\n\n\t\tlevelData = ( await _zstd ).decode( level.levelData, level.uncompressedByteLength );\n\n\t} else {\n\n\t\tthrow new Error( 'THREE.KTX2Loader: Unsupported supercompressionScheme.' );\n\n\t}\n\n\tif ( TYPE_MAP[ vkFormat ] === FloatType ) {\n\n\t\tview = new Float32Array(\n\n\t\t\tlevelData.buffer,\n\t\t\tlevelData.byteOffset,\n\t\t\tlevelData.byteLength / Float32Array.BYTES_PER_ELEMENT\n\n\t\t);\n\n\t} else if ( TYPE_MAP[ vkFormat ] === HalfFloatType ) {\n\n\t\tview = new Uint16Array(\n\n\t\t\tlevelData.buffer,\n\t\t\tlevelData.byteOffset,\n\t\t\tlevelData.byteLength / Uint16Array.BYTES_PER_ELEMENT\n\n\t\t);\n\n\t} else {\n\n\t\tview = levelData;\n\n\t}\n\t//\n\n\tconst texture = pixelDepth === 0\n\t\t? new DataTexture( view, pixelWidth, pixelHeight )\n\t\t: new Data3DTexture( view, pixelWidth, pixelHeight, pixelDepth );\n\n\ttexture.type = TYPE_MAP[ vkFormat ];\n\ttexture.format = FORMAT_MAP[ vkFormat ];\n\ttexture.colorSpace = COLOR_SPACE_MAP[ vkFormat ] || NoColorSpace;\n\n\ttexture.needsUpdate = true;\n\n\t//\n\n\treturn Promise.resolve( texture );\n\n}\n\nexport { KTX2Loader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}