{"ast":null,"code":"import { CustomBlending, OneFactor, AddEquation, SrcAlphaFactor, Color, HalfFloatType, ShaderMaterial, UniformsUtils, WebGLRenderTarget } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\n\n/**\n*\n* Supersample Anti-Aliasing Render Pass\n*\n* This manual approach to SSAA re-renders the scene ones for each sample with camera jitter and accumulates the results.\n*\n* References: https://en.wikipedia.org/wiki/Supersampling\n*\n*/\n\nclass SSAARenderPass extends Pass {\n  constructor(scene, camera, clearColor, clearAlpha) {\n    super();\n    this.scene = scene;\n    this.camera = camera;\n    this.sampleLevel = 4; // specified as n, where the number of samples is 2^n, so sampleLevel = 4, is 2^4 samples, 16.\n    this.unbiased = true;\n\n    // as we need to clear the buffer in this pass, clearColor must be set to something, defaults to black.\n    this.clearColor = clearColor !== undefined ? clearColor : 0x000000;\n    this.clearAlpha = clearAlpha !== undefined ? clearAlpha : 0;\n    this._oldClearColor = new Color();\n    const copyShader = CopyShader;\n    this.copyUniforms = UniformsUtils.clone(copyShader.uniforms);\n    this.copyMaterial = new ShaderMaterial({\n      uniforms: this.copyUniforms,\n      vertexShader: copyShader.vertexShader,\n      fragmentShader: copyShader.fragmentShader,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      // do not use AdditiveBlending because it mixes the alpha channel instead of adding\n      blending: CustomBlending,\n      blendEquation: AddEquation,\n      blendDst: OneFactor,\n      blendDstAlpha: OneFactor,\n      blendSrc: SrcAlphaFactor,\n      blendSrcAlpha: OneFactor\n    });\n    this.fsQuad = new FullScreenQuad(this.copyMaterial);\n  }\n  dispose() {\n    if (this.sampleRenderTarget) {\n      this.sampleRenderTarget.dispose();\n      this.sampleRenderTarget = null;\n    }\n    this.copyMaterial.dispose();\n    this.fsQuad.dispose();\n  }\n  setSize(width, height) {\n    if (this.sampleRenderTarget) this.sampleRenderTarget.setSize(width, height);\n  }\n  render(renderer, writeBuffer, readBuffer) {\n    if (!this.sampleRenderTarget) {\n      this.sampleRenderTarget = new WebGLRenderTarget(readBuffer.width, readBuffer.height, {\n        type: HalfFloatType\n      });\n      this.sampleRenderTarget.texture.name = 'SSAARenderPass.sample';\n    }\n    const jitterOffsets = _JitterVectors[Math.max(0, Math.min(this.sampleLevel, 5))];\n    const autoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    renderer.getClearColor(this._oldClearColor);\n    const oldClearAlpha = renderer.getClearAlpha();\n    const baseSampleWeight = 1.0 / jitterOffsets.length;\n    const roundingRange = 1 / 32;\n    this.copyUniforms['tDiffuse'].value = this.sampleRenderTarget.texture;\n    const viewOffset = {\n      fullWidth: readBuffer.width,\n      fullHeight: readBuffer.height,\n      offsetX: 0,\n      offsetY: 0,\n      width: readBuffer.width,\n      height: readBuffer.height\n    };\n    const originalViewOffset = Object.assign({}, this.camera.view);\n    if (originalViewOffset.enabled) Object.assign(viewOffset, originalViewOffset);\n\n    // render the scene multiple times, each slightly jitter offset from the last and accumulate the results.\n    for (let i = 0; i < jitterOffsets.length; i++) {\n      const jitterOffset = jitterOffsets[i];\n      if (this.camera.setViewOffset) {\n        this.camera.setViewOffset(viewOffset.fullWidth, viewOffset.fullHeight, viewOffset.offsetX + jitterOffset[0] * 0.0625, viewOffset.offsetY + jitterOffset[1] * 0.0625,\n        // 0.0625 = 1 / 16\n\n        viewOffset.width, viewOffset.height);\n      }\n      let sampleWeight = baseSampleWeight;\n      if (this.unbiased) {\n        // the theory is that equal weights for each sample lead to an accumulation of rounding errors.\n        // The following equation varies the sampleWeight per sample so that it is uniformly distributed\n        // across a range of values whose rounding errors cancel each other out.\n\n        const uniformCenteredDistribution = -0.5 + (i + 0.5) / jitterOffsets.length;\n        sampleWeight += roundingRange * uniformCenteredDistribution;\n      }\n      this.copyUniforms['opacity'].value = sampleWeight;\n      renderer.setClearColor(this.clearColor, this.clearAlpha);\n      renderer.setRenderTarget(this.sampleRenderTarget);\n      renderer.clear();\n      renderer.render(this.scene, this.camera);\n      renderer.setRenderTarget(this.renderToScreen ? null : writeBuffer);\n      if (i === 0) {\n        renderer.setClearColor(0x000000, 0.0);\n        renderer.clear();\n      }\n      this.fsQuad.render(renderer);\n    }\n    if (this.camera.setViewOffset && originalViewOffset.enabled) {\n      this.camera.setViewOffset(originalViewOffset.fullWidth, originalViewOffset.fullHeight, originalViewOffset.offsetX, originalViewOffset.offsetY, originalViewOffset.width, originalViewOffset.height);\n    } else if (this.camera.clearViewOffset) {\n      this.camera.clearViewOffset();\n    }\n    renderer.autoClear = autoClear;\n    renderer.setClearColor(this._oldClearColor, oldClearAlpha);\n  }\n}\n\n// These jitter vectors are specified in integers because it is easier.\n// I am assuming a [-8,8) integer grid, but it needs to be mapped onto [-0.5,0.5)\n// before being used, thus these integers need to be scaled by 1/16.\n//\n// Sample patterns reference: https://msdn.microsoft.com/en-us/library/windows/desktop/ff476218%28v=vs.85%29.aspx?f=255&MSPPError=-2147217396\nconst _JitterVectors = [[[0, 0]], [[4, 4], [-4, -4]], [[-2, -6], [6, -2], [-6, 2], [2, 6]], [[1, -3], [-1, 3], [5, 1], [-3, -5], [-5, 5], [-7, -1], [3, 7], [7, -7]], [[1, 1], [-1, -3], [-3, 2], [4, -1], [-5, -2], [2, 5], [5, 3], [3, -5], [-2, 6], [0, -7], [-4, -6], [-6, 4], [-8, 0], [7, -4], [6, 7], [-7, -8]], [[-4, -7], [-7, -5], [-3, -5], [-5, -4], [-1, -4], [-2, -2], [-6, -1], [-4, 0], [-7, 1], [-1, 2], [-6, 3], [-3, 3], [-7, 6], [-3, 6], [-5, 7], [-1, 7], [5, -7], [1, -6], [6, -5], [4, -4], [2, -3], [7, -2], [1, -1], [4, -1], [2, 1], [6, 2], [0, 4], [4, 4], [2, 5], [7, 5], [5, 6], [3, 7]]];\nexport { SSAARenderPass };","map":{"version":3,"names":["CustomBlending","OneFactor","AddEquation","SrcAlphaFactor","Color","HalfFloatType","ShaderMaterial","UniformsUtils","WebGLRenderTarget","Pass","FullScreenQuad","CopyShader","SSAARenderPass","constructor","scene","camera","clearColor","clearAlpha","sampleLevel","unbiased","undefined","_oldClearColor","copyShader","copyUniforms","clone","uniforms","copyMaterial","vertexShader","fragmentShader","transparent","depthTest","depthWrite","blending","blendEquation","blendDst","blendDstAlpha","blendSrc","blendSrcAlpha","fsQuad","dispose","sampleRenderTarget","setSize","width","height","render","renderer","writeBuffer","readBuffer","type","texture","name","jitterOffsets","_JitterVectors","Math","max","min","autoClear","getClearColor","oldClearAlpha","getClearAlpha","baseSampleWeight","length","roundingRange","value","viewOffset","fullWidth","fullHeight","offsetX","offsetY","originalViewOffset","Object","assign","view","enabled","i","jitterOffset","setViewOffset","sampleWeight","uniformCenteredDistribution","setClearColor","setRenderTarget","clear","renderToScreen","clearViewOffset"],"sources":["C:/Users/bozok/Desktop/AngularProject/gnrrc2/node_modules/three/examples/jsm/postprocessing/SSAARenderPass.js"],"sourcesContent":["import {\n\tCustomBlending,\n\tOneFactor,\n\tAddEquation,\n\tSrcAlphaFactor,\n\tColor,\n\tHalfFloatType,\n\tShaderMaterial,\n\tUniformsUtils,\n\tWebGLRenderTarget\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\n\n/**\n*\n* Supersample Anti-Aliasing Render Pass\n*\n* This manual approach to SSAA re-renders the scene ones for each sample with camera jitter and accumulates the results.\n*\n* References: https://en.wikipedia.org/wiki/Supersampling\n*\n*/\n\nclass SSAARenderPass extends Pass {\n\n\tconstructor( scene, camera, clearColor, clearAlpha ) {\n\n\t\tsuper();\n\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\n\t\tthis.sampleLevel = 4; // specified as n, where the number of samples is 2^n, so sampleLevel = 4, is 2^4 samples, 16.\n\t\tthis.unbiased = true;\n\n\t\t// as we need to clear the buffer in this pass, clearColor must be set to something, defaults to black.\n\t\tthis.clearColor = ( clearColor !== undefined ) ? clearColor : 0x000000;\n\t\tthis.clearAlpha = ( clearAlpha !== undefined ) ? clearAlpha : 0;\n\t\tthis._oldClearColor = new Color();\n\n\t\tconst copyShader = CopyShader;\n\t\tthis.copyUniforms = UniformsUtils.clone( copyShader.uniforms );\n\n\t\tthis.copyMaterial = new ShaderMaterial(\t{\n\t\t\tuniforms: this.copyUniforms,\n\t\t\tvertexShader: copyShader.vertexShader,\n\t\t\tfragmentShader: copyShader.fragmentShader,\n\t\t\ttransparent: true,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\n\t\t\t// do not use AdditiveBlending because it mixes the alpha channel instead of adding\n\t\t\tblending: CustomBlending,\n\t\t\tblendEquation: AddEquation,\n\t\t\tblendDst: OneFactor,\n\t\t\tblendDstAlpha: OneFactor,\n\t\t\tblendSrc: SrcAlphaFactor,\n\t\t\tblendSrcAlpha: OneFactor\n\t\t} );\n\n\t\tthis.fsQuad = new FullScreenQuad( this.copyMaterial );\n\n\t}\n\n\tdispose() {\n\n\t\tif ( this.sampleRenderTarget ) {\n\n\t\t\tthis.sampleRenderTarget.dispose();\n\t\t\tthis.sampleRenderTarget = null;\n\n\t\t}\n\n\t\tthis.copyMaterial.dispose();\n\n\t\tthis.fsQuad.dispose();\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\tif ( this.sampleRenderTarget )\tthis.sampleRenderTarget.setSize( width, height );\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer ) {\n\n\t\tif ( ! this.sampleRenderTarget ) {\n\n\t\t\tthis.sampleRenderTarget = new WebGLRenderTarget( readBuffer.width, readBuffer.height, { type: HalfFloatType } );\n\t\t\tthis.sampleRenderTarget.texture.name = 'SSAARenderPass.sample';\n\n\t\t}\n\n\t\tconst jitterOffsets = _JitterVectors[ Math.max( 0, Math.min( this.sampleLevel, 5 ) ) ];\n\n\t\tconst autoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\trenderer.getClearColor( this._oldClearColor );\n\t\tconst oldClearAlpha = renderer.getClearAlpha();\n\n\t\tconst baseSampleWeight = 1.0 / jitterOffsets.length;\n\t\tconst roundingRange = 1 / 32;\n\t\tthis.copyUniforms[ 'tDiffuse' ].value = this.sampleRenderTarget.texture;\n\n\t\tconst viewOffset = {\n\n\t\t\tfullWidth: readBuffer.width,\n\t\t\tfullHeight: readBuffer.height,\n\t\t\toffsetX: 0,\n\t\t\toffsetY: 0,\n\t\t\twidth: readBuffer.width,\n\t\t\theight: readBuffer.height\n\n\t\t};\n\n\t\tconst originalViewOffset = Object.assign( {}, this.camera.view );\n\n\t\tif ( originalViewOffset.enabled ) Object.assign( viewOffset, originalViewOffset );\n\n\t\t// render the scene multiple times, each slightly jitter offset from the last and accumulate the results.\n\t\tfor ( let i = 0; i < jitterOffsets.length; i ++ ) {\n\n\t\t\tconst jitterOffset = jitterOffsets[ i ];\n\n\t\t\tif ( this.camera.setViewOffset ) {\n\n\t\t\t\tthis.camera.setViewOffset(\n\n\t\t\t\t\tviewOffset.fullWidth, viewOffset.fullHeight,\n\n\t\t\t\t\tviewOffset.offsetX + jitterOffset[ 0 ] * 0.0625, viewOffset.offsetY + jitterOffset[ 1 ] * 0.0625, // 0.0625 = 1 / 16\n\n\t\t\t\t\tviewOffset.width, viewOffset.height\n\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tlet sampleWeight = baseSampleWeight;\n\n\t\t\tif ( this.unbiased ) {\n\n\t\t\t\t// the theory is that equal weights for each sample lead to an accumulation of rounding errors.\n\t\t\t\t// The following equation varies the sampleWeight per sample so that it is uniformly distributed\n\t\t\t\t// across a range of values whose rounding errors cancel each other out.\n\n\t\t\t\tconst uniformCenteredDistribution = ( - 0.5 + ( i + 0.5 ) / jitterOffsets.length );\n\t\t\t\tsampleWeight += roundingRange * uniformCenteredDistribution;\n\n\t\t\t}\n\n\t\t\tthis.copyUniforms[ 'opacity' ].value = sampleWeight;\n\t\t\trenderer.setClearColor( this.clearColor, this.clearAlpha );\n\t\t\trenderer.setRenderTarget( this.sampleRenderTarget );\n\t\t\trenderer.clear();\n\t\t\trenderer.render( this.scene, this.camera );\n\n\t\t\trenderer.setRenderTarget( this.renderToScreen ? null : writeBuffer );\n\n\t\t\tif ( i === 0 ) {\n\n\t\t\t\trenderer.setClearColor( 0x000000, 0.0 );\n\t\t\t\trenderer.clear();\n\n\t\t\t}\n\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t\tif ( this.camera.setViewOffset && originalViewOffset.enabled ) {\n\n\t\t\tthis.camera.setViewOffset(\n\n\t\t\t\toriginalViewOffset.fullWidth, originalViewOffset.fullHeight,\n\n\t\t\t\toriginalViewOffset.offsetX, originalViewOffset.offsetY,\n\n\t\t\t\toriginalViewOffset.width, originalViewOffset.height\n\n\t\t\t);\n\n\t\t} else if ( this.camera.clearViewOffset ) {\n\n\t\t\tthis.camera.clearViewOffset();\n\n\t\t}\n\n\t\trenderer.autoClear = autoClear;\n\t\trenderer.setClearColor( this._oldClearColor, oldClearAlpha );\n\n\t}\n\n}\n\n\n// These jitter vectors are specified in integers because it is easier.\n// I am assuming a [-8,8) integer grid, but it needs to be mapped onto [-0.5,0.5)\n// before being used, thus these integers need to be scaled by 1/16.\n//\n// Sample patterns reference: https://msdn.microsoft.com/en-us/library/windows/desktop/ff476218%28v=vs.85%29.aspx?f=255&MSPPError=-2147217396\nconst _JitterVectors = [\n\t[\n\t\t[ 0, 0 ]\n\t],\n\t[\n\t\t[ 4, 4 ], [ - 4, - 4 ]\n\t],\n\t[\n\t\t[ - 2, - 6 ], [ 6, - 2 ], [ - 6, 2 ], [ 2, 6 ]\n\t],\n\t[\n\t\t[ 1, - 3 ], [ - 1, 3 ], [ 5, 1 ], [ - 3, - 5 ],\n\t\t[ - 5, 5 ], [ - 7, - 1 ], [ 3, 7 ], [ 7, - 7 ]\n\t],\n\t[\n\t\t[ 1, 1 ], [ - 1, - 3 ], [ - 3, 2 ], [ 4, - 1 ],\n\t\t[ - 5, - 2 ], [ 2, 5 ], [ 5, 3 ], [ 3, - 5 ],\n\t\t[ - 2, 6 ], [ 0, - 7 ], [ - 4, - 6 ], [ - 6, 4 ],\n\t\t[ - 8, 0 ], [ 7, - 4 ], [ 6, 7 ], [ - 7, - 8 ]\n\t],\n\t[\n\t\t[ - 4, - 7 ], [ - 7, - 5 ], [ - 3, - 5 ], [ - 5, - 4 ],\n\t\t[ - 1, - 4 ], [ - 2, - 2 ], [ - 6, - 1 ], [ - 4, 0 ],\n\t\t[ - 7, 1 ], [ - 1, 2 ], [ - 6, 3 ], [ - 3, 3 ],\n\t\t[ - 7, 6 ], [ - 3, 6 ], [ - 5, 7 ], [ - 1, 7 ],\n\t\t[ 5, - 7 ], [ 1, - 6 ], [ 6, - 5 ], [ 4, - 4 ],\n\t\t[ 2, - 3 ], [ 7, - 2 ], [ 1, - 1 ], [ 4, - 1 ],\n\t\t[ 2, 1 ], [ 6, 2 ], [ 0, 4 ], [ 4, 4 ],\n\t\t[ 2, 5 ], [ 7, 5 ], [ 5, 6 ], [ 3, 7 ]\n\t]\n];\n\nexport { SSAARenderPass };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}