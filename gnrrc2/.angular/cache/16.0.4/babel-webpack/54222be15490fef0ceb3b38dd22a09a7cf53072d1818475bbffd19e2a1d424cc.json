{"ast":null,"code":"import { HalfFloatType, WebGLRenderTarget } from 'three';\nimport { SSAARenderPass } from './SSAARenderPass.js';\n\n/**\n *\n * Temporal Anti-Aliasing Render Pass\n *\n * When there is no motion in the scene, the TAA render pass accumulates jittered camera samples across frames to create a high quality anti-aliased result.\n *\n * References:\n *\n * TODO: Add support for motion vector pas so that accumulation of samples across frames can occur on dynamics scenes.\n *\n */\n\nclass TAARenderPass extends SSAARenderPass {\n  constructor(scene, camera, clearColor, clearAlpha) {\n    super(scene, camera, clearColor, clearAlpha);\n    this.sampleLevel = 0;\n    this.accumulate = false;\n  }\n  render(renderer, writeBuffer, readBuffer, deltaTime) {\n    if (this.accumulate === false) {\n      super.render(renderer, writeBuffer, readBuffer, deltaTime);\n      this.accumulateIndex = -1;\n      return;\n    }\n    const jitterOffsets = _JitterVectors[5];\n    if (this.sampleRenderTarget === undefined) {\n      this.sampleRenderTarget = new WebGLRenderTarget(readBuffer.width, readBuffer.height, {\n        type: HalfFloatType\n      });\n      this.sampleRenderTarget.texture.name = 'TAARenderPass.sample';\n    }\n    if (this.holdRenderTarget === undefined) {\n      this.holdRenderTarget = new WebGLRenderTarget(readBuffer.width, readBuffer.height, {\n        type: HalfFloatType\n      });\n      this.holdRenderTarget.texture.name = 'TAARenderPass.hold';\n    }\n    if (this.accumulateIndex === -1) {\n      super.render(renderer, this.holdRenderTarget, readBuffer, deltaTime);\n      this.accumulateIndex = 0;\n    }\n    const autoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    const sampleWeight = 1.0 / jitterOffsets.length;\n    if (this.accumulateIndex >= 0 && this.accumulateIndex < jitterOffsets.length) {\n      this.copyUniforms['opacity'].value = sampleWeight;\n      this.copyUniforms['tDiffuse'].value = writeBuffer.texture;\n\n      // render the scene multiple times, each slightly jitter offset from the last and accumulate the results.\n      const numSamplesPerFrame = Math.pow(2, this.sampleLevel);\n      for (let i = 0; i < numSamplesPerFrame; i++) {\n        const j = this.accumulateIndex;\n        const jitterOffset = jitterOffsets[j];\n        if (this.camera.setViewOffset) {\n          this.camera.setViewOffset(readBuffer.width, readBuffer.height, jitterOffset[0] * 0.0625, jitterOffset[1] * 0.0625,\n          // 0.0625 = 1 / 16\n          readBuffer.width, readBuffer.height);\n        }\n        renderer.setRenderTarget(writeBuffer);\n        renderer.clear();\n        renderer.render(this.scene, this.camera);\n        renderer.setRenderTarget(this.sampleRenderTarget);\n        if (this.accumulateIndex === 0) renderer.clear();\n        this.fsQuad.render(renderer);\n        this.accumulateIndex++;\n        if (this.accumulateIndex >= jitterOffsets.length) break;\n      }\n      if (this.camera.clearViewOffset) this.camera.clearViewOffset();\n    }\n    const accumulationWeight = this.accumulateIndex * sampleWeight;\n    if (accumulationWeight > 0) {\n      this.copyUniforms['opacity'].value = 1.0;\n      this.copyUniforms['tDiffuse'].value = this.sampleRenderTarget.texture;\n      renderer.setRenderTarget(writeBuffer);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n    if (accumulationWeight < 1.0) {\n      this.copyUniforms['opacity'].value = 1.0 - accumulationWeight;\n      this.copyUniforms['tDiffuse'].value = this.holdRenderTarget.texture;\n      renderer.setRenderTarget(writeBuffer);\n      if (accumulationWeight === 0) renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n    renderer.autoClear = autoClear;\n  }\n  dispose() {\n    super.dispose();\n    if (this.sampleRenderTarget !== undefined) this.sampleRenderTarget.dispose();\n    if (this.holdRenderTarget !== undefined) this.holdRenderTarget.dispose();\n  }\n}\nconst _JitterVectors = [[[0, 0]], [[4, 4], [-4, -4]], [[-2, -6], [6, -2], [-6, 2], [2, 6]], [[1, -3], [-1, 3], [5, 1], [-3, -5], [-5, 5], [-7, -1], [3, 7], [7, -7]], [[1, 1], [-1, -3], [-3, 2], [4, -1], [-5, -2], [2, 5], [5, 3], [3, -5], [-2, 6], [0, -7], [-4, -6], [-6, 4], [-8, 0], [7, -4], [6, 7], [-7, -8]], [[-4, -7], [-7, -5], [-3, -5], [-5, -4], [-1, -4], [-2, -2], [-6, -1], [-4, 0], [-7, 1], [-1, 2], [-6, 3], [-3, 3], [-7, 6], [-3, 6], [-5, 7], [-1, 7], [5, -7], [1, -6], [6, -5], [4, -4], [2, -3], [7, -2], [1, -1], [4, -1], [2, 1], [6, 2], [0, 4], [4, 4], [2, 5], [7, 5], [5, 6], [3, 7]]];\nexport { TAARenderPass };","map":{"version":3,"names":["HalfFloatType","WebGLRenderTarget","SSAARenderPass","TAARenderPass","constructor","scene","camera","clearColor","clearAlpha","sampleLevel","accumulate","render","renderer","writeBuffer","readBuffer","deltaTime","accumulateIndex","jitterOffsets","_JitterVectors","sampleRenderTarget","undefined","width","height","type","texture","name","holdRenderTarget","autoClear","sampleWeight","length","copyUniforms","value","numSamplesPerFrame","Math","pow","i","j","jitterOffset","setViewOffset","setRenderTarget","clear","fsQuad","clearViewOffset","accumulationWeight","dispose"],"sources":["C:/Users/bozok/Desktop/AngularProject/gnrrc2/node_modules/three/examples/jsm/postprocessing/TAARenderPass.js"],"sourcesContent":["import {\n\tHalfFloatType,\n\tWebGLRenderTarget\n} from 'three';\nimport { SSAARenderPass } from './SSAARenderPass.js';\n\n/**\n *\n * Temporal Anti-Aliasing Render Pass\n *\n * When there is no motion in the scene, the TAA render pass accumulates jittered camera samples across frames to create a high quality anti-aliased result.\n *\n * References:\n *\n * TODO: Add support for motion vector pas so that accumulation of samples across frames can occur on dynamics scenes.\n *\n */\n\nclass TAARenderPass extends SSAARenderPass {\n\n\tconstructor( scene, camera, clearColor, clearAlpha ) {\n\n\t\tsuper( scene, camera, clearColor, clearAlpha );\n\n\t\tthis.sampleLevel = 0;\n\t\tthis.accumulate = false;\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer, deltaTime ) {\n\n\t\tif ( this.accumulate === false ) {\n\n\t\t\tsuper.render( renderer, writeBuffer, readBuffer, deltaTime );\n\n\t\t\tthis.accumulateIndex = - 1;\n\t\t\treturn;\n\n\t\t}\n\n\t\tconst jitterOffsets = _JitterVectors[ 5 ];\n\n\t\tif ( this.sampleRenderTarget === undefined ) {\n\n\t\t\tthis.sampleRenderTarget = new WebGLRenderTarget( readBuffer.width, readBuffer.height, { type: HalfFloatType } );\n\t\t\tthis.sampleRenderTarget.texture.name = 'TAARenderPass.sample';\n\n\t\t}\n\n\t\tif ( this.holdRenderTarget === undefined ) {\n\n\t\t\tthis.holdRenderTarget = new WebGLRenderTarget( readBuffer.width, readBuffer.height, { type: HalfFloatType } );\n\t\t\tthis.holdRenderTarget.texture.name = 'TAARenderPass.hold';\n\n\t\t}\n\n\t\tif ( this.accumulateIndex === - 1 ) {\n\n\t\t\tsuper.render( renderer, this.holdRenderTarget, readBuffer, deltaTime );\n\n\t\t\tthis.accumulateIndex = 0;\n\n\t\t}\n\n\t\tconst autoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\tconst sampleWeight = 1.0 / ( jitterOffsets.length );\n\n\t\tif ( this.accumulateIndex >= 0 && this.accumulateIndex < jitterOffsets.length ) {\n\n\t\t\tthis.copyUniforms[ 'opacity' ].value = sampleWeight;\n\t\t\tthis.copyUniforms[ 'tDiffuse' ].value = writeBuffer.texture;\n\n\t\t\t// render the scene multiple times, each slightly jitter offset from the last and accumulate the results.\n\t\t\tconst numSamplesPerFrame = Math.pow( 2, this.sampleLevel );\n\t\t\tfor ( let i = 0; i < numSamplesPerFrame; i ++ ) {\n\n\t\t\t\tconst j = this.accumulateIndex;\n\t\t\t\tconst jitterOffset = jitterOffsets[ j ];\n\n\t\t\t\tif ( this.camera.setViewOffset ) {\n\n\t\t\t\t\tthis.camera.setViewOffset( readBuffer.width, readBuffer.height,\n\t\t\t\t\t\tjitterOffset[ 0 ] * 0.0625, jitterOffset[ 1 ] * 0.0625, // 0.0625 = 1 / 16\n\t\t\t\t\t\treadBuffer.width, readBuffer.height );\n\n\t\t\t\t}\n\n\t\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\t\trenderer.clear();\n\t\t\t\trenderer.render( this.scene, this.camera );\n\n\t\t\t\trenderer.setRenderTarget( this.sampleRenderTarget );\n\t\t\t\tif ( this.accumulateIndex === 0 ) renderer.clear();\n\t\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\t\tthis.accumulateIndex ++;\n\n\t\t\t\tif ( this.accumulateIndex >= jitterOffsets.length ) break;\n\n\t\t\t}\n\n\t\t\tif ( this.camera.clearViewOffset ) this.camera.clearViewOffset();\n\n\t\t}\n\n\t\tconst accumulationWeight = this.accumulateIndex * sampleWeight;\n\n\t\tif ( accumulationWeight > 0 ) {\n\n\t\t\tthis.copyUniforms[ 'opacity' ].value = 1.0;\n\t\t\tthis.copyUniforms[ 'tDiffuse' ].value = this.sampleRenderTarget.texture;\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t\tif ( accumulationWeight < 1.0 ) {\n\n\t\t\tthis.copyUniforms[ 'opacity' ].value = 1.0 - accumulationWeight;\n\t\t\tthis.copyUniforms[ 'tDiffuse' ].value = this.holdRenderTarget.texture;\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\tif ( accumulationWeight === 0 ) renderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t\trenderer.autoClear = autoClear;\n\n\t}\n\n\tdispose() {\n\n\t\tsuper.dispose();\n\n\t\tif ( this.sampleRenderTarget !== undefined ) this.sampleRenderTarget.dispose();\n\t\tif ( this.holdRenderTarget !== undefined ) this.holdRenderTarget.dispose();\n\n\t}\n\n}\n\nconst _JitterVectors = [\n\t[\n\t\t[ 0, 0 ]\n\t],\n\t[\n\t\t[ 4, 4 ], [ - 4, - 4 ]\n\t],\n\t[\n\t\t[ - 2, - 6 ], [ 6, - 2 ], [ - 6, 2 ], [ 2, 6 ]\n\t],\n\t[\n\t\t[ 1, - 3 ], [ - 1, 3 ], [ 5, 1 ], [ - 3, - 5 ],\n\t\t[ - 5, 5 ], [ - 7, - 1 ], [ 3, 7 ], [ 7, - 7 ]\n\t],\n\t[\n\t\t[ 1, 1 ], [ - 1, - 3 ], [ - 3, 2 ], [ 4, - 1 ],\n\t\t[ - 5, - 2 ], [ 2, 5 ], [ 5, 3 ], [ 3, - 5 ],\n\t\t[ - 2, 6 ], [ 0, - 7 ], [ - 4, - 6 ], [ - 6, 4 ],\n\t\t[ - 8, 0 ], [ 7, - 4 ], [ 6, 7 ], [ - 7, - 8 ]\n\t],\n\t[\n\t\t[ - 4, - 7 ], [ - 7, - 5 ], [ - 3, - 5 ], [ - 5, - 4 ],\n\t\t[ - 1, - 4 ], [ - 2, - 2 ], [ - 6, - 1 ], [ - 4, 0 ],\n\t\t[ - 7, 1 ], [ - 1, 2 ], [ - 6, 3 ], [ - 3, 3 ],\n\t\t[ - 7, 6 ], [ - 3, 6 ], [ - 5, 7 ], [ - 1, 7 ],\n\t\t[ 5, - 7 ], [ 1, - 6 ], [ 6, - 5 ], [ 4, - 4 ],\n\t\t[ 2, - 3 ], [ 7, - 2 ], [ 1, - 1 ], [ 4, - 1 ],\n\t\t[ 2, 1 ], [ 6, 2 ], [ 0, 4 ], [ 4, 4 ],\n\t\t[ 2, 5 ], [ 7, 5 ], [ 5, 6 ], [ 3, 7 ]\n\t]\n];\n\nexport { TAARenderPass };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}