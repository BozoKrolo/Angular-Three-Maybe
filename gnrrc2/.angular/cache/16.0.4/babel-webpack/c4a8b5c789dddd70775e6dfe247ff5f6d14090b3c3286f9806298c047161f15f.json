{"ast":null,"code":"import { AddEquation, Color, CustomBlending, DataTexture, DepthTexture, DstAlphaFactor, DstColorFactor, FloatType, HalfFloatType, MathUtils, MeshNormalMaterial, NearestFilter, NoBlending, RedFormat, LuminanceFormat, DepthStencilFormat, UnsignedInt248Type, RepeatWrapping, ShaderMaterial, UniformsUtils, Vector3, WebGLRenderTarget, ZeroFactor } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { SimplexNoise } from '../math/SimplexNoise.js';\nimport { SSAOShader } from '../shaders/SSAOShader.js';\nimport { SSAOBlurShader } from '../shaders/SSAOShader.js';\nimport { SSAODepthShader } from '../shaders/SSAOShader.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\nclass SSAOPass extends Pass {\n  constructor(scene, camera, width, height) {\n    super();\n    this.width = width !== undefined ? width : 512;\n    this.height = height !== undefined ? height : 512;\n    this.clear = true;\n    this.camera = camera;\n    this.scene = scene;\n    this.kernelRadius = 8;\n    this.kernelSize = 32;\n    this.kernel = [];\n    this.noiseTexture = null;\n    this.output = 0;\n    this.minDistance = 0.005;\n    this.maxDistance = 0.1;\n    this._visibilityCache = new Map();\n\n    //\n\n    this.generateSampleKernel();\n    this.generateRandomKernelRotations();\n\n    // beauty render target\n\n    const depthTexture = new DepthTexture();\n    depthTexture.format = DepthStencilFormat;\n    depthTexture.type = UnsignedInt248Type;\n    this.beautyRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      type: HalfFloatType\n    });\n\n    // normal render target with depth buffer\n\n    this.normalRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType,\n      depthTexture: depthTexture\n    });\n\n    // ssao render target\n\n    this.ssaoRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      type: HalfFloatType\n    });\n    this.blurRenderTarget = this.ssaoRenderTarget.clone();\n\n    // ssao material\n\n    this.ssaoMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOShader.defines),\n      uniforms: UniformsUtils.clone(SSAOShader.uniforms),\n      vertexShader: SSAOShader.vertexShader,\n      fragmentShader: SSAOShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.ssaoMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n    this.ssaoMaterial.uniforms['tNormal'].value = this.normalRenderTarget.texture;\n    this.ssaoMaterial.uniforms['tDepth'].value = this.normalRenderTarget.depthTexture;\n    this.ssaoMaterial.uniforms['tNoise'].value = this.noiseTexture;\n    this.ssaoMaterial.uniforms['kernel'].value = this.kernel;\n    this.ssaoMaterial.uniforms['cameraNear'].value = this.camera.near;\n    this.ssaoMaterial.uniforms['cameraFar'].value = this.camera.far;\n    this.ssaoMaterial.uniforms['resolution'].value.set(this.width, this.height);\n    this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\n    this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\n\n    // normal material\n\n    this.normalMaterial = new MeshNormalMaterial();\n    this.normalMaterial.blending = NoBlending;\n\n    // blur material\n\n    this.blurMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSAOBlurShader.uniforms),\n      vertexShader: SSAOBlurShader.vertexShader,\n      fragmentShader: SSAOBlurShader.fragmentShader\n    });\n    this.blurMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture;\n    this.blurMaterial.uniforms['resolution'].value.set(this.width, this.height);\n\n    // material for rendering the depth\n\n    this.depthRenderMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAODepthShader.defines),\n      uniforms: UniformsUtils.clone(SSAODepthShader.uniforms),\n      vertexShader: SSAODepthShader.vertexShader,\n      fragmentShader: SSAODepthShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.depthRenderMaterial.uniforms['tDepth'].value = this.normalRenderTarget.depthTexture;\n    this.depthRenderMaterial.uniforms['cameraNear'].value = this.camera.near;\n    this.depthRenderMaterial.uniforms['cameraFar'].value = this.camera.far;\n\n    // material for rendering the content of a render target\n\n    this.copyMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      blendSrc: DstColorFactor,\n      blendDst: ZeroFactor,\n      blendEquation: AddEquation,\n      blendSrcAlpha: DstAlphaFactor,\n      blendDstAlpha: ZeroFactor,\n      blendEquationAlpha: AddEquation\n    });\n    this.fsQuad = new FullScreenQuad(null);\n    this.originalClearColor = new Color();\n  }\n  dispose() {\n    // dispose render targets\n\n    this.beautyRenderTarget.dispose();\n    this.normalRenderTarget.dispose();\n    this.ssaoRenderTarget.dispose();\n    this.blurRenderTarget.dispose();\n\n    // dispose materials\n\n    this.normalMaterial.dispose();\n    this.blurMaterial.dispose();\n    this.copyMaterial.dispose();\n    this.depthRenderMaterial.dispose();\n\n    // dipsose full screen quad\n\n    this.fsQuad.dispose();\n  }\n  render(renderer, writeBuffer /*, readBuffer, deltaTime, maskActive */) {\n    if (renderer.capabilities.isWebGL2 === false) this.noiseTexture.format = LuminanceFormat;\n\n    // render beauty\n\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n    renderer.render(this.scene, this.camera);\n\n    // render normals and depth (honor only meshes, points and lines do not contribute to SSAO)\n\n    this.overrideVisibility();\n    this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0);\n    this.restoreVisibility();\n\n    // render SSAO\n\n    this.ssaoMaterial.uniforms['kernelRadius'].value = this.kernelRadius;\n    this.ssaoMaterial.uniforms['minDistance'].value = this.minDistance;\n    this.ssaoMaterial.uniforms['maxDistance'].value = this.maxDistance;\n    this.renderPass(renderer, this.ssaoMaterial, this.ssaoRenderTarget);\n\n    // render blur\n\n    this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget);\n\n    // output result to screen\n\n    switch (this.output) {\n      case SSAOPass.OUTPUT.SSAO:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case SSAOPass.OUTPUT.Blur:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case SSAOPass.OUTPUT.Beauty:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case SSAOPass.OUTPUT.Depth:\n        this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case SSAOPass.OUTPUT.Normal:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.normalRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case SSAOPass.OUTPUT.Default:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\n        this.copyMaterial.blending = CustomBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      default:\n        console.warn('THREE.SSAOPass: Unknown output type.');\n    }\n  }\n  renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    // save original state\n    renderer.getClearColor(this.originalClearColor);\n    const originalClearAlpha = renderer.getClearAlpha();\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n\n    // setup pass state\n    renderer.autoClear = false;\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer);\n\n    // restore original state\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    const originalClearAlpha = renderer.getClearAlpha();\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null;\n\n    // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  setSize(width, height) {\n    this.width = width;\n    this.height = height;\n    this.beautyRenderTarget.setSize(width, height);\n    this.ssaoRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height);\n    this.blurRenderTarget.setSize(width, height);\n    this.ssaoMaterial.uniforms['resolution'].value.set(width, height);\n    this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\n    this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\n    this.blurMaterial.uniforms['resolution'].value.set(width, height);\n  }\n  generateSampleKernel() {\n    const kernelSize = this.kernelSize;\n    const kernel = this.kernel;\n    for (let i = 0; i < kernelSize; i++) {\n      const sample = new Vector3();\n      sample.x = Math.random() * 2 - 1;\n      sample.y = Math.random() * 2 - 1;\n      sample.z = Math.random();\n      sample.normalize();\n      let scale = i / kernelSize;\n      scale = MathUtils.lerp(0.1, 1, scale * scale);\n      sample.multiplyScalar(scale);\n      kernel.push(sample);\n    }\n  }\n  generateRandomKernelRotations() {\n    const width = 4,\n      height = 4;\n    const simplex = new SimplexNoise();\n    const size = width * height;\n    const data = new Float32Array(size);\n    for (let i = 0; i < size; i++) {\n      const x = Math.random() * 2 - 1;\n      const y = Math.random() * 2 - 1;\n      const z = 0;\n      data[i] = simplex.noise3d(x, y, z);\n    }\n    this.noiseTexture = new DataTexture(data, width, height, RedFormat, FloatType);\n    this.noiseTexture.wrapS = RepeatWrapping;\n    this.noiseTexture.wrapT = RepeatWrapping;\n    this.noiseTexture.needsUpdate = true;\n  }\n  overrideVisibility() {\n    const scene = this.scene;\n    const cache = this._visibilityCache;\n    scene.traverse(function (object) {\n      cache.set(object, object.visible);\n      if (object.isPoints || object.isLine) object.visible = false;\n    });\n  }\n  restoreVisibility() {\n    const scene = this.scene;\n    const cache = this._visibilityCache;\n    scene.traverse(function (object) {\n      const visible = cache.get(object);\n      object.visible = visible;\n    });\n    cache.clear();\n  }\n}\nSSAOPass.OUTPUT = {\n  'Default': 0,\n  'SSAO': 1,\n  'Blur': 2,\n  'Beauty': 3,\n  'Depth': 4,\n  'Normal': 5\n};\nexport { SSAOPass };","map":{"version":3,"names":["AddEquation","Color","CustomBlending","DataTexture","DepthTexture","DstAlphaFactor","DstColorFactor","FloatType","HalfFloatType","MathUtils","MeshNormalMaterial","NearestFilter","NoBlending","RedFormat","LuminanceFormat","DepthStencilFormat","UnsignedInt248Type","RepeatWrapping","ShaderMaterial","UniformsUtils","Vector3","WebGLRenderTarget","ZeroFactor","Pass","FullScreenQuad","SimplexNoise","SSAOShader","SSAOBlurShader","SSAODepthShader","CopyShader","SSAOPass","constructor","scene","camera","width","height","undefined","clear","kernelRadius","kernelSize","kernel","noiseTexture","output","minDistance","maxDistance","_visibilityCache","Map","generateSampleKernel","generateRandomKernelRotations","depthTexture","format","type","beautyRenderTarget","normalRenderTarget","minFilter","magFilter","ssaoRenderTarget","blurRenderTarget","clone","ssaoMaterial","defines","Object","assign","uniforms","vertexShader","fragmentShader","blending","value","texture","near","far","set","copy","projectionMatrix","projectionMatrixInverse","normalMaterial","blurMaterial","depthRenderMaterial","copyMaterial","transparent","depthTest","depthWrite","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","fsQuad","originalClearColor","dispose","render","renderer","writeBuffer","capabilities","isWebGL2","setRenderTarget","overrideVisibility","renderOverride","restoreVisibility","renderPass","OUTPUT","SSAO","renderToScreen","Blur","Beauty","Depth","Normal","Default","console","warn","passMaterial","renderTarget","clearColor","clearAlpha","getClearColor","originalClearAlpha","getClearAlpha","originalAutoClear","autoClear","setClearColor","setClearAlpha","material","overrideMaterial","setSize","i","sample","x","Math","random","y","z","normalize","scale","lerp","multiplyScalar","push","simplex","size","data","Float32Array","noise3d","wrapS","wrapT","needsUpdate","cache","traverse","object","visible","isPoints","isLine","get"],"sources":["C:/Users/bozok/Desktop/AngularProject/gnrrc2/node_modules/three/examples/jsm/postprocessing/SSAOPass.js"],"sourcesContent":["import {\n\tAddEquation,\n\tColor,\n\tCustomBlending,\n\tDataTexture,\n\tDepthTexture,\n\tDstAlphaFactor,\n\tDstColorFactor,\n\tFloatType,\n\tHalfFloatType,\n\tMathUtils,\n\tMeshNormalMaterial,\n\tNearestFilter,\n\tNoBlending,\n\tRedFormat,\n\tLuminanceFormat,\n\tDepthStencilFormat,\n\tUnsignedInt248Type,\n\tRepeatWrapping,\n\tShaderMaterial,\n\tUniformsUtils,\n\tVector3,\n\tWebGLRenderTarget,\n\tZeroFactor\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { SimplexNoise } from '../math/SimplexNoise.js';\nimport { SSAOShader } from '../shaders/SSAOShader.js';\nimport { SSAOBlurShader } from '../shaders/SSAOShader.js';\nimport { SSAODepthShader } from '../shaders/SSAOShader.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\n\nclass SSAOPass extends Pass {\n\n\tconstructor( scene, camera, width, height ) {\n\n\t\tsuper();\n\n\t\tthis.width = ( width !== undefined ) ? width : 512;\n\t\tthis.height = ( height !== undefined ) ? height : 512;\n\n\t\tthis.clear = true;\n\n\t\tthis.camera = camera;\n\t\tthis.scene = scene;\n\n\t\tthis.kernelRadius = 8;\n\t\tthis.kernelSize = 32;\n\t\tthis.kernel = [];\n\t\tthis.noiseTexture = null;\n\t\tthis.output = 0;\n\n\t\tthis.minDistance = 0.005;\n\t\tthis.maxDistance = 0.1;\n\n\t\tthis._visibilityCache = new Map();\n\n\t\t//\n\n\t\tthis.generateSampleKernel();\n\t\tthis.generateRandomKernelRotations();\n\n\t\t// beauty render target\n\n\t\tconst depthTexture = new DepthTexture();\n\t\tdepthTexture.format = DepthStencilFormat;\n\t\tdepthTexture.type = UnsignedInt248Type;\n\n\t\tthis.beautyRenderTarget = new WebGLRenderTarget( this.width, this.height, { type: HalfFloatType } );\n\n\t\t// normal render target with depth buffer\n\n\t\tthis.normalRenderTarget = new WebGLRenderTarget( this.width, this.height, {\n\t\t\tminFilter: NearestFilter,\n\t\t\tmagFilter: NearestFilter,\n\t\t\ttype: HalfFloatType,\n\t\t\tdepthTexture: depthTexture\n\t\t} );\n\n\t\t// ssao render target\n\n\t\tthis.ssaoRenderTarget = new WebGLRenderTarget( this.width, this.height, { type: HalfFloatType } );\n\n\t\tthis.blurRenderTarget = this.ssaoRenderTarget.clone();\n\n\t\t// ssao material\n\n\t\tthis.ssaoMaterial = new ShaderMaterial( {\n\t\t\tdefines: Object.assign( {}, SSAOShader.defines ),\n\t\t\tuniforms: UniformsUtils.clone( SSAOShader.uniforms ),\n\t\t\tvertexShader: SSAOShader.vertexShader,\n\t\t\tfragmentShader: SSAOShader.fragmentShader,\n\t\t\tblending: NoBlending\n\t\t} );\n\n\t\tthis.ssaoMaterial.uniforms[ 'tDiffuse' ].value = this.beautyRenderTarget.texture;\n\t\tthis.ssaoMaterial.uniforms[ 'tNormal' ].value = this.normalRenderTarget.texture;\n\t\tthis.ssaoMaterial.uniforms[ 'tDepth' ].value = this.normalRenderTarget.depthTexture;\n\t\tthis.ssaoMaterial.uniforms[ 'tNoise' ].value = this.noiseTexture;\n\t\tthis.ssaoMaterial.uniforms[ 'kernel' ].value = this.kernel;\n\t\tthis.ssaoMaterial.uniforms[ 'cameraNear' ].value = this.camera.near;\n\t\tthis.ssaoMaterial.uniforms[ 'cameraFar' ].value = this.camera.far;\n\t\tthis.ssaoMaterial.uniforms[ 'resolution' ].value.set( this.width, this.height );\n\t\tthis.ssaoMaterial.uniforms[ 'cameraProjectionMatrix' ].value.copy( this.camera.projectionMatrix );\n\t\tthis.ssaoMaterial.uniforms[ 'cameraInverseProjectionMatrix' ].value.copy( this.camera.projectionMatrixInverse );\n\n\t\t// normal material\n\n\t\tthis.normalMaterial = new MeshNormalMaterial();\n\t\tthis.normalMaterial.blending = NoBlending;\n\n\t\t// blur material\n\n\t\tthis.blurMaterial = new ShaderMaterial( {\n\t\t\tdefines: Object.assign( {}, SSAOBlurShader.defines ),\n\t\t\tuniforms: UniformsUtils.clone( SSAOBlurShader.uniforms ),\n\t\t\tvertexShader: SSAOBlurShader.vertexShader,\n\t\t\tfragmentShader: SSAOBlurShader.fragmentShader\n\t\t} );\n\t\tthis.blurMaterial.uniforms[ 'tDiffuse' ].value = this.ssaoRenderTarget.texture;\n\t\tthis.blurMaterial.uniforms[ 'resolution' ].value.set( this.width, this.height );\n\n\t\t// material for rendering the depth\n\n\t\tthis.depthRenderMaterial = new ShaderMaterial( {\n\t\t\tdefines: Object.assign( {}, SSAODepthShader.defines ),\n\t\t\tuniforms: UniformsUtils.clone( SSAODepthShader.uniforms ),\n\t\t\tvertexShader: SSAODepthShader.vertexShader,\n\t\t\tfragmentShader: SSAODepthShader.fragmentShader,\n\t\t\tblending: NoBlending\n\t\t} );\n\t\tthis.depthRenderMaterial.uniforms[ 'tDepth' ].value = this.normalRenderTarget.depthTexture;\n\t\tthis.depthRenderMaterial.uniforms[ 'cameraNear' ].value = this.camera.near;\n\t\tthis.depthRenderMaterial.uniforms[ 'cameraFar' ].value = this.camera.far;\n\n\t\t// material for rendering the content of a render target\n\n\t\tthis.copyMaterial = new ShaderMaterial( {\n\t\t\tuniforms: UniformsUtils.clone( CopyShader.uniforms ),\n\t\t\tvertexShader: CopyShader.vertexShader,\n\t\t\tfragmentShader: CopyShader.fragmentShader,\n\t\t\ttransparent: true,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\tblendSrc: DstColorFactor,\n\t\t\tblendDst: ZeroFactor,\n\t\t\tblendEquation: AddEquation,\n\t\t\tblendSrcAlpha: DstAlphaFactor,\n\t\t\tblendDstAlpha: ZeroFactor,\n\t\t\tblendEquationAlpha: AddEquation\n\t\t} );\n\n\t\tthis.fsQuad = new FullScreenQuad( null );\n\n\t\tthis.originalClearColor = new Color();\n\n\t}\n\n\tdispose() {\n\n\t\t// dispose render targets\n\n\t\tthis.beautyRenderTarget.dispose();\n\t\tthis.normalRenderTarget.dispose();\n\t\tthis.ssaoRenderTarget.dispose();\n\t\tthis.blurRenderTarget.dispose();\n\n\t\t// dispose materials\n\n\t\tthis.normalMaterial.dispose();\n\t\tthis.blurMaterial.dispose();\n\t\tthis.copyMaterial.dispose();\n\t\tthis.depthRenderMaterial.dispose();\n\n\t\t// dipsose full screen quad\n\n\t\tthis.fsQuad.dispose();\n\n\t}\n\n\trender( renderer, writeBuffer /*, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tif ( renderer.capabilities.isWebGL2 === false ) this.noiseTexture.format = LuminanceFormat;\n\n\t\t// render beauty\n\n\t\trenderer.setRenderTarget( this.beautyRenderTarget );\n\t\trenderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\t// render normals and depth (honor only meshes, points and lines do not contribute to SSAO)\n\n\t\tthis.overrideVisibility();\n\t\tthis.renderOverride( renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0 );\n\t\tthis.restoreVisibility();\n\n\t\t// render SSAO\n\n\t\tthis.ssaoMaterial.uniforms[ 'kernelRadius' ].value = this.kernelRadius;\n\t\tthis.ssaoMaterial.uniforms[ 'minDistance' ].value = this.minDistance;\n\t\tthis.ssaoMaterial.uniforms[ 'maxDistance' ].value = this.maxDistance;\n\t\tthis.renderPass( renderer, this.ssaoMaterial, this.ssaoRenderTarget );\n\n\t\t// render blur\n\n\t\tthis.renderPass( renderer, this.blurMaterial, this.blurRenderTarget );\n\n\t\t// output result to screen\n\n\t\tswitch ( this.output ) {\n\n\t\t\tcase SSAOPass.OUTPUT.SSAO:\n\n\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.ssaoRenderTarget.texture;\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tcase SSAOPass.OUTPUT.Blur:\n\n\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.blurRenderTarget.texture;\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tcase SSAOPass.OUTPUT.Beauty:\n\n\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.beautyRenderTarget.texture;\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tcase SSAOPass.OUTPUT.Depth:\n\n\t\t\t\tthis.renderPass( renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tcase SSAOPass.OUTPUT.Normal:\n\n\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.normalRenderTarget.texture;\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tcase SSAOPass.OUTPUT.Default:\n\n\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.beautyRenderTarget.texture;\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.blurRenderTarget.texture;\n\t\t\t\tthis.copyMaterial.blending = CustomBlending;\n\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn( 'THREE.SSAOPass: Unknown output type.' );\n\n\t\t}\n\n\t}\n\n\trenderPass( renderer, passMaterial, renderTarget, clearColor, clearAlpha ) {\n\n\t\t// save original state\n\t\trenderer.getClearColor( this.originalClearColor );\n\t\tconst originalClearAlpha = renderer.getClearAlpha();\n\t\tconst originalAutoClear = renderer.autoClear;\n\n\t\trenderer.setRenderTarget( renderTarget );\n\n\t\t// setup pass state\n\t\trenderer.autoClear = false;\n\t\tif ( ( clearColor !== undefined ) && ( clearColor !== null ) ) {\n\n\t\t\trenderer.setClearColor( clearColor );\n\t\t\trenderer.setClearAlpha( clearAlpha || 0.0 );\n\t\t\trenderer.clear();\n\n\t\t}\n\n\t\tthis.fsQuad.material = passMaterial;\n\t\tthis.fsQuad.render( renderer );\n\n\t\t// restore original state\n\t\trenderer.autoClear = originalAutoClear;\n\t\trenderer.setClearColor( this.originalClearColor );\n\t\trenderer.setClearAlpha( originalClearAlpha );\n\n\t}\n\n\trenderOverride( renderer, overrideMaterial, renderTarget, clearColor, clearAlpha ) {\n\n\t\trenderer.getClearColor( this.originalClearColor );\n\t\tconst originalClearAlpha = renderer.getClearAlpha();\n\t\tconst originalAutoClear = renderer.autoClear;\n\n\t\trenderer.setRenderTarget( renderTarget );\n\t\trenderer.autoClear = false;\n\n\t\tclearColor = overrideMaterial.clearColor || clearColor;\n\t\tclearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\n\t\tif ( ( clearColor !== undefined ) && ( clearColor !== null ) ) {\n\n\t\t\trenderer.setClearColor( clearColor );\n\t\t\trenderer.setClearAlpha( clearAlpha || 0.0 );\n\t\t\trenderer.clear();\n\n\t\t}\n\n\t\tthis.scene.overrideMaterial = overrideMaterial;\n\t\trenderer.render( this.scene, this.camera );\n\t\tthis.scene.overrideMaterial = null;\n\n\t\t// restore original state\n\n\t\trenderer.autoClear = originalAutoClear;\n\t\trenderer.setClearColor( this.originalClearColor );\n\t\trenderer.setClearAlpha( originalClearAlpha );\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\n\t\tthis.beautyRenderTarget.setSize( width, height );\n\t\tthis.ssaoRenderTarget.setSize( width, height );\n\t\tthis.normalRenderTarget.setSize( width, height );\n\t\tthis.blurRenderTarget.setSize( width, height );\n\n\t\tthis.ssaoMaterial.uniforms[ 'resolution' ].value.set( width, height );\n\t\tthis.ssaoMaterial.uniforms[ 'cameraProjectionMatrix' ].value.copy( this.camera.projectionMatrix );\n\t\tthis.ssaoMaterial.uniforms[ 'cameraInverseProjectionMatrix' ].value.copy( this.camera.projectionMatrixInverse );\n\n\t\tthis.blurMaterial.uniforms[ 'resolution' ].value.set( width, height );\n\n\t}\n\n\tgenerateSampleKernel() {\n\n\t\tconst kernelSize = this.kernelSize;\n\t\tconst kernel = this.kernel;\n\n\t\tfor ( let i = 0; i < kernelSize; i ++ ) {\n\n\t\t\tconst sample = new Vector3();\n\t\t\tsample.x = ( Math.random() * 2 ) - 1;\n\t\t\tsample.y = ( Math.random() * 2 ) - 1;\n\t\t\tsample.z = Math.random();\n\n\t\t\tsample.normalize();\n\n\t\t\tlet scale = i / kernelSize;\n\t\t\tscale = MathUtils.lerp( 0.1, 1, scale * scale );\n\t\t\tsample.multiplyScalar( scale );\n\n\t\t\tkernel.push( sample );\n\n\t\t}\n\n\t}\n\n\tgenerateRandomKernelRotations() {\n\n\t\tconst width = 4, height = 4;\n\n\t\tconst simplex = new SimplexNoise();\n\n\t\tconst size = width * height;\n\t\tconst data = new Float32Array( size );\n\n\t\tfor ( let i = 0; i < size; i ++ ) {\n\n\t\t\tconst x = ( Math.random() * 2 ) - 1;\n\t\t\tconst y = ( Math.random() * 2 ) - 1;\n\t\t\tconst z = 0;\n\n\t\t\tdata[ i ] = simplex.noise3d( x, y, z );\n\n\t\t}\n\n\t\tthis.noiseTexture = new DataTexture( data, width, height, RedFormat, FloatType );\n\t\tthis.noiseTexture.wrapS = RepeatWrapping;\n\t\tthis.noiseTexture.wrapT = RepeatWrapping;\n\t\tthis.noiseTexture.needsUpdate = true;\n\n\t}\n\n\toverrideVisibility() {\n\n\t\tconst scene = this.scene;\n\t\tconst cache = this._visibilityCache;\n\n\t\tscene.traverse( function ( object ) {\n\n\t\t\tcache.set( object, object.visible );\n\n\t\t\tif ( object.isPoints || object.isLine ) object.visible = false;\n\n\t\t} );\n\n\t}\n\n\trestoreVisibility() {\n\n\t\tconst scene = this.scene;\n\t\tconst cache = this._visibilityCache;\n\n\t\tscene.traverse( function ( object ) {\n\n\t\t\tconst visible = cache.get( object );\n\t\t\tobject.visible = visible;\n\n\t\t} );\n\n\t\tcache.clear();\n\n\t}\n\n}\n\nSSAOPass.OUTPUT = {\n\t'Default': 0,\n\t'SSAO': 1,\n\t'Blur': 2,\n\t'Beauty': 3,\n\t'Depth': 4,\n\t'Normal': 5\n};\n\nexport { SSAOPass };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}