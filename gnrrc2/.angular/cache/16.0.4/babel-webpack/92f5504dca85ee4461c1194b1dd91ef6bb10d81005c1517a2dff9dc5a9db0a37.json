{"ast":null,"code":"import { AddEquation, Color, CustomBlending, DepthTexture, DstAlphaFactor, DstColorFactor, HalfFloatType, MeshDepthMaterial, MeshNormalMaterial, NearestFilter, NoBlending, RGBADepthPacking, ShaderMaterial, UniformsUtils, UnsignedShortType, Vector2, WebGLRenderTarget, ZeroFactor } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { SAOShader } from '../shaders/SAOShader.js';\nimport { DepthLimitedBlurShader } from '../shaders/DepthLimitedBlurShader.js';\nimport { BlurShaderUtils } from '../shaders/DepthLimitedBlurShader.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { UnpackDepthRGBAShader } from '../shaders/UnpackDepthRGBAShader.js';\n\n/**\n * SAO implementation inspired from bhouston previous SAO work\n */\n\nclass SAOPass extends Pass {\n  constructor(scene, camera, useDepthTexture = false, useNormals = false, resolution = new Vector2(256, 256)) {\n    super();\n    this.scene = scene;\n    this.camera = camera;\n    this.clear = true;\n    this.needsSwap = false;\n    this.supportsDepthTextureExtension = useDepthTexture;\n    this.supportsNormalTexture = useNormals;\n    this.originalClearColor = new Color();\n    this._oldClearColor = new Color();\n    this.oldClearAlpha = 1;\n    this.params = {\n      output: 0,\n      saoBias: 0.5,\n      saoIntensity: 0.18,\n      saoScale: 1,\n      saoKernelRadius: 100,\n      saoMinResolution: 0,\n      saoBlur: true,\n      saoBlurRadius: 8,\n      saoBlurStdDev: 4,\n      saoBlurDepthCutoff: 0.01\n    };\n    this.resolution = new Vector2(resolution.x, resolution.y);\n    this.saoRenderTarget = new WebGLRenderTarget(this.resolution.x, this.resolution.y, {\n      type: HalfFloatType\n    });\n    this.blurIntermediateRenderTarget = this.saoRenderTarget.clone();\n    this.beautyRenderTarget = this.saoRenderTarget.clone();\n    this.normalRenderTarget = new WebGLRenderTarget(this.resolution.x, this.resolution.y, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType\n    });\n    this.depthRenderTarget = this.normalRenderTarget.clone();\n    let depthTexture;\n    if (this.supportsDepthTextureExtension) {\n      depthTexture = new DepthTexture();\n      depthTexture.type = UnsignedShortType;\n      this.beautyRenderTarget.depthTexture = depthTexture;\n      this.beautyRenderTarget.depthBuffer = true;\n    }\n    this.depthMaterial = new MeshDepthMaterial();\n    this.depthMaterial.depthPacking = RGBADepthPacking;\n    this.depthMaterial.blending = NoBlending;\n    this.normalMaterial = new MeshNormalMaterial();\n    this.normalMaterial.blending = NoBlending;\n    this.saoMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SAOShader.defines),\n      fragmentShader: SAOShader.fragmentShader,\n      vertexShader: SAOShader.vertexShader,\n      uniforms: UniformsUtils.clone(SAOShader.uniforms)\n    });\n    this.saoMaterial.extensions.derivatives = true;\n    this.saoMaterial.defines['DEPTH_PACKING'] = this.supportsDepthTextureExtension ? 0 : 1;\n    this.saoMaterial.defines['NORMAL_TEXTURE'] = this.supportsNormalTexture ? 1 : 0;\n    this.saoMaterial.defines['PERSPECTIVE_CAMERA'] = this.camera.isPerspectiveCamera ? 1 : 0;\n    this.saoMaterial.uniforms['tDepth'].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\n    this.saoMaterial.uniforms['tNormal'].value = this.normalRenderTarget.texture;\n    this.saoMaterial.uniforms['size'].value.set(this.resolution.x, this.resolution.y);\n    this.saoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\n    this.saoMaterial.uniforms['cameraProjectionMatrix'].value = this.camera.projectionMatrix;\n    this.saoMaterial.blending = NoBlending;\n    this.vBlurMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(DepthLimitedBlurShader.uniforms),\n      defines: Object.assign({}, DepthLimitedBlurShader.defines),\n      vertexShader: DepthLimitedBlurShader.vertexShader,\n      fragmentShader: DepthLimitedBlurShader.fragmentShader\n    });\n    this.vBlurMaterial.defines['DEPTH_PACKING'] = this.supportsDepthTextureExtension ? 0 : 1;\n    this.vBlurMaterial.defines['PERSPECTIVE_CAMERA'] = this.camera.isPerspectiveCamera ? 1 : 0;\n    this.vBlurMaterial.uniforms['tDiffuse'].value = this.saoRenderTarget.texture;\n    this.vBlurMaterial.uniforms['tDepth'].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\n    this.vBlurMaterial.uniforms['size'].value.set(this.resolution.x, this.resolution.y);\n    this.vBlurMaterial.blending = NoBlending;\n    this.hBlurMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(DepthLimitedBlurShader.uniforms),\n      defines: Object.assign({}, DepthLimitedBlurShader.defines),\n      vertexShader: DepthLimitedBlurShader.vertexShader,\n      fragmentShader: DepthLimitedBlurShader.fragmentShader\n    });\n    this.hBlurMaterial.defines['DEPTH_PACKING'] = this.supportsDepthTextureExtension ? 0 : 1;\n    this.hBlurMaterial.defines['PERSPECTIVE_CAMERA'] = this.camera.isPerspectiveCamera ? 1 : 0;\n    this.hBlurMaterial.uniforms['tDiffuse'].value = this.blurIntermediateRenderTarget.texture;\n    this.hBlurMaterial.uniforms['tDepth'].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\n    this.hBlurMaterial.uniforms['size'].value.set(this.resolution.x, this.resolution.y);\n    this.hBlurMaterial.blending = NoBlending;\n    this.materialCopy = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.materialCopy.transparent = true;\n    this.materialCopy.depthTest = false;\n    this.materialCopy.depthWrite = false;\n    this.materialCopy.blending = CustomBlending;\n    this.materialCopy.blendSrc = DstColorFactor;\n    this.materialCopy.blendDst = ZeroFactor;\n    this.materialCopy.blendEquation = AddEquation;\n    this.materialCopy.blendSrcAlpha = DstAlphaFactor;\n    this.materialCopy.blendDstAlpha = ZeroFactor;\n    this.materialCopy.blendEquationAlpha = AddEquation;\n    this.depthCopy = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(UnpackDepthRGBAShader.uniforms),\n      vertexShader: UnpackDepthRGBAShader.vertexShader,\n      fragmentShader: UnpackDepthRGBAShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.fsQuad = new FullScreenQuad(null);\n  }\n  render(renderer, writeBuffer, readBuffer /*, deltaTime, maskActive*/) {\n    // Rendering readBuffer first when rendering to screen\n    if (this.renderToScreen) {\n      this.materialCopy.blending = NoBlending;\n      this.materialCopy.uniforms['tDiffuse'].value = readBuffer.texture;\n      this.materialCopy.needsUpdate = true;\n      this.renderPass(renderer, this.materialCopy, null);\n    }\n    if (this.params.output === 1) {\n      return;\n    }\n    renderer.getClearColor(this._oldClearColor);\n    this.oldClearAlpha = renderer.getClearAlpha();\n    const oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    renderer.setRenderTarget(this.depthRenderTarget);\n    renderer.clear();\n    this.saoMaterial.uniforms['bias'].value = this.params.saoBias;\n    this.saoMaterial.uniforms['intensity'].value = this.params.saoIntensity;\n    this.saoMaterial.uniforms['scale'].value = this.params.saoScale;\n    this.saoMaterial.uniforms['kernelRadius'].value = this.params.saoKernelRadius;\n    this.saoMaterial.uniforms['minResolution'].value = this.params.saoMinResolution;\n    this.saoMaterial.uniforms['cameraNear'].value = this.camera.near;\n    this.saoMaterial.uniforms['cameraFar'].value = this.camera.far;\n    // this.saoMaterial.uniforms['randomSeed'].value = Math.random();\n\n    const depthCutoff = this.params.saoBlurDepthCutoff * (this.camera.far - this.camera.near);\n    this.vBlurMaterial.uniforms['depthCutoff'].value = depthCutoff;\n    this.hBlurMaterial.uniforms['depthCutoff'].value = depthCutoff;\n    this.vBlurMaterial.uniforms['cameraNear'].value = this.camera.near;\n    this.vBlurMaterial.uniforms['cameraFar'].value = this.camera.far;\n    this.hBlurMaterial.uniforms['cameraNear'].value = this.camera.near;\n    this.hBlurMaterial.uniforms['cameraFar'].value = this.camera.far;\n    this.params.saoBlurRadius = Math.floor(this.params.saoBlurRadius);\n    if (this.prevStdDev !== this.params.saoBlurStdDev || this.prevNumSamples !== this.params.saoBlurRadius) {\n      BlurShaderUtils.configure(this.vBlurMaterial, this.params.saoBlurRadius, this.params.saoBlurStdDev, new Vector2(0, 1));\n      BlurShaderUtils.configure(this.hBlurMaterial, this.params.saoBlurRadius, this.params.saoBlurStdDev, new Vector2(1, 0));\n      this.prevStdDev = this.params.saoBlurStdDev;\n      this.prevNumSamples = this.params.saoBlurRadius;\n    }\n\n    // Rendering scene to depth texture\n    renderer.setClearColor(0x000000);\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n    renderer.render(this.scene, this.camera);\n\n    // Re-render scene if depth texture extension is not supported\n    if (!this.supportsDepthTextureExtension) {\n      // Clear rule : far clipping plane in both RGBA and Basic encoding\n      this.renderOverride(renderer, this.depthMaterial, this.depthRenderTarget, 0x000000, 1.0);\n    }\n    if (this.supportsNormalTexture) {\n      // Clear rule : default normal is facing the camera\n      this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0);\n    }\n\n    // Rendering SAO texture\n    this.renderPass(renderer, this.saoMaterial, this.saoRenderTarget, 0xffffff, 1.0);\n\n    // Blurring SAO texture\n    if (this.params.saoBlur) {\n      this.renderPass(renderer, this.vBlurMaterial, this.blurIntermediateRenderTarget, 0xffffff, 1.0);\n      this.renderPass(renderer, this.hBlurMaterial, this.saoRenderTarget, 0xffffff, 1.0);\n    }\n    let outputMaterial = this.materialCopy;\n    // Setting up SAO rendering\n    if (this.params.output === 3) {\n      if (this.supportsDepthTextureExtension) {\n        this.materialCopy.uniforms['tDiffuse'].value = this.beautyRenderTarget.depthTexture;\n        this.materialCopy.needsUpdate = true;\n      } else {\n        this.depthCopy.uniforms['tDiffuse'].value = this.depthRenderTarget.texture;\n        this.depthCopy.needsUpdate = true;\n        outputMaterial = this.depthCopy;\n      }\n    } else if (this.params.output === 4) {\n      this.materialCopy.uniforms['tDiffuse'].value = this.normalRenderTarget.texture;\n      this.materialCopy.needsUpdate = true;\n    } else {\n      this.materialCopy.uniforms['tDiffuse'].value = this.saoRenderTarget.texture;\n      this.materialCopy.needsUpdate = true;\n    }\n\n    // Blending depends on output, only want a CustomBlending when showing SAO\n    if (this.params.output === 0) {\n      outputMaterial.blending = CustomBlending;\n    } else {\n      outputMaterial.blending = NoBlending;\n    }\n\n    // Rendering SAOPass result on top of previous pass\n    this.renderPass(renderer, outputMaterial, this.renderToScreen ? null : readBuffer);\n    renderer.setClearColor(this._oldClearColor, this.oldClearAlpha);\n    renderer.autoClear = oldAutoClear;\n  }\n  renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    // save original state\n    renderer.getClearColor(this.originalClearColor);\n    const originalClearAlpha = renderer.getClearAlpha();\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n\n    // setup pass state\n    renderer.autoClear = false;\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer);\n\n    // restore original state\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    const originalClearAlpha = renderer.getClearAlpha();\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null;\n\n    // restore original state\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  setSize(width, height) {\n    this.beautyRenderTarget.setSize(width, height);\n    this.saoRenderTarget.setSize(width, height);\n    this.blurIntermediateRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height);\n    this.depthRenderTarget.setSize(width, height);\n    this.saoMaterial.uniforms['size'].value.set(width, height);\n    this.saoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\n    this.saoMaterial.uniforms['cameraProjectionMatrix'].value = this.camera.projectionMatrix;\n    this.saoMaterial.needsUpdate = true;\n    this.vBlurMaterial.uniforms['size'].value.set(width, height);\n    this.vBlurMaterial.needsUpdate = true;\n    this.hBlurMaterial.uniforms['size'].value.set(width, height);\n    this.hBlurMaterial.needsUpdate = true;\n  }\n  dispose() {\n    this.saoRenderTarget.dispose();\n    this.blurIntermediateRenderTarget.dispose();\n    this.beautyRenderTarget.dispose();\n    this.normalRenderTarget.dispose();\n    this.depthRenderTarget.dispose();\n    this.depthMaterial.dispose();\n    this.normalMaterial.dispose();\n    this.saoMaterial.dispose();\n    this.vBlurMaterial.dispose();\n    this.hBlurMaterial.dispose();\n    this.materialCopy.dispose();\n    this.depthCopy.dispose();\n    this.fsQuad.dispose();\n  }\n}\nSAOPass.OUTPUT = {\n  'Beauty': 1,\n  'Default': 0,\n  'SAO': 2,\n  'Depth': 3,\n  'Normal': 4\n};\nexport { SAOPass };","map":{"version":3,"names":["AddEquation","Color","CustomBlending","DepthTexture","DstAlphaFactor","DstColorFactor","HalfFloatType","MeshDepthMaterial","MeshNormalMaterial","NearestFilter","NoBlending","RGBADepthPacking","ShaderMaterial","UniformsUtils","UnsignedShortType","Vector2","WebGLRenderTarget","ZeroFactor","Pass","FullScreenQuad","SAOShader","DepthLimitedBlurShader","BlurShaderUtils","CopyShader","UnpackDepthRGBAShader","SAOPass","constructor","scene","camera","useDepthTexture","useNormals","resolution","clear","needsSwap","supportsDepthTextureExtension","supportsNormalTexture","originalClearColor","_oldClearColor","oldClearAlpha","params","output","saoBias","saoIntensity","saoScale","saoKernelRadius","saoMinResolution","saoBlur","saoBlurRadius","saoBlurStdDev","saoBlurDepthCutoff","x","y","saoRenderTarget","type","blurIntermediateRenderTarget","clone","beautyRenderTarget","normalRenderTarget","minFilter","magFilter","depthRenderTarget","depthTexture","depthBuffer","depthMaterial","depthPacking","blending","normalMaterial","saoMaterial","defines","Object","assign","fragmentShader","vertexShader","uniforms","extensions","derivatives","isPerspectiveCamera","value","texture","set","copy","projectionMatrixInverse","projectionMatrix","vBlurMaterial","hBlurMaterial","materialCopy","transparent","depthTest","depthWrite","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthCopy","fsQuad","render","renderer","writeBuffer","readBuffer","renderToScreen","needsUpdate","renderPass","getClearColor","getClearAlpha","oldAutoClear","autoClear","setRenderTarget","near","far","depthCutoff","Math","floor","prevStdDev","prevNumSamples","configure","setClearColor","renderOverride","outputMaterial","passMaterial","renderTarget","clearColor","clearAlpha","originalClearAlpha","originalAutoClear","undefined","setClearAlpha","material","overrideMaterial","setSize","width","height","dispose","OUTPUT"],"sources":["C:/Users/bozok/Desktop/AngularProject/gnrrc2/node_modules/three/examples/jsm/postprocessing/SAOPass.js"],"sourcesContent":["import {\n\tAddEquation,\n\tColor,\n\tCustomBlending,\n\tDepthTexture,\n\tDstAlphaFactor,\n\tDstColorFactor,\n\tHalfFloatType,\n\tMeshDepthMaterial,\n\tMeshNormalMaterial,\n\tNearestFilter,\n\tNoBlending,\n\tRGBADepthPacking,\n\tShaderMaterial,\n\tUniformsUtils,\n\tUnsignedShortType,\n\tVector2,\n\tWebGLRenderTarget,\n\tZeroFactor\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { SAOShader } from '../shaders/SAOShader.js';\nimport { DepthLimitedBlurShader } from '../shaders/DepthLimitedBlurShader.js';\nimport { BlurShaderUtils } from '../shaders/DepthLimitedBlurShader.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { UnpackDepthRGBAShader } from '../shaders/UnpackDepthRGBAShader.js';\n\n/**\n * SAO implementation inspired from bhouston previous SAO work\n */\n\nclass SAOPass extends Pass {\n\n\tconstructor( scene, camera, useDepthTexture = false, useNormals = false, resolution = new Vector2( 256, 256 ) ) {\n\n\t\tsuper();\n\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\n\t\tthis.clear = true;\n\t\tthis.needsSwap = false;\n\n\t\tthis.supportsDepthTextureExtension = useDepthTexture;\n\t\tthis.supportsNormalTexture = useNormals;\n\n\t\tthis.originalClearColor = new Color();\n\t\tthis._oldClearColor = new Color();\n\t\tthis.oldClearAlpha = 1;\n\n\t\tthis.params = {\n\t\t\toutput: 0,\n\t\t\tsaoBias: 0.5,\n\t\t\tsaoIntensity: 0.18,\n\t\t\tsaoScale: 1,\n\t\t\tsaoKernelRadius: 100,\n\t\t\tsaoMinResolution: 0,\n\t\t\tsaoBlur: true,\n\t\t\tsaoBlurRadius: 8,\n\t\t\tsaoBlurStdDev: 4,\n\t\t\tsaoBlurDepthCutoff: 0.01\n\t\t};\n\n\t\tthis.resolution = new Vector2( resolution.x, resolution.y );\n\n\t\tthis.saoRenderTarget = new WebGLRenderTarget( this.resolution.x, this.resolution.y, { type: HalfFloatType } );\n\t\tthis.blurIntermediateRenderTarget = this.saoRenderTarget.clone();\n\t\tthis.beautyRenderTarget = this.saoRenderTarget.clone();\n\n\t\tthis.normalRenderTarget = new WebGLRenderTarget( this.resolution.x, this.resolution.y, {\n\t\t\tminFilter: NearestFilter,\n\t\t\tmagFilter: NearestFilter,\n\t\t\ttype: HalfFloatType\n\t\t} );\n\t\tthis.depthRenderTarget = this.normalRenderTarget.clone();\n\n\t\tlet depthTexture;\n\n\t\tif ( this.supportsDepthTextureExtension ) {\n\n\t\t\tdepthTexture = new DepthTexture();\n\t\t\tdepthTexture.type = UnsignedShortType;\n\n\t\t\tthis.beautyRenderTarget.depthTexture = depthTexture;\n\t\t\tthis.beautyRenderTarget.depthBuffer = true;\n\n\t\t}\n\n\t\tthis.depthMaterial = new MeshDepthMaterial();\n\t\tthis.depthMaterial.depthPacking = RGBADepthPacking;\n\t\tthis.depthMaterial.blending = NoBlending;\n\n\t\tthis.normalMaterial = new MeshNormalMaterial();\n\t\tthis.normalMaterial.blending = NoBlending;\n\n\t\tthis.saoMaterial = new ShaderMaterial( {\n\t\t\tdefines: Object.assign( {}, SAOShader.defines ),\n\t\t\tfragmentShader: SAOShader.fragmentShader,\n\t\t\tvertexShader: SAOShader.vertexShader,\n\t\t\tuniforms: UniformsUtils.clone( SAOShader.uniforms )\n\t\t} );\n\t\tthis.saoMaterial.extensions.derivatives = true;\n\t\tthis.saoMaterial.defines[ 'DEPTH_PACKING' ] = this.supportsDepthTextureExtension ? 0 : 1;\n\t\tthis.saoMaterial.defines[ 'NORMAL_TEXTURE' ] = this.supportsNormalTexture ? 1 : 0;\n\t\tthis.saoMaterial.defines[ 'PERSPECTIVE_CAMERA' ] = this.camera.isPerspectiveCamera ? 1 : 0;\n\t\tthis.saoMaterial.uniforms[ 'tDepth' ].value = ( this.supportsDepthTextureExtension ) ? depthTexture : this.depthRenderTarget.texture;\n\t\tthis.saoMaterial.uniforms[ 'tNormal' ].value = this.normalRenderTarget.texture;\n\t\tthis.saoMaterial.uniforms[ 'size' ].value.set( this.resolution.x, this.resolution.y );\n\t\tthis.saoMaterial.uniforms[ 'cameraInverseProjectionMatrix' ].value.copy( this.camera.projectionMatrixInverse );\n\t\tthis.saoMaterial.uniforms[ 'cameraProjectionMatrix' ].value = this.camera.projectionMatrix;\n\t\tthis.saoMaterial.blending = NoBlending;\n\n\t\tthis.vBlurMaterial = new ShaderMaterial( {\n\t\t\tuniforms: UniformsUtils.clone( DepthLimitedBlurShader.uniforms ),\n\t\t\tdefines: Object.assign( {}, DepthLimitedBlurShader.defines ),\n\t\t\tvertexShader: DepthLimitedBlurShader.vertexShader,\n\t\t\tfragmentShader: DepthLimitedBlurShader.fragmentShader\n\t\t} );\n\t\tthis.vBlurMaterial.defines[ 'DEPTH_PACKING' ] = this.supportsDepthTextureExtension ? 0 : 1;\n\t\tthis.vBlurMaterial.defines[ 'PERSPECTIVE_CAMERA' ] = this.camera.isPerspectiveCamera ? 1 : 0;\n\t\tthis.vBlurMaterial.uniforms[ 'tDiffuse' ].value = this.saoRenderTarget.texture;\n\t\tthis.vBlurMaterial.uniforms[ 'tDepth' ].value = ( this.supportsDepthTextureExtension ) ? depthTexture : this.depthRenderTarget.texture;\n\t\tthis.vBlurMaterial.uniforms[ 'size' ].value.set( this.resolution.x, this.resolution.y );\n\t\tthis.vBlurMaterial.blending = NoBlending;\n\n\t\tthis.hBlurMaterial = new ShaderMaterial( {\n\t\t\tuniforms: UniformsUtils.clone( DepthLimitedBlurShader.uniforms ),\n\t\t\tdefines: Object.assign( {}, DepthLimitedBlurShader.defines ),\n\t\t\tvertexShader: DepthLimitedBlurShader.vertexShader,\n\t\t\tfragmentShader: DepthLimitedBlurShader.fragmentShader\n\t\t} );\n\t\tthis.hBlurMaterial.defines[ 'DEPTH_PACKING' ] = this.supportsDepthTextureExtension ? 0 : 1;\n\t\tthis.hBlurMaterial.defines[ 'PERSPECTIVE_CAMERA' ] = this.camera.isPerspectiveCamera ? 1 : 0;\n\t\tthis.hBlurMaterial.uniforms[ 'tDiffuse' ].value = this.blurIntermediateRenderTarget.texture;\n\t\tthis.hBlurMaterial.uniforms[ 'tDepth' ].value = ( this.supportsDepthTextureExtension ) ? depthTexture : this.depthRenderTarget.texture;\n\t\tthis.hBlurMaterial.uniforms[ 'size' ].value.set( this.resolution.x, this.resolution.y );\n\t\tthis.hBlurMaterial.blending = NoBlending;\n\n\t\tthis.materialCopy = new ShaderMaterial( {\n\t\t\tuniforms: UniformsUtils.clone( CopyShader.uniforms ),\n\t\t\tvertexShader: CopyShader.vertexShader,\n\t\t\tfragmentShader: CopyShader.fragmentShader,\n\t\t\tblending: NoBlending\n\t\t} );\n\t\tthis.materialCopy.transparent = true;\n\t\tthis.materialCopy.depthTest = false;\n\t\tthis.materialCopy.depthWrite = false;\n\t\tthis.materialCopy.blending = CustomBlending;\n\t\tthis.materialCopy.blendSrc = DstColorFactor;\n\t\tthis.materialCopy.blendDst = ZeroFactor;\n\t\tthis.materialCopy.blendEquation = AddEquation;\n\t\tthis.materialCopy.blendSrcAlpha = DstAlphaFactor;\n\t\tthis.materialCopy.blendDstAlpha = ZeroFactor;\n\t\tthis.materialCopy.blendEquationAlpha = AddEquation;\n\n\t\tthis.depthCopy = new ShaderMaterial( {\n\t\t\tuniforms: UniformsUtils.clone( UnpackDepthRGBAShader.uniforms ),\n\t\t\tvertexShader: UnpackDepthRGBAShader.vertexShader,\n\t\t\tfragmentShader: UnpackDepthRGBAShader.fragmentShader,\n\t\t\tblending: NoBlending\n\t\t} );\n\n\t\tthis.fsQuad = new FullScreenQuad( null );\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer/*, deltaTime, maskActive*/ ) {\n\n\t\t// Rendering readBuffer first when rendering to screen\n\t\tif ( this.renderToScreen ) {\n\n\t\t\tthis.materialCopy.blending = NoBlending;\n\t\t\tthis.materialCopy.uniforms[ 'tDiffuse' ].value = readBuffer.texture;\n\t\t\tthis.materialCopy.needsUpdate = true;\n\t\t\tthis.renderPass( renderer, this.materialCopy, null );\n\n\t\t}\n\n\t\tif ( this.params.output === 1 ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\trenderer.getClearColor( this._oldClearColor );\n\t\tthis.oldClearAlpha = renderer.getClearAlpha();\n\t\tconst oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\trenderer.setRenderTarget( this.depthRenderTarget );\n\t\trenderer.clear();\n\n\t\tthis.saoMaterial.uniforms[ 'bias' ].value = this.params.saoBias;\n\t\tthis.saoMaterial.uniforms[ 'intensity' ].value = this.params.saoIntensity;\n\t\tthis.saoMaterial.uniforms[ 'scale' ].value = this.params.saoScale;\n\t\tthis.saoMaterial.uniforms[ 'kernelRadius' ].value = this.params.saoKernelRadius;\n\t\tthis.saoMaterial.uniforms[ 'minResolution' ].value = this.params.saoMinResolution;\n\t\tthis.saoMaterial.uniforms[ 'cameraNear' ].value = this.camera.near;\n\t\tthis.saoMaterial.uniforms[ 'cameraFar' ].value = this.camera.far;\n\t\t// this.saoMaterial.uniforms['randomSeed'].value = Math.random();\n\n\t\tconst depthCutoff = this.params.saoBlurDepthCutoff * ( this.camera.far - this.camera.near );\n\t\tthis.vBlurMaterial.uniforms[ 'depthCutoff' ].value = depthCutoff;\n\t\tthis.hBlurMaterial.uniforms[ 'depthCutoff' ].value = depthCutoff;\n\n\t\tthis.vBlurMaterial.uniforms[ 'cameraNear' ].value = this.camera.near;\n\t\tthis.vBlurMaterial.uniforms[ 'cameraFar' ].value = this.camera.far;\n\t\tthis.hBlurMaterial.uniforms[ 'cameraNear' ].value = this.camera.near;\n\t\tthis.hBlurMaterial.uniforms[ 'cameraFar' ].value = this.camera.far;\n\n\t\tthis.params.saoBlurRadius = Math.floor( this.params.saoBlurRadius );\n\t\tif ( ( this.prevStdDev !== this.params.saoBlurStdDev ) || ( this.prevNumSamples !== this.params.saoBlurRadius ) ) {\n\n\t\t\tBlurShaderUtils.configure( this.vBlurMaterial, this.params.saoBlurRadius, this.params.saoBlurStdDev, new Vector2( 0, 1 ) );\n\t\t\tBlurShaderUtils.configure( this.hBlurMaterial, this.params.saoBlurRadius, this.params.saoBlurStdDev, new Vector2( 1, 0 ) );\n\t\t\tthis.prevStdDev = this.params.saoBlurStdDev;\n\t\t\tthis.prevNumSamples = this.params.saoBlurRadius;\n\n\t\t}\n\n\t\t// Rendering scene to depth texture\n\t\trenderer.setClearColor( 0x000000 );\n\t\trenderer.setRenderTarget( this.beautyRenderTarget );\n\t\trenderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\t// Re-render scene if depth texture extension is not supported\n\t\tif ( ! this.supportsDepthTextureExtension ) {\n\n\t\t\t// Clear rule : far clipping plane in both RGBA and Basic encoding\n\t\t\tthis.renderOverride( renderer, this.depthMaterial, this.depthRenderTarget, 0x000000, 1.0 );\n\n\t\t}\n\n\t\tif ( this.supportsNormalTexture ) {\n\n\t\t\t// Clear rule : default normal is facing the camera\n\t\t\tthis.renderOverride( renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0 );\n\n\t\t}\n\n\t\t// Rendering SAO texture\n\t\tthis.renderPass( renderer, this.saoMaterial, this.saoRenderTarget, 0xffffff, 1.0 );\n\n\t\t// Blurring SAO texture\n\t\tif ( this.params.saoBlur ) {\n\n\t\t\tthis.renderPass( renderer, this.vBlurMaterial, this.blurIntermediateRenderTarget, 0xffffff, 1.0 );\n\t\t\tthis.renderPass( renderer, this.hBlurMaterial, this.saoRenderTarget, 0xffffff, 1.0 );\n\n\t\t}\n\n\t\tlet outputMaterial = this.materialCopy;\n\t\t// Setting up SAO rendering\n\t\tif ( this.params.output === 3 ) {\n\n\t\t\tif ( this.supportsDepthTextureExtension ) {\n\n\t\t\t\tthis.materialCopy.uniforms[ 'tDiffuse' ].value = this.beautyRenderTarget.depthTexture;\n\t\t\t\tthis.materialCopy.needsUpdate = true;\n\n\t\t\t} else {\n\n\t\t\t\tthis.depthCopy.uniforms[ 'tDiffuse' ].value = this.depthRenderTarget.texture;\n\t\t\t\tthis.depthCopy.needsUpdate = true;\n\t\t\t\toutputMaterial = this.depthCopy;\n\n\t\t\t}\n\n\t\t} else if ( this.params.output === 4 ) {\n\n\t\t\tthis.materialCopy.uniforms[ 'tDiffuse' ].value = this.normalRenderTarget.texture;\n\t\t\tthis.materialCopy.needsUpdate = true;\n\n\t\t} else {\n\n\t\t\tthis.materialCopy.uniforms[ 'tDiffuse' ].value = this.saoRenderTarget.texture;\n\t\t\tthis.materialCopy.needsUpdate = true;\n\n\t\t}\n\n\t\t// Blending depends on output, only want a CustomBlending when showing SAO\n\t\tif ( this.params.output === 0 ) {\n\n\t\t\toutputMaterial.blending = CustomBlending;\n\n\t\t} else {\n\n\t\t\toutputMaterial.blending = NoBlending;\n\n\t\t}\n\n\t\t// Rendering SAOPass result on top of previous pass\n\t\tthis.renderPass( renderer, outputMaterial, this.renderToScreen ? null : readBuffer );\n\n\t\trenderer.setClearColor( this._oldClearColor, this.oldClearAlpha );\n\t\trenderer.autoClear = oldAutoClear;\n\n\t}\n\n\trenderPass( renderer, passMaterial, renderTarget, clearColor, clearAlpha ) {\n\n\t\t// save original state\n\t\trenderer.getClearColor( this.originalClearColor );\n\t\tconst originalClearAlpha = renderer.getClearAlpha();\n\t\tconst originalAutoClear = renderer.autoClear;\n\n\t\trenderer.setRenderTarget( renderTarget );\n\n\t\t// setup pass state\n\t\trenderer.autoClear = false;\n\t\tif ( ( clearColor !== undefined ) && ( clearColor !== null ) ) {\n\n\t\t\trenderer.setClearColor( clearColor );\n\t\t\trenderer.setClearAlpha( clearAlpha || 0.0 );\n\t\t\trenderer.clear();\n\n\t\t}\n\n\t\tthis.fsQuad.material = passMaterial;\n\t\tthis.fsQuad.render( renderer );\n\n\t\t// restore original state\n\t\trenderer.autoClear = originalAutoClear;\n\t\trenderer.setClearColor( this.originalClearColor );\n\t\trenderer.setClearAlpha( originalClearAlpha );\n\n\t}\n\n\trenderOverride( renderer, overrideMaterial, renderTarget, clearColor, clearAlpha ) {\n\n\t\trenderer.getClearColor( this.originalClearColor );\n\t\tconst originalClearAlpha = renderer.getClearAlpha();\n\t\tconst originalAutoClear = renderer.autoClear;\n\n\t\trenderer.setRenderTarget( renderTarget );\n\t\trenderer.autoClear = false;\n\n\t\tclearColor = overrideMaterial.clearColor || clearColor;\n\t\tclearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\t\tif ( ( clearColor !== undefined ) && ( clearColor !== null ) ) {\n\n\t\t\trenderer.setClearColor( clearColor );\n\t\t\trenderer.setClearAlpha( clearAlpha || 0.0 );\n\t\t\trenderer.clear();\n\n\t\t}\n\n\t\tthis.scene.overrideMaterial = overrideMaterial;\n\t\trenderer.render( this.scene, this.camera );\n\t\tthis.scene.overrideMaterial = null;\n\n\t\t// restore original state\n\t\trenderer.autoClear = originalAutoClear;\n\t\trenderer.setClearColor( this.originalClearColor );\n\t\trenderer.setClearAlpha( originalClearAlpha );\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\tthis.beautyRenderTarget.setSize( width, height );\n\t\tthis.saoRenderTarget.setSize( width, height );\n\t\tthis.blurIntermediateRenderTarget.setSize( width, height );\n\t\tthis.normalRenderTarget.setSize( width, height );\n\t\tthis.depthRenderTarget.setSize( width, height );\n\n\t\tthis.saoMaterial.uniforms[ 'size' ].value.set( width, height );\n\t\tthis.saoMaterial.uniforms[ 'cameraInverseProjectionMatrix' ].value.copy( this.camera.projectionMatrixInverse );\n\t\tthis.saoMaterial.uniforms[ 'cameraProjectionMatrix' ].value = this.camera.projectionMatrix;\n\t\tthis.saoMaterial.needsUpdate = true;\n\n\t\tthis.vBlurMaterial.uniforms[ 'size' ].value.set( width, height );\n\t\tthis.vBlurMaterial.needsUpdate = true;\n\n\t\tthis.hBlurMaterial.uniforms[ 'size' ].value.set( width, height );\n\t\tthis.hBlurMaterial.needsUpdate = true;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.saoRenderTarget.dispose();\n\t\tthis.blurIntermediateRenderTarget.dispose();\n\t\tthis.beautyRenderTarget.dispose();\n\t\tthis.normalRenderTarget.dispose();\n\t\tthis.depthRenderTarget.dispose();\n\n\t\tthis.depthMaterial.dispose();\n\t\tthis.normalMaterial.dispose();\n\t\tthis.saoMaterial.dispose();\n\t\tthis.vBlurMaterial.dispose();\n\t\tthis.hBlurMaterial.dispose();\n\t\tthis.materialCopy.dispose();\n\t\tthis.depthCopy.dispose();\n\n\t\tthis.fsQuad.dispose();\n\n\t}\n\n}\n\nSAOPass.OUTPUT = {\n\t'Beauty': 1,\n\t'Default': 0,\n\t'SAO': 2,\n\t'Depth': 3,\n\t'Normal': 4\n};\n\nexport { SAOPass };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}